; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -ouart0.o --depend=uart0.d --feedback=UKU206.fed --device=DARMP --apcs=interwork -O3 -IC:\Keil\ARM\INC\Philips -D__MICROLIB --omf_browse=uart0.crf uart0.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;28     //-----------------------------------------------
;;;29     char crc_87(char* ptr,char num)
000000  e52de004          PUSH     {lr}
;;;30     {
;;;31     char r,j;
;;;32     r=*ptr;
000004  e5d03000          LDRB     r3,[r0,#0]
;;;33     
;;;34     for(j=1;j<num;j++)
;;;35     	{
;;;36          ptr++;
;;;37     	r=((*ptr)^Table87[r]);
000008  e59fc62c          LDR      r12,|L1.1596|
00000c  e3a02001          MOV      r2,#1                 ;34
                  |L1.16|
000010  e1520001          CMP      r2,r1                 ;34
000014  35f0e001          LDRBCC   lr,[r0,#1]!
000018  37dc3003          LDRBCC   r3,[r12,r3]
00001c  32822001          ADDCC    r2,r2,#1              ;34
000020  320220ff          ANDCC    r2,r2,#0xff           ;34
000024  3023300e          EORCC    r3,r3,lr
000028  3afffff8          BCC      |L1.16|
;;;38     	}
;;;39     
;;;40     return r;	
00002c  e49de004          POP      {lr}
000030  e1a00003          MOV      r0,r3
;;;41     } 
000034  e12fff1e          BX       lr
;;;42     
                          ENDP

                  crc_95 PROC
;;;43     //-----------------------------------------------
;;;44     char crc_95(char* ptr,char num)
000038  e52de004          PUSH     {lr}
;;;45     {
;;;46     char r,j;
;;;47     r=*ptr;
00003c  e5d03000          LDRB     r3,[r0,#0]
;;;48     
;;;49     for(j=1;j<num;j++)
;;;50     	{
;;;51          ptr++;
;;;52     	r=((*ptr)^Table95[r]);
000040  e59fc5f8          LDR      r12,|L1.1600|
000044  e3a02001          MOV      r2,#1                 ;49
                  |L1.72|
000048  e1520001          CMP      r2,r1                 ;49
00004c  35f0e001          LDRBCC   lr,[r0,#1]!
000050  37dc3003          LDRBCC   r3,[r12,r3]
000054  32822001          ADDCC    r2,r2,#1              ;49
000058  320220ff          ANDCC    r2,r2,#0xff           ;49
00005c  3023300e          EORCC    r3,r3,lr
000060  3afffff8          BCC      |L1.72|
;;;53     	}
;;;54     
;;;55     return r;	
000064  e49de004          POP      {lr}
000068  e1a00003          MOV      r0,r3
;;;56     }
00006c  e12fff1e          BX       lr
;;;57     
                          ENDP

                  putchar0 PROC
;;;59     //-----------------------------------------------
;;;60     void putchar0(char c)
000070  e59fc5cc          LDR      r12,|L1.1604|
;;;61     {
000074  e52de004          PUSH     {lr}
;;;62     while (tx_counter0 == TX_BUFFER_SIZE0);
000078  e5dc1006          LDRB     r1,[r12,#6]
                  |L1.124|
00007c  e3510040          CMP      r1,#0x40
000080  0afffffd          BEQ      |L1.124|
;;;63     if (tx_counter0 || ((U0LSR & 0x60)==0))
000084  e3510000          CMP      r1,#0
000088  1a000004          BNE      |L1.160|
00008c  e59f25b4          LDR      r2,|L1.1608|
000090  e5d23014          LDRB     r3,[r2,#0x14]
000094  e3130060          TST      r3,#0x60
;;;64        {
;;;65        tx_buffer0[tx_wr_index0]=c;
;;;66        if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;;;67        ++tx_counter0;
;;;68        }
;;;69     else U0THR=c;
000098  15c20000          STRBNE   r0,[r2,#0]
00009c  1a00000a          BNE      |L1.204|
                  |L1.160|
0000a0  e5dc2004          LDRB     r2,[r12,#4]           ;65  ; tx_wr_index0
0000a4  e59fe5a0          LDR      lr,|L1.1612|
0000a8  e2823001          ADD      r3,r2,#1              ;66
0000ac  e20330ff          AND      r3,r3,#0xff           ;66
0000b0  e7ce0002          STRB     r0,[lr,r2]            ;65
0000b4  e3530040          CMP      r3,#0x40              ;66
0000b8  03a00000          MOVEQ    r0,#0                 ;66
0000bc  e5cc3004          STRB     r3,[r12,#4]           ;66  ; tx_wr_index0
0000c0  05cc0004          STRBEQ   r0,[r12,#4]           ;66  ; tx_wr_index0
0000c4  e2810001          ADD      r0,r1,#1              ;67
0000c8  e5cc0006          STRB     r0,[r12,#6]           ;67  ; tx_counter0
                  |L1.204|
;;;70     }
0000cc  e49de004          POP      {lr}
0000d0  e12fff1e          BX       lr
;;;71     
                          ENDP

                  uart_out_adr0 PROC
;;;100    //-----------------------------------------------
;;;101    void uart_out_adr0 (char *ptr, char len)
0000d4  e92d4070          PUSH     {r4-r6,lr}
;;;102    {
0000d8  e24dd034          SUB      sp,sp,#0x34
;;;103    char UOB[50]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;104    char i,t=0;
0000dc  e3a03000          MOV      r3,#0
;;;105    
;;;106    for(i=0;i<len;i++)
0000e0  e1a02003          MOV      r2,r3
0000e4  e1a0500d          MOV      r5,sp                 ;103
                  |L1.232|
0000e8  e1520001          CMP      r2,r1
;;;107    	{
;;;108    	UOB[i]=ptr[i];
0000ec  37d0c002          LDRBCC   r12,[r0,r2]
0000f0  37c5c002          STRBCC   r12,[r5,r2]
;;;109    	t^=UOB[i];
0000f4  37d5c002          LDRBCC   r12,[r5,r2]
0000f8  32822001          ADDCC    r2,r2,#1              ;106
0000fc  320220ff          ANDCC    r2,r2,#0xff           ;106
000100  3023300c          EORCC    r3,r3,r12
000104  3afffff7          BCC      |L1.232|
;;;110    	}
;;;111    //if(!t)t=0xff;
;;;112    UOB[len]=len;
;;;113    t^=len;	
000108  e0232001          EOR      r2,r3,r1
;;;114    UOB[len+1]=t;	
00010c  e0850001          ADD      r0,r5,r1
000110  e7c51001          STRB     r1,[r5,r1]            ;112
000114  e5c02001          STRB     r2,[r0,#1]
;;;115    UOB[len+2]=END;
000118  e3a0200a          MOV      r2,#0xa
;;;116    //UOB[0]=i+1;
;;;117    //UOB[i]=t^UOB[0];
;;;118    //UOB[i+1]=END;
;;;119    	
;;;120    //puts(UOB); 
;;;121    for (i=0;i<len+3;i++)
00011c  e3a04000          MOV      r4,#0
000120  e2816003          ADD      r6,r1,#3
000124  e5c02002          STRB     r2,[r0,#2]            ;115
000128  ea000003          B        |L1.316|
                  |L1.300|
;;;122    	{
;;;123    	putchar0(UOB[i]);
00012c  e7d50004          LDRB     r0,[r5,r4]
000130  ebfffffe          BL       putchar0
000134  e2840001          ADD      r0,r4,#1              ;121
000138  e20040ff          AND      r4,r0,#0xff           ;121
                  |L1.316|
00013c  e1540006          CMP      r4,r6                 ;121
000140  3afffff9          BCC      |L1.300|
;;;124    	}   
;;;125    }
000144  e28dd034          ADD      sp,sp,#0x34
000148  e8bd4070          POP      {r4-r6,lr}
00014c  e12fff1e          BX       lr
;;;126    
                          ENDP

                  uart0_init PROC
;;;127    //-----------------------------------------------
;;;128    void uart0_init(void)
000150  e59f04f8          LDR      r0,|L1.1616|
;;;129    {
;;;130    /*PINSEL0_bit.P0_0=1;
;;;131    PINSEL0_bit.P0_1=1;*/
;;;132    
;;;133    SET_REG(PINSEL0,1,0*2,2);
000154  e5901000          LDR      r1,[r0,#0]
000158  e3c11003          BIC      r1,r1,#3
00015c  e3811001          ORR      r1,r1,#1
000160  e5801000          STR      r1,[r0,#0]
;;;134    SET_REG(PINSEL0,1,1*2,2);
000164  e5901000          LDR      r1,[r0,#0]
000168  e3c1100c          BIC      r1,r1,#0xc
00016c  e3811004          ORR      r1,r1,#4
000170  e5801000          STR      r1,[r0,#0]
;;;135    
;;;136    
;;;137    
;;;138    SET_REG(U0LCR,1,7/*DLAB*/,1);//U0LCR_bit.DLAB=1;
000174  e2401802          SUB      r1,r0,#0x20000
000178  e5d1200c          LDRB     r2,[r1,#0xc]
;;;139    U0DLL=60000000UL/(BAUD_RATE0*16);
00017c  e3a00086          MOV      r0,#0x86
000180  e3822080          ORR      r2,r2,#0x80           ;138
000184  e5c1200c          STRB     r2,[r1,#0xc]          ;138
000188  e5c10000          STRB     r0,[r1,#0]
;;;140    U0DLM=60000000UL/(BAUD_RATE0*16*256);
00018c  e3a00001          MOV      r0,#1
000190  e5c10004          STRB     r0,[r1,#4]
;;;141    SET_REG(U0LCR,0,7/*DLAB*/,1);//U0LCR_bit.DLAB=0;
000194  e5d1000c          LDRB     r0,[r1,#0xc]
;;;142    U0LCR=0x03;
000198  e3a02003          MOV      r2,#3
00019c  e3c00080          BIC      r0,r0,#0x80           ;141
0001a0  e5c1000c          STRB     r0,[r1,#0xc]          ;141
0001a4  e5c1200c          STRB     r2,[r1,#0xc]
;;;143    U0FCR=0;
0001a8  e3a00000          MOV      r0,#0
0001ac  e5c10008          STRB     r0,[r1,#8]
;;;144    
;;;145    VICProtection = 0;
0001b0  e5000fe0          STR      r0,[r0,#-0xfe0]
;;;146    VICIntEnClr |= (1 << VIC_UART0); 
0001b4  e5103fec          LDR      r3,[r0,#-0xfec]
0001b8  e3833040          ORR      r3,r3,#0x40
0001bc  e5003fec          STR      r3,[r0,#-0xfec]
;;;147    VICIntSelect &= ~(1 << VIC_UART0);
0001c0  e510cff4          LDR      r12,[r0,#-0xff4]
;;;148    VICVectAddr9=(unsigned)uart0_interrupt;
0001c4  e59f3488          LDR      r3,|L1.1620|
0001c8  e3ccc040          BIC      r12,r12,#0x40         ;147
0001cc  e500cff4          STR      r12,[r0,#-0xff4]      ;147
0001d0  e5003edc          STR      r3,[r0,#-0xedc]
;;;149    VICVectCntl9 = 0x20 | VIC_UART0;
0001d4  e3a03026          MOV      r3,#0x26
0001d8  e5003ddc          STR      r3,[r0,#-0xddc]
;;;150    VICIntEnable |= (1  << VIC_UART0);
0001dc  e5103ff0          LDR      r3,[r0,#-0xff0]
0001e0  e3833040          ORR      r3,r3,#0x40
0001e4  e5003ff0          STR      r3,[r0,#-0xff0]
;;;151    
;;;152    U0IER=0x03;
0001e8  e5c12004          STRB     r2,[r1,#4]
;;;153    
;;;154    }
0001ec  e12fff1e          BX       lr
;;;155    
                          ENDP

                  uart_in_an0 PROC
;;;206    //-----------------------------------------------
;;;207    void uart_in_an0(void)
0001f0  e92d40f0          PUSH     {r4-r7,lr}
;;;208    {
;;;209    //char temp;
;;;210    //char temp_char;
;;;211    //int temp_int;
;;;212    //signed long int temp_intL;
;;;213    
;;;214    
;;;215    
;;;216    if((UIB0[0]=='r')&&(UIB0[1]=='e')&&(UIB0[2]=='a')&&(UIB0[3]=='d')&&(UIB0[6]==crc_87(UIB0,6))&&(UIB0[7]==crc_95(UIB0,6)))
0001f4  e59f445c          LDR      r4,|L1.1624|
0001f8  e24dd024          SUB      sp,sp,#0x24           ;208
0001fc  e5d40000          LDRB     r0,[r4,#0]  ; UIB0
000200  e3a05072          MOV      r5,#0x72
000204  e3a06065          MOV      r6,#0x65
000208  e3500072          CMP      r0,#0x72
00020c  1a000042          BNE      |L1.796|
000210  e5d40001          LDRB     r0,[r4,#1]  ; UIB0
000214  e3500065          CMP      r0,#0x65
000218  05d40002          LDRBEQ   r0,[r4,#2]  ; UIB0
00021c  03500061          CMPEQ    r0,#0x61
000220  05d40003          LDRBEQ   r0,[r4,#3]  ; UIB0
000224  03500064          CMPEQ    r0,#0x64
000228  1a000084          BNE      |L1.1088|
00022c  e59f0424          LDR      r0,|L1.1624|
000230  e3a01006          MOV      r1,#6
000234  ebfffffe          BL       crc_87
000238  e5d41006          LDRB     r1,[r4,#6]  ; UIB0
00023c  e1500001          CMP      r0,r1
000240  1a000035          BNE      |L1.796|
000244  e59f040c          LDR      r0,|L1.1624|
000248  e3a01006          MOV      r1,#6
00024c  ebfffffe          BL       crc_95
000250  e5d41007          LDRB     r1,[r4,#7]  ; UIB0
000254  e1500001          CMP      r0,r1
000258  1a00002f          BNE      |L1.796|
;;;217    	{
;;;218    	unsigned short ptr;
;;;219    	unsigned long data1,data2;
;;;220    	char temp_out[20];
;;;221    	ptr=UIB0[4]+(UIB0[5]*256U);
00025c  e5d40004          LDRB     r0,[r4,#4]  ; UIB0
000260  e5d41005          LDRB     r1,[r4,#5]  ; UIB0
000264  e0800401          ADD      r0,r0,r1,LSL #8
000268  e58d0020          STR      r0,[sp,#0x20]
;;;222    	data1=lc640_read_long(ptr);
00026c  e1dd02b0          LDRH     r0,[sp,#0x20]
000270  e1a07000          MOV      r7,r0
000274  ebfffffe          BL       lc640_read_long
000278  e58d001c          STR      r0,[sp,#0x1c]
;;;223    	data2=lc640_read_long(ptr+4);
00027c  e2870004          ADD      r0,r7,#4
000280  ebfffffe          BL       lc640_read_long
000284  e58d0018          STR      r0,[sp,#0x18]
;;;224    	temp_out[0]='r';
000288  e5cd5004          STRB     r5,[sp,#4]
;;;225    	temp_out[1]='e';
;;;226    	temp_out[2]='a';
00028c  e3a00061          MOV      r0,#0x61
000290  e5cd6005          STRB     r6,[sp,#5]            ;225
000294  e5cd0006          STRB     r0,[sp,#6]
;;;227    	temp_out[3]='d';
000298  e3a00064          MOV      r0,#0x64
00029c  e5cd0007          STRB     r0,[sp,#7]
;;;228    	temp_out[4]=*((char*)&ptr);
0002a0  e5dd0020          LDRB     r0,[sp,#0x20]
;;;229    	temp_out[5]=*(((char*)&ptr)+1);	
;;;230    	temp_out[6]=*((char*)&data1);
;;;231    	temp_out[7]=*(((char*)&data1)+1);		
;;;232    	temp_out[8]=*(((char*)&data1)+2);	
;;;233    	temp_out[9]=*(((char*)&data1)+3);		
;;;234    	temp_out[10]=*((char*)&data2);
;;;235    	temp_out[11]=*(((char*)&data2)+1);		
;;;236    	temp_out[12]=*(((char*)&data2)+2);	
;;;237    	temp_out[13]=*(((char*)&data2)+3);	
;;;238    	temp_out[14]=crc_87(temp_out,14);	
0002a4  e3a0100e          MOV      r1,#0xe
0002a8  e5cd0008          STRB     r0,[sp,#8]            ;228
0002ac  e5dd0021          LDRB     r0,[sp,#0x21]         ;229
0002b0  e5cd0009          STRB     r0,[sp,#9]            ;229
0002b4  e5dd001c          LDRB     r0,[sp,#0x1c]         ;230
0002b8  e5cd000a          STRB     r0,[sp,#0xa]          ;230
0002bc  e5dd001d          LDRB     r0,[sp,#0x1d]         ;231
0002c0  e5cd000b          STRB     r0,[sp,#0xb]          ;231
0002c4  e5dd001e          LDRB     r0,[sp,#0x1e]         ;232
0002c8  e5cd000c          STRB     r0,[sp,#0xc]          ;232
0002cc  e5dd001f          LDRB     r0,[sp,#0x1f]         ;233
0002d0  e5cd000d          STRB     r0,[sp,#0xd]          ;233
0002d4  e5dd0018          LDRB     r0,[sp,#0x18]         ;234
0002d8  e5cd000e          STRB     r0,[sp,#0xe]          ;234
0002dc  e5dd0019          LDRB     r0,[sp,#0x19]         ;235
0002e0  e5cd000f          STRB     r0,[sp,#0xf]          ;235
0002e4  e5dd001a          LDRB     r0,[sp,#0x1a]         ;236
0002e8  e5cd0010          STRB     r0,[sp,#0x10]         ;236
0002ec  e5dd001b          LDRB     r0,[sp,#0x1b]         ;237
0002f0  e5cd0011          STRB     r0,[sp,#0x11]         ;237
0002f4  e28d0004          ADD      r0,sp,#4
0002f8  ebfffffe          BL       crc_87
0002fc  e5cd0012          STRB     r0,[sp,#0x12]
;;;239    	temp_out[15]=crc_95(temp_out,14);			
000300  e3a0100e          MOV      r1,#0xe
000304  e28d0004          ADD      r0,sp,#4
000308  ebfffffe          BL       crc_95
00030c  e5cd0013          STRB     r0,[sp,#0x13]
;;;240    	uart_out_adr0(temp_out,16);
000310  e3a01010          MOV      r1,#0x10
000314  e28d0004          ADD      r0,sp,#4
000318  ebfffffe          BL       uart_out_adr0
                  |L1.796|
;;;241    	}
;;;242    
;;;243    
;;;244    if((UIB0[0]=='w')&&(UIB0[1]=='r')&&(UIB0[2]=='i')&&(UIB0[3]=='t')&&(UIB0[4]=='e')&&(UIB0[15]==crc_87(UIB0,15))&&(UIB0[16]==crc_95(UIB0,15)))
00031c  e5d40000          LDRB     r0,[r4,#0]  ; UIB0
000320  e3500077          CMP      r0,#0x77
000324  05d40001          LDRBEQ   r0,[r4,#1]  ; UIB0
000328  03500072          CMPEQ    r0,#0x72
00032c  05d40002          LDRBEQ   r0,[r4,#2]  ; UIB0
000330  03500069          CMPEQ    r0,#0x69
000334  05d40003          LDRBEQ   r0,[r4,#3]  ; UIB0
000338  03500074          CMPEQ    r0,#0x74
00033c  05d40004          LDRBEQ   r0,[r4,#4]  ; UIB0
000340  03500065          CMPEQ    r0,#0x65
000344  1a00003d          BNE      |L1.1088|
000348  e59f0308          LDR      r0,|L1.1624|
00034c  e3a0100f          MOV      r1,#0xf
000350  ebfffffe          BL       crc_87
000354  e5d4100f          LDRB     r1,[r4,#0xf]  ; UIB0
000358  e1500001          CMP      r0,r1
00035c  1a000037          BNE      |L1.1088|
000360  e59f02f0          LDR      r0,|L1.1624|
000364  e3a0100f          MOV      r1,#0xf
000368  ebfffffe          BL       crc_95
00036c  e5d41010          LDRB     r1,[r4,#0x10]  ; UIB0
000370  e1500001          CMP      r0,r1
000374  1a000031          BNE      |L1.1088|
;;;245    	{
;;;246    	unsigned short ptr;
;;;247    	unsigned long data1,data2;
;;;248    	char temp_out[14];
;;;249    	ptr=UIB0[5]+(UIB0[6]*256U);
000378  e5d40005          LDRB     r0,[r4,#5]  ; UIB0
00037c  e5d41006          LDRB     r1,[r4,#6]  ; UIB0
000380  e0800401          ADD      r0,r0,r1,LSL #8
000384  e58d0020          STR      r0,[sp,#0x20]
;;;250    	*((char*)&data1)=UIB0[7];
000388  e5d40007          LDRB     r0,[r4,#7]  ; UIB0
00038c  e5cd001c          STRB     r0,[sp,#0x1c]
;;;251    	*(((char*)&data1)+1)=UIB0[8];
000390  e5d40008          LDRB     r0,[r4,#8]  ; UIB0
000394  e5cd001d          STRB     r0,[sp,#0x1d]
;;;252    	*(((char*)&data1)+2)=UIB0[9];
000398  e5d40009          LDRB     r0,[r4,#9]  ; UIB0
00039c  e5cd001e          STRB     r0,[sp,#0x1e]
;;;253    	*(((char*)&data1)+3)=UIB0[10];
0003a0  e5d4000a          LDRB     r0,[r4,#0xa]  ; UIB0
0003a4  e5cd001f          STRB     r0,[sp,#0x1f]
;;;254    	*((char*)&data2)=UIB0[11];
0003a8  e5d4000b          LDRB     r0,[r4,#0xb]  ; UIB0
;;;255    	*(((char*)&data2)+1)=UIB0[12];
;;;256    	*(((char*)&data2)+2)=UIB0[13];
;;;257    	*(((char*)&data2)+3)=UIB0[14];	
;;;258    	lc640_write_long(ptr,data1);
0003ac  e59d101c          LDR      r1,[sp,#0x1c]
0003b0  e5cd0018          STRB     r0,[sp,#0x18]         ;254
0003b4  e5d4000c          LDRB     r0,[r4,#0xc]          ;255  ; UIB0
0003b8  e5cd0019          STRB     r0,[sp,#0x19]         ;255
0003bc  e5d4000d          LDRB     r0,[r4,#0xd]          ;256  ; UIB0
0003c0  e5cd001a          STRB     r0,[sp,#0x1a]         ;256
0003c4  e5d4000e          LDRB     r0,[r4,#0xe]          ;257  ; UIB0
0003c8  e5cd001b          STRB     r0,[sp,#0x1b]         ;257
0003cc  e1dd02b0          LDRH     r0,[sp,#0x20]
0003d0  e1a04000          MOV      r4,r0
0003d4  ebfffffe          BL       lc640_write_long
;;;259    	lc640_write_long(ptr+4,data2);
0003d8  e59d1018          LDR      r1,[sp,#0x18]
0003dc  e2840004          ADD      r0,r4,#4
0003e0  ebfffffe          BL       lc640_write_long
;;;260    	
;;;261    	//data1=lc640_read_long(ptr);
;;;262    	//data2=lc640_read_long(ptr+4);
;;;263    	temp_out[0]='w';
0003e4  e3a00077          MOV      r0,#0x77
0003e8  e5cd0008          STRB     r0,[sp,#8]
;;;264    	temp_out[1]='r';
;;;265    	temp_out[2]='i';
0003ec  e3a00069          MOV      r0,#0x69
0003f0  e5cd5009          STRB     r5,[sp,#9]            ;264
0003f4  e5cd000a          STRB     r0,[sp,#0xa]
;;;266    	temp_out[3]='t';
0003f8  e3a00074          MOV      r0,#0x74
0003fc  e5cd000b          STRB     r0,[sp,#0xb]
;;;267    	temp_out[4]='e';
000400  e5cd600c          STRB     r6,[sp,#0xc]
;;;268    	temp_out[5]=*((char*)&ptr);
000404  e5dd0020          LDRB     r0,[sp,#0x20]
;;;269    	temp_out[6]=*(((char*)&ptr)+1);	
;;;270    	temp_out[7]=crc_87(temp_out,7);	
000408  e3a01007          MOV      r1,#7
00040c  e5cd000d          STRB     r0,[sp,#0xd]          ;268
000410  e5dd0021          LDRB     r0,[sp,#0x21]         ;269
000414  e5cd000e          STRB     r0,[sp,#0xe]          ;269
000418  e28d0008          ADD      r0,sp,#8
00041c  ebfffffe          BL       crc_87
000420  e5cd000f          STRB     r0,[sp,#0xf]
;;;271    	temp_out[8]=crc_95(temp_out,7);			
000424  e3a01007          MOV      r1,#7
000428  e28d0008          ADD      r0,sp,#8
00042c  ebfffffe          BL       crc_95
000430  e5cd0010          STRB     r0,[sp,#0x10]
;;;272    	uart_out_adr0(temp_out,9);
000434  e3a01009          MOV      r1,#9
000438  e28d0008          ADD      r0,sp,#8
00043c  ebfffffe          BL       uart_out_adr0
                  |L1.1088|
;;;273    	}
;;;274    
;;;275    }
000440  e28dd024          ADD      sp,sp,#0x24
000444  e8bd40f0          POP      {r4-r7,lr}
000448  e12fff1e          BX       lr
;;;276    
                          ENDP

                  index_offset0 PROC
;;;299    //-----------------------------------------------
;;;300    char index_offset0 (signed char index,signed char offset)
00044c  e0800001          ADD      r0,r0,r1
;;;301    {
;;;302    index=index+offset;
000450  e1a00c00          LSL      r0,r0,#24
000454  e1a00c40          ASR      r0,r0,#24
;;;303    if(index>=RX_BUFFER_SIZE0) index-=RX_BUFFER_SIZE0; 
000458  e3500040          CMP      r0,#0x40
00045c  a2400040          SUBGE    r0,r0,#0x40
000460  a1a00c00          LSLGE    r0,r0,#24
000464  a1a00c40          ASRGE    r0,r0,#24
;;;304    if(index<0) index+=RX_BUFFER_SIZE0;
000468  e3500000          CMP      r0,#0
00046c  b2800040          ADDLT    r0,r0,#0x40
000470  b1a00c00          LSLLT    r0,r0,#24
000474  b1a00c40          ASRLT    r0,r0,#24
;;;305    return index;
000478  e20000ff          AND      r0,r0,#0xff
;;;306    }
00047c  e12fff1e          BX       lr
;;;307    
                          ENDP

                  control_check0 PROC
;;;308    //-----------------------------------------------
;;;309    char control_check0(char index)
000480  e92d4070          PUSH     {r4-r6,lr}
;;;310    {
;;;311    char i=0,ii=0,iii;
;;;312    
;;;313    if(rx_buffer0[index]!=END) goto error_cc;
000484  e59f61d0          LDR      r6,|L1.1628|
000488  e3a02000          MOV      r2,#0                 ;311
00048c  e7d61000          LDRB     r1,[r6,r0]
000490  e351000a          CMP      r1,#0xa
000494  1a00001b          BNE      |L1.1288|
;;;314    
;;;315    ii=rx_buffer0[index_offset0(index,-2)];
000498  e1a00c00          LSL      r0,r0,#24
00049c  e1a00c40          ASR      r0,r0,#24
0004a0  e3e01001          MVN      r1,#1
0004a4  e1a0c000          MOV      r12,r0
0004a8  ebfffffe          BL       index_offset0
0004ac  e7d64000          LDRB     r4,[r6,r0]
0004b0  e3e00001          MVN      r0,#1
;;;316    iii=0;
0004b4  e3a03000          MOV      r3,#0
;;;317    for(i=0;i<=ii;i++)
;;;318    	{
;;;319    	iii^=rx_buffer0[index_offset0(index,-2-ii+i)];
0004b8  e0405004          SUB      r5,r0,r4
0004bc  ea000008          B        |L1.1252|
                  |L1.1216|
0004c0  e0850002          ADD      r0,r5,r2
0004c4  e1a01c00          LSL      r1,r0,#24
0004c8  e1a01c41          ASR      r1,r1,#24
0004cc  e1a0000c          MOV      r0,r12
0004d0  ebfffffe          BL       index_offset0
0004d4  e7d60000          LDRB     r0,[r6,r0]
0004d8  e0233000          EOR      r3,r3,r0
0004dc  e2820001          ADD      r0,r2,#1              ;317
0004e0  e20020ff          AND      r2,r0,#0xff           ;317
                  |L1.1252|
0004e4  e1520004          CMP      r2,r4                 ;317
0004e8  9afffff4          BLS      |L1.1216|
;;;320    	}
;;;321    if (iii!=rx_buffer0[index_offset0(index,-1)]) goto error_cc;	
0004ec  e3e01000          MVN      r1,#0
0004f0  e1a0000c          MOV      r0,r12
0004f4  ebfffffe          BL       index_offset0
0004f8  e7d60000          LDRB     r0,[r6,r0]
0004fc  e1500003          CMP      r0,r3
;;;322    
;;;323    
;;;324    //success_cc:
;;;325    return 1;
000500  03a00001          MOVEQ    r0,#1
000504  0a000000          BEQ      |L1.1292|
                  |L1.1288|
;;;326    //goto end_cc;
;;;327    error_cc:
;;;328    return 0;
000508  e3a00000          MOV      r0,#0
                  |L1.1292|
00050c  e8bd4070          POP      {r4-r6,lr}
;;;329    //goto end_cc;
;;;330    
;;;331    //end_cc:
;;;332    }
000510  e12fff1e          BX       lr
;;;333    
                          ENDP

                  uart_in0 PROC
;;;334    //-----------------------------------------------
;;;335    void uart_in0(void)
000514  e92d41f0          PUSH     {r4-r8,lr}
;;;336    {
;;;337    char temp,i/*,count*/;
;;;338    
;;;339    
;;;340    
;;;341    __disable_irq();
000518  e10f0000          MRS      r0,APSR ; formerly CPSR
00051c  e3800080          ORR      r0,r0,#0x80
000520  e121f000          MSR      CPSR_c,r0
;;;342    
;;;343    if(rx_buffer_overflow0)
000524  e59f5118          LDR      r5,|L1.1604|
000528  e3a06000          MOV      r6,#0
00052c  e5d50007          LDRB     r0,[r5,#7]  ; rx_buffer_overflow0
000530  e3500000          CMP      r0,#0
;;;344    	{
;;;345    	rx_wr_index0=0;
000534  15c56001          STRBNE   r6,[r5,#1]  ; rx_wr_index0
;;;346    	rx_rd_index0=0;
000538  15c56002          STRBNE   r6,[r5,#2]  ; rx_rd_index0
;;;347    	rx_counter0=0;
00053c  15c56003          STRBNE   r6,[r5,#3]  ; rx_counter0
;;;348    	rx_buffer_overflow0=0;
000540  15c56007          STRBNE   r6,[r5,#7]  ; rx_buffer_overflow0
000544  1a000037          BNE      |L1.1576|
;;;349    	}    
;;;350    	
;;;351    if(rx_counter0&&(rx_buffer0[index_offset0(rx_wr_index0,-1)])==END)
000548  e5d50003          LDRB     r0,[r5,#3]  ; rx_counter0
00054c  e3500000          CMP      r0,#0
000550  0a000034          BEQ      |L1.1576|
000554  e5d50001          LDRB     r0,[r5,#1]  ; rx_wr_index0
000558  e3e01000          MVN      r1,#0
00055c  e1a00c00          LSL      r0,r0,#24
000560  e1a00c40          ASR      r0,r0,#24
000564  ebfffffe          BL       index_offset0
000568  e59f70ec          LDR      r7,|L1.1628|
00056c  e7d70000          LDRB     r0,[r7,r0]
000570  e350000a          CMP      r0,#0xa
000574  1a00002b          BNE      |L1.1576|
;;;352    	{
;;;353    	
;;;354         temp=rx_buffer0[index_offset0(rx_wr_index0,-3)];
000578  e5d50001          LDRB     r0,[r5,#1]  ; rx_wr_index0
00057c  e3e01002          MVN      r1,#2
000580  e1a00c00          LSL      r0,r0,#24
000584  e1a00c40          ASR      r0,r0,#24
000588  ebfffffe          BL       index_offset0
00058c  e7d74000          LDRB     r4,[r7,r0]
;;;355        	if(temp<20) 
000590  e3540014          CMP      r4,#0x14
000594  2a000023          BCS      |L1.1576|
;;;356        		{
;;;357        		if(control_check0(index_offset0(rx_wr_index0,-1)))
000598  e5d50001          LDRB     r0,[r5,#1]  ; rx_wr_index0
00059c  e3e01000          MVN      r1,#0
0005a0  e1a00c00          LSL      r0,r0,#24
0005a4  e1a00c40          ASR      r0,r0,#24
0005a8  ebfffffe          BL       index_offset0
0005ac  ebfffffe          BL       control_check0
0005b0  e3500000          CMP      r0,#0
0005b4  0a00001b          BEQ      |L1.1576|
;;;358        			{
;;;359        		
;;;360        			rx_rd_index0=index_offset0(rx_wr_index0,-3-temp);
0005b8  e3e00002          MVN      r0,#2
0005bc  e0400004          SUB      r0,r0,r4
0005c0  e1a01c00          LSL      r1,r0,#24
0005c4  e5d50001          LDRB     r0,[r5,#1]  ; rx_wr_index0
0005c8  e1a01c41          ASR      r1,r1,#24
0005cc  e1a00c00          LSL      r0,r0,#24
0005d0  e1a00c40          ASR      r0,r0,#24
0005d4  ebfffffe          BL       index_offset0
;;;361        			for(i=0;i<temp;i++)
0005d8  e3a02000          MOV      r2,#0
;;;362    				{
;;;363    				UIB0[i]=rx_buffer0[index_offset0(rx_rd_index0,i)];
0005dc  e247300a          SUB      r3,r7,#0xa
0005e0  e5c50002          STRB     r0,[r5,#2]            ;360  ; rx_rd_index0
0005e4  ea000009          B        |L1.1552|
                  |L1.1512|
0005e8  e5d50002          LDRB     r0,[r5,#2]  ; rx_rd_index0
0005ec  e1a01c02          LSL      r1,r2,#24
0005f0  e1a01c41          ASR      r1,r1,#24
0005f4  e1a00c00          LSL      r0,r0,#24
0005f8  e1a00c40          ASR      r0,r0,#24
0005fc  ebfffffe          BL       index_offset0
000600  e7d70000          LDRB     r0,[r7,r0]
000604  e7c30002          STRB     r0,[r3,r2]
000608  e2820001          ADD      r0,r2,#1              ;361
00060c  e20020ff          AND      r2,r0,#0xff           ;361
                  |L1.1552|
000610  e1520004          CMP      r2,r4                 ;361
000614  3afffff3          BCC      |L1.1512|
;;;364    				} 
;;;365    			rx_rd_index0=rx_wr_index0;
000618  e5d50001          LDRB     r0,[r5,#1]  ; rx_wr_index0
00061c  e5c50002          STRB     r0,[r5,#2]  ; rx_rd_index0
;;;366    			rx_counter0=0;
000620  e5c56003          STRB     r6,[r5,#3]  ; rx_counter0
;;;367    			/*if((UIB0[0]=='S')&&(UIB0[1]=='P')&&(UIB0[2]=='A'))uart_spa_in_an(UIB0);
;;;368    			else*/ uart_in_an0();
000624  ebfffffe          BL       uart_in_an0
                  |L1.1576|
;;;369        			}
;;;370     	
;;;371        		} 
;;;372        	}	
;;;373    
;;;374    
;;;375    __enable_irq();     
000628  e10f0000          MRS      r0,APSR ; formerly CPSR
00062c  e3c00080          BIC      r0,r0,#0x80
000630  e121f000          MSR      CPSR_c,r0
;;;376    }
000634  e8bd41f0          POP      {r4-r8,lr}
000638  e12fff1e          BX       lr
;;;377    
                          ENDP

                  |L1.1596|
                          DCD      Table87
                  |L1.1600|
                          DCD      Table95
                  |L1.1604|
                          DCD      ||.data||
                  |L1.1608|
                          DCD      0xe000c000
                  |L1.1612|
                          DCD      ||.bss||+0x4a
                  |L1.1616|
                          DCD      0xe002c000
                  |L1.1620|
                          DCD      uart0_interrupt
                  |L1.1624|
                          DCD      ||.bss||
                  |L1.1628|
                          DCD      ||.bss||+0xa

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  uart_out0 PROC
;;;28     //-----------------------------------------------
;;;29     char crc_87(char* ptr,char num)
000000  e92d407f          PUSH     {r0-r6,lr}
;;;30     {
;;;31     char r,j;
;;;32     r=*ptr;
000004  e28de020          ADD      lr,sp,#0x20
;;;33     
;;;34     for(j=1;j<num;j++)
;;;35     	{
;;;36          ptr++;
;;;37     	r=((*ptr)^Table87[r]);
000008  e89e4030          LDM      lr,{r4,r5,lr}
00000c  e5cd1000          STRB     r1,[sp,#0]            ;34
000010  e5cd2001          STRB     r2,[sp,#1]            ;34
000014  e5cd5004          STRB     r5,[sp,#4]
000018  e3a0c000          MOV      r12,#0
00001c  e5cd3002          STRB     r3,[sp,#2]            ;34
000020  e1a0100c          MOV      r1,r12                ;34
000024  e1a0500d          MOV      r5,sp
000028  e5cd4003          STRB     r4,[sp,#3]            ;34
;;;38     	}
;;;39     
;;;40     return r;	
00002c  e5cde005          STRB     lr,[sp,#5]
                  |L2.48|
000030  e1510000          CMP      r1,r0
;;;41     } 
000034  37d52001          LDRBCC   r2,[r5,r1]
000038  32811001          ADDCC    r1,r1,#1
00003c  320110ff          ANDCC    r1,r1,#0xff
000040  302cc002          EORCC    r12,r12,r2
000044  3afffff9          BCC      |L2.48|
000048  e7c50000          STRB     r0,[r5,r0]
00004c  e7d51000          LDRB     r1,[r5,r0]
000050  e3a04000          MOV      r4,#0
000054  e2806003          ADD      r6,r0,#3
000058  e021200c          EOR      r2,r1,r12
00005c  e0851000          ADD      r1,r5,r0
000060  e5c12001          STRB     r2,[r1,#1]
000064  e3a0200a          MOV      r2,#0xa
000068  e5c12002          STRB     r2,[r1,#2]
00006c  ea000003          B        |L2.128|
                  |L2.112|
000070  e7d50004          LDRB     r0,[r5,r4]
000074  ebfffffe          BL       putchar0
000078  e2840001          ADD      r0,r4,#1
00007c  e20040ff          AND      r4,r0,#0xff
                  |L2.128|
000080  e1540006          CMP      r4,r6
000084  3afffff9          BCC      |L2.112|
000088  e8bd407f          POP      {r0-r6,lr}
00008c  e12fff1e          BX       lr
;;;42     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  uart0_interrupt PROC
;;;28     //-----------------------------------------------
;;;29     char crc_87(char* ptr,char num)
000000  e92d500f          PUSH     {r0-r3,r12,lr}
;;;30     {
;;;31     char r,j;
;;;32     r=*ptr;
000004  e59f30bc          LDR      r3,|L3.200|
;;;33     
;;;34     for(j=1;j<num;j++)
;;;35     	{
;;;36          ptr++;
;;;37     	r=((*ptr)^Table87[r]);
000008  e5d30014          LDRB     r0,[r3,#0x14]
00000c  e5d30008          LDRB     r0,[r3,#8]            ;34
000010  e3a02000          MOV      r2,#0                 ;34
000014  e200100f          AND      r1,r0,#0xf
000018  e59f00ac          LDR      r0,|L3.204|
00001c  e3510004          CMP      r1,#4                 ;34
000020  1a000015          BNE      |L3.124|
000024  e5d01008          LDRB     r1,[r0,#8]  ; plazma_uart0
000028  e2811001          ADD      r1,r1,#1              ;34
;;;38     	}
;;;39     
;;;40     return r;	
00002c  e5c01008          STRB     r1,[r0,#8]  ; plazma_uart0
000030  e5d33000          LDRB     r3,[r3,#0]
;;;41     } 
000034  e5d01001          LDRB     r1,[r0,#1]  ; rx_wr_index0
000038  e59fe090          LDR      lr,|L3.208|
00003c  e3a0c001          MOV      r12,#1
000040  e7ce3001          STRB     r3,[lr,r1]
000044  e2811001          ADD      r1,r1,#1
000048  e20110ff          AND      r1,r1,#0xff
00004c  e5c0c000          STRB     r12,[r0,#0]  ; bRXIN0
000050  e3510040          CMP      r1,#0x40
000054  e5c01001          STRB     r1,[r0,#1]  ; rx_wr_index0
000058  05c02001          STRBEQ   r2,[r0,#1]  ; rx_wr_index0
00005c  e5d01003          LDRB     r1,[r0,#3]  ; rx_counter0
000060  e2811001          ADD      r1,r1,#1
000064  e20110ff          AND      r1,r1,#0xff
000068  e3510040          CMP      r1,#0x40
00006c  e5c01003          STRB     r1,[r0,#3]  ; rx_counter0
000070  05c02003          STRBEQ   r2,[r0,#3]  ; rx_counter0
000074  05c0c007          STRBEQ   r12,[r0,#7]  ; rx_buffer_overflow0
000078  ea00000f          B        |L3.188|
                  |L3.124|
00007c  e3510002          CMP      r1,#2
000080  1a00000d          BNE      |L3.188|
000084  e5d01006          LDRB     r1,[r0,#6]  ; tx_counter0
000088  e3510000          CMP      r1,#0
00008c  0a00000a          BEQ      |L3.188|
000090  e2411001          SUB      r1,r1,#1
000094  e5c01006          STRB     r1,[r0,#6]  ; tx_counter0
000098  e5d01005          LDRB     r1,[r0,#5]  ; tx_rd_index0
00009c  e59fc030          LDR      r12,|L3.212|
0000a0  e7dcc001          LDRB     r12,[r12,r1]
0000a4  e5c3c000          STRB     r12,[r3,#0]
0000a8  e2811001          ADD      r1,r1,#1
0000ac  e20110ff          AND      r1,r1,#0xff
0000b0  e3510040          CMP      r1,#0x40
0000b4  e5c01005          STRB     r1,[r0,#5]  ; tx_rd_index0
0000b8  05c02005          STRBEQ   r2,[r0,#5]  ; tx_rd_index0
                  |L3.188|
0000bc  e5022fd0          STR      r2,[r2,#-0xfd0]
0000c0  e8bd500f          POP      {r0-r3,r12,lr}
0000c4  e25ef004          SUBS     pc,lr,#4
;;;42     
                          ENDP

                  |L3.200|
                          DCD      0xe000c000
                  |L3.204|
                          DCD      ||.data||
                  |L3.208|
                          DCD      ||.bss||+0xa
                  |L3.212|
                          DCD      ||.bss||+0x4a

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  getchar0 PROC
;;;28     //-----------------------------------------------
;;;29     char crc_87(char* ptr,char num)
000000  e59f3038          LDR      r3,|L4.64|
;;;30     {
;;;31     char r,j;
;;;32     r=*ptr;
000004  e5d31003          LDRB     r1,[r3,#3]
                  |L4.8|
;;;33     
;;;34     for(j=1;j<num;j++)
;;;35     	{
;;;36          ptr++;
;;;37     	r=((*ptr)^Table87[r]);
000008  e3510000          CMP      r1,#0
00000c  0afffffd          BEQ      |L4.8|
000010  e5d30002          LDRB     r0,[r3,#2]            ;34  ; rx_rd_index0
000014  e59fc028          LDR      r12,|L4.68|
000018  e2411001          SUB      r1,r1,#1
00001c  e2802001          ADD      r2,r0,#1              ;34
000020  e20220ff          AND      r2,r2,#0xff           ;34
000024  e7dc0000          LDRB     r0,[r12,r0]
000028  e3520040          CMP      r2,#0x40              ;34
;;;38     	}
;;;39     
;;;40     return r;	
00002c  e5c32002          STRB     r2,[r3,#2]  ; rx_rd_index0
000030  03a02000          MOVEQ    r2,#0
;;;41     } 
000034  05c32002          STRBEQ   r2,[r3,#2]  ; rx_rd_index0
000038  e5c31003          STRB     r1,[r3,#3]  ; rx_counter0
00003c  e12fff1e          BX       lr
;;;42     
                          ENDP

                  |L4.64|
                          DCD      ||.data||
                  |L4.68|
                          DCD      ||.bss||+0xa

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        10
                  rx_buffer0
                          %        64
                  tx_buffer0
                          %        64

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.8||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.9||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||.data||, DATA, ALIGN=0

                  bRXIN0
000000  00                DCB      0x00
                  rx_wr_index0
000001  00                DCB      0x00
                  rx_rd_index0
000002  00                DCB      0x00
                  rx_counter0
000003  00                DCB      0x00
                  tx_wr_index0
000004  00                DCB      0x00
                  tx_rd_index0
000005  00                DCB      0x00
                  tx_counter0
000006  00                DCB      0x00
                  rx_buffer_overflow0
000007  00                DCB      0x00
                  plazma_uart0
000008  00                DCB      0x00

                          AREA ||area_number.12||, DATA, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.data||
                  flag0
000000  00                DCB      0x00
