; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -oavar_hndl.o --depend=avar_hndl.d --feedback=UKU206.fed --device=DARMP --apcs=interwork -O3 -IC:\Keil\ARM\INC\Philips -D__MICROLIB --omf_browse=avar_hndl.crf avar_hndl.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  avar_hndl PROC
;;;171    //-----------------------------------------------
;;;172    void avar_hndl(void)
000000  e59f0c80          LDR      r0,|L1.3208|
;;;173    {
000004  e52de004          PUSH     {lr}
;;;174    //static unsigned avar_stat_old;
;;;175    char i;
;;;176    //unsigned avar_stat_new,avar_stat_offed;
;;;177    
;;;178    if(net_av)		SET_REG(avar_stat,1,0,1);
000008  e5d01000          LDRB     r1,[r0,#0]  ; net_av
00000c  e59f3c78          LDR      r3,|L1.3212|
;;;179    else	   			SET_REG(avar_stat,0,0,1);
;;;180    
;;;181    for(i=0;i<2;i++)
;;;182    	{
;;;183    	if(bat[i]._av)	SET_REG(avar_stat,1,1+i,1);
000010  e59fcc78          LDR      r12,|L1.3216|
000014  e5930000          LDR      r0,[r3,#0]            ;178
000018  e3510000          CMP      r1,#0                 ;178
00001c  03c00001          BICEQ    r0,r0,#1              ;179
000020  13800001          ORRNE    r0,r0,#1              ;178
000024  e5830000          STR      r0,[r3,#0]            ;179  ; avar_stat
000028  e3a00000          MOV      r0,#0                 ;181
00002c  e3a02001          MOV      r2,#1
                  |L1.48|
000030  e0601200          RSB      r1,r0,r0,LSL #4
000034  e08c1101          ADD      r1,r12,r1,LSL #2
000038  e5d11035          LDRB     r1,[r1,#0x35]
00003c  e593e000          LDR      lr,[r3,#0]  ; avar_stat
000040  e3510000          CMP      r1,#0
000044  e2801001          ADD      r1,r0,#1
000048  e1a01112          LSL      r1,r2,r1
;;;184    	else	   		SET_REG(avar_stat,0,1+i,1);
00004c  01ce1001          BICEQ    r1,lr,r1
000050  11cee001          BICNE    lr,lr,r1              ;183
000054  1181100e          ORRNE    r1,r1,lr              ;183
000058  e2800001          ADD      r0,r0,#1              ;181
00005c  e20000ff          AND      r0,r0,#0xff           ;181
000060  e3500002          CMP      r0,#2                 ;181
000064  e5831000          STR      r1,[r3,#0]            ;181  ; avar_stat
000068  3afffff0          BCC      |L1.48|
;;;185    	}
;;;186    
;;;187    for(i=0;i<12;i++)
;;;188    	{
;;;189    	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
00006c  e59fcc20          LDR      r12,|L1.3220|
000070  e3a00000          MOV      r0,#0                 ;187
                  |L1.116|
000074  e0601180          RSB      r1,r0,r0,LSL #3
000078  e0811081          ADD      r1,r1,r1,LSL #1
00007c  e08c1101          ADD      r1,r12,r1,LSL #2
000080  e5d11001          LDRB     r1,[r1,#1]
000084  e593e000          LDR      lr,[r3,#0]  ; avar_stat
000088  e3510000          CMP      r1,#0
00008c  e2801003          ADD      r1,r0,#3
000090  e1a01112          LSL      r1,r2,r1
;;;190    	else	   		SET_REG(avar_stat,0,3+i,1);
000094  01ce1001          BICEQ    r1,lr,r1
000098  11cee001          BICNE    lr,lr,r1              ;189
00009c  1181100e          ORRNE    r1,r1,lr              ;189
0000a0  e2800001          ADD      r0,r0,#1              ;187
0000a4  e20000ff          AND      r0,r0,#0xff           ;187
0000a8  e350000c          CMP      r0,#0xc               ;187
0000ac  e5831000          STR      r1,[r3,#0]            ;187  ; avar_stat
0000b0  3affffef          BCC      |L1.116|
;;;191    	}
;;;192    
;;;193    for(i=0;i<6;i++)
;;;194    	{
;;;195    	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
0000b4  e59fcbdc          LDR      r12,|L1.3224|
0000b8  e3a00000          MOV      r0,#0                 ;193
                  |L1.188|
0000bc  e7dc1000          LDRB     r1,[r12,r0]
0000c0  e593e000          LDR      lr,[r3,#0]  ; avar_stat
0000c4  e3510000          CMP      r1,#0
0000c8  e280100f          ADD      r1,r0,#0xf
0000cc  e1a01112          LSL      r1,r2,r1
;;;196    	else	   		SET_REG(avar_stat,0,15+i,1);
0000d0  01ce1001          BICEQ    r1,lr,r1
0000d4  11cee001          BICNE    lr,lr,r1              ;195
0000d8  1181100e          ORRNE    r1,r1,lr              ;195
0000dc  e2800001          ADD      r0,r0,#1              ;193
0000e0  e20000ff          AND      r0,r0,#0xff           ;193
0000e4  e3500006          CMP      r0,#6                 ;193
0000e8  e5831000          STR      r1,[r3,#0]            ;193  ; avar_stat
0000ec  3afffff2          BCC      |L1.188|
;;;197    	}
;;;198    
;;;199    for(i=0;i<4;i++)
;;;200    	{
;;;201    	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
0000f0  e59fcba4          LDR      r12,|L1.3228|
0000f4  e3a00000          MOV      r0,#0                 ;199
                  |L1.248|
0000f8  e7dc1000          LDRB     r1,[r12,r0]
0000fc  e593e000          LDR      lr,[r3,#0]  ; avar_stat
000100  e3510000          CMP      r1,#0
000104  e2801015          ADD      r1,r0,#0x15
000108  e1a01112          LSL      r1,r2,r1
;;;202    	else	   		SET_REG(avar_stat,0,21+i,1);
00010c  01ce1001          BICEQ    r1,lr,r1
000110  11cee001          BICNE    lr,lr,r1              ;201
000114  1181100e          ORRNE    r1,r1,lr              ;201
000118  e2800001          ADD      r0,r0,#1              ;199
00011c  e20000ff          AND      r0,r0,#0xff           ;199
000120  e3500004          CMP      r0,#4                 ;199
000124  e5831000          STR      r1,[r3,#0]            ;199  ; avar_stat
000128  3afffff2          BCC      |L1.248|
;;;203    	}
;;;204    for(i=0;i<4;i++)
;;;205    	{
;;;206    	if(av_sk[i])	SET_REG(avar_stat,1,25+i,1);
00012c  e59fcb6c          LDR      r12,|L1.3232|
000130  e3a00000          MOV      r0,#0                 ;204
                  |L1.308|
000134  e7dc1000          LDRB     r1,[r12,r0]
000138  e593e000          LDR      lr,[r3,#0]  ; avar_stat
00013c  e3510000          CMP      r1,#0
000140  e2801019          ADD      r1,r0,#0x19
000144  e1a01112          LSL      r1,r2,r1
;;;207    	else	   		SET_REG(avar_stat,0,25+i,1);
000148  01ce1001          BICEQ    r1,lr,r1
00014c  11cee001          BICNE    lr,lr,r1              ;206
000150  1181100e          ORRNE    r1,r1,lr              ;206
000154  e2800001          ADD      r0,r0,#1              ;204
000158  e20000ff          AND      r0,r0,#0xff           ;204
00015c  e3500004          CMP      r0,#4                 ;204
000160  e5831000          STR      r1,[r3,#0]            ;204  ; avar_stat
000164  3afffff2          BCC      |L1.308|
;;;208    	}
;;;209    
;;;210    avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
000168  e1a00001          MOV      r0,r1
00016c  e5931008          LDR      r1,[r3,#8]  ; avar_stat_old
000170  e1c02001          BIC      r2,r0,r1
;;;211    
;;;212    avar_ind_stat|=avar_stat_new;
000174  e583200c          STR      r2,[r3,#0xc]  ; avar_stat_new
000178  e593c004          LDR      r12,[r3,#4]  ; avar_ind_stat
;;;213    
;;;214    
;;;215    
;;;216    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
00017c  e1c11000          BIC      r1,r1,r0
000180  e182200c          ORR      r2,r2,r12             ;212
000184  e1e01001          MVN      r1,r1
;;;217    
;;;218    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
000188  e59fcb14          LDR      r12,|L1.3236|
00018c  e5831010          STR      r1,[r3,#0x10]  ; avar_ind_stat, avar_stat_offed
000190  e5832004          STR      r2,[r3,#4]
000194  e1dcc0b0          LDRH     r12,[r12,#0]  ; AV_OFF_AVT
000198  e35c0000          CMP      r12,#0
00019c  03e0c001          MVNEQ    r12,#1
0001a0  0181100c          ORREQ    r1,r1,r12
0001a4  05831010          STREQ    r1,[r3,#0x10]  ; avar_stat_offed
;;;219    
;;;220    avar_ind_stat&=avar_stat_offed; 
0001a8  e0011002          AND      r1,r1,r2
;;;221    
;;;222    avar_stat_old=avar_stat;
0001ac  e5a31004          STR      r1,[r3,#4]!  ; avar_ind_stat, avar_stat_old
0001b0  e5830004          STR      r0,[r3,#4]
;;;223    }
0001b4  e49de004          POP      {lr}
0001b8  e12fff1e          BX       lr
;;;224    
                          ENDP

                  reload_hndl PROC
;;;225    //-----------------------------------------------
;;;226    void reload_hndl(void)
0001bc  e92d4038          PUSH     {r3-r5,lr}
;;;227    {
;;;228    char data[4];
;;;229    unsigned int event_ptr,lc640_adr/*,event_ptr_find*/,event_cnt;
;;;230    
;;;231    event_ptr=lc640_read_int(PTR_EVENT_LOG);
0001c0  e3a00c0e          MOV      r0,#0xe00
0001c4  ebfffffe          BL       lc640_read_int
;;;232    event_ptr++;	
0001c8  e2804001          ADD      r4,r0,#1
;;;233    if(event_ptr>63)event_ptr=0;	
0001cc  e354003f          CMP      r4,#0x3f
0001d0  83a04000          MOVHI    r4,#0
;;;234    lc640_write_int(PTR_EVENT_LOG,event_ptr);	
0001d4  e1a01804          LSL      r1,r4,#16
0001d8  e1a01841          ASR      r1,r1,#16
0001dc  e3a00c0e          MOV      r0,#0xe00
0001e0  ebfffffe          BL       lc640_write_int
;;;235    	
;;;236    event_cnt=lc640_read_int(CNT_EVENT_LOG);
0001e4  e59f5abc          LDR      r5,|L1.3240|
0001e8  e1a00005          MOV      r0,r5
0001ec  ebfffffe          BL       lc640_read_int
;;;237    if(event_cnt!=63)event_cnt=event_ptr;
0001f0  e350003f          CMP      r0,#0x3f
0001f4  11a00004          MOVNE    r0,r4
;;;238    lc640_write_int(CNT_EVENT_LOG,event_cnt); 
0001f8  e1a01800          LSL      r1,r0,#16
0001fc  e1a01841          ASR      r1,r1,#16
000200  e1a00005          MOV      r0,r5
000204  ebfffffe          BL       lc640_write_int
;;;239    	
;;;240    lc640_adr=EVENT_LOG+(lc640_read_int(PTR_EVENT_LOG)*32);
000208  e3a00c0e          MOV      r0,#0xe00
00020c  ebfffffe          BL       lc640_read_int
000210  e3a01b01          MOV      r1,#0x400
000214  e0814280          ADD      r4,r1,r0,LSL #5
;;;241    	
;;;242    data[0]='U';
000218  e3a00055          MOV      r0,#0x55
00021c  e5cd0000          STRB     r0,[sp,#0]
;;;243    data[1]=0;
000220  e3a05000          MOV      r5,#0
;;;244    data[2]='R';
000224  e3a00052          MOV      r0,#0x52
000228  e5cd5001          STRB     r5,[sp,#1]            ;243
00022c  e5cd0002          STRB     r0,[sp,#2]
;;;245    data[3]=0;
;;;246    lc640_write_long_ptr(lc640_adr,data);
000230  e1a0100d          MOV      r1,sp
000234  e1a00004          MOV      r0,r4
000238  e5cd5003          STRB     r5,[sp,#3]            ;245
00023c  ebfffffe          BL       lc640_write_long_ptr
;;;247    
;;;248    data[0]=0;
;;;249    data[1]=0;
;;;250    data[2]=0;
;;;251    data[3]=0;
;;;252    lc640_write_long_ptr(lc640_adr+4,data);
000240  e1a0100d          MOV      r1,sp
000244  e2840004          ADD      r0,r4,#4
000248  e58d5000          STR      r5,[sp,#0]            ;251
00024c  ebfffffe          BL       lc640_write_long_ptr
;;;253    
;;;254    data[0]=year__;
000250  e59f0a54          LDR      r0,|L1.3244|
;;;255    data[1]=month__;
;;;256    data[2]=day__;
;;;257    data[3]=0;
;;;258    lc640_write_long_ptr(lc640_adr+8,data);
000254  e1a0100d          MOV      r1,sp
000258  e5d00000          LDRB     r0,[r0,#0]            ;254  ; year__
00025c  e5cd0000          STRB     r0,[sp,#0]            ;254
000260  e59f0a48          LDR      r0,|L1.3248|
000264  e5d00000          LDRB     r0,[r0,#0]            ;255  ; month__
000268  e5cd0001          STRB     r0,[sp,#1]            ;255
00026c  e59f0a40          LDR      r0,|L1.3252|
000270  e5d00000          LDRB     r0,[r0,#0]            ;256  ; day__
000274  e5cd0002          STRB     r0,[sp,#2]            ;256
000278  e2840008          ADD      r0,r4,#8
00027c  e5cd5003          STRB     r5,[sp,#3]            ;257
000280  ebfffffe          BL       lc640_write_long_ptr
;;;259    
;;;260    data[0]=hour__;
000284  e59f0a2c          LDR      r0,|L1.3256|
;;;261    data[1]=min__;
;;;262    data[2]=sec__;
;;;263    data[3]=0;
;;;264    lc640_write_long_ptr(lc640_adr+12,data);
000288  e1a0100d          MOV      r1,sp
00028c  e5d00000          LDRB     r0,[r0,#0]            ;260  ; hour__
000290  e5cd0000          STRB     r0,[sp,#0]            ;260
000294  e59f0a20          LDR      r0,|L1.3260|
000298  e5d00000          LDRB     r0,[r0,#0]            ;261  ; min__
00029c  e5cd0001          STRB     r0,[sp,#1]            ;261
0002a0  e59f0a18          LDR      r0,|L1.3264|
0002a4  e5d00000          LDRB     r0,[r0,#0]            ;262  ; sec__
0002a8  e5cd0002          STRB     r0,[sp,#2]            ;262
0002ac  e284000c          ADD      r0,r4,#0xc
0002b0  e5cd5003          STRB     r5,[sp,#3]            ;263
0002b4  ebfffffe          BL       lc640_write_long_ptr
;;;265    	
;;;266    data[0]='A';
0002b8  e3a05041          MOV      r5,#0x41
0002bc  e5cd5000          STRB     r5,[sp,#0]
;;;267    data[1]='A';
0002c0  e5cd5001          STRB     r5,[sp,#1]
;;;268    data[2]='A';
0002c4  e5cd5002          STRB     r5,[sp,#2]
;;;269    data[3]='A';
;;;270    lc640_write_long_ptr(lc640_adr+16,data);
0002c8  e1a0100d          MOV      r1,sp
0002cc  e2840010          ADD      r0,r4,#0x10
0002d0  e5cd5003          STRB     r5,[sp,#3]            ;269
0002d4  ebfffffe          BL       lc640_write_long_ptr
;;;271    	
;;;272    data[0]='A';
0002d8  e5cd5000          STRB     r5,[sp,#0]
;;;273    data[1]='A';
0002dc  e5cd5001          STRB     r5,[sp,#1]
;;;274    data[2]='A';
0002e0  e5cd5002          STRB     r5,[sp,#2]
;;;275    data[3]='A';
;;;276    lc640_write_long_ptr(lc640_adr+20,data);
0002e4  e1a0100d          MOV      r1,sp
0002e8  e2840014          ADD      r0,r4,#0x14
0002ec  e5cd5003          STRB     r5,[sp,#3]            ;275
0002f0  ebfffffe          BL       lc640_write_long_ptr
;;;277    	
;;;278    data[0]='A';
0002f4  e5cd5000          STRB     r5,[sp,#0]
;;;279    data[1]='A';
0002f8  e5cd5001          STRB     r5,[sp,#1]
;;;280    data[2]='A';
0002fc  e5cd5002          STRB     r5,[sp,#2]
;;;281    data[3]='A';
;;;282    lc640_write_long_ptr(lc640_adr+24,data);
000300  e1a0100d          MOV      r1,sp
000304  e2840018          ADD      r0,r4,#0x18
000308  e5cd5003          STRB     r5,[sp,#3]            ;281
00030c  ebfffffe          BL       lc640_write_long_ptr
;;;283    	
;;;284    data[0]='A';
000310  e5cd5000          STRB     r5,[sp,#0]
;;;285    data[1]='A';
000314  e5cd5001          STRB     r5,[sp,#1]
;;;286    data[2]='A';
000318  e5cd5002          STRB     r5,[sp,#2]
;;;287    data[3]='A';
;;;288    lc640_write_long_ptr(lc640_adr+28,data);				
00031c  e1a0100d          MOV      r1,sp
000320  e284001c          ADD      r0,r4,#0x1c
000324  e5cd5003          STRB     r5,[sp,#3]            ;287
000328  ebfffffe          BL       lc640_write_long_ptr
;;;289    	
;;;290    	
;;;291    }
00032c  e8bd4038          POP      {r3-r5,lr}
000330  e12fff1e          BX       lr
;;;292    
                          ENDP

                  avar_unet_hndl PROC
;;;293    //-----------------------------------------------
;;;294    void avar_unet_hndl(char in)
000334  e92d4ff8          PUSH     {r3-r11,lr}
;;;295    {
;;;296    
;;;297    char data[4];
;;;298    unsigned int event_ptr,lc640_adr,event_ptr_find,event_cnt;
;;;299    
;;;300    
;;;301    if(in==1)
;;;302    	{
;;;303    	net_av=1;
000338  e59f1948          LDR      r1,|L1.3208|
;;;304    
;;;305    	//beep_init(0x01L,'O');
;;;306    	//a.av.bAN=1;
;;;307    
;;;308    
;;;309    	//beep_init(0x33333333,'A');
;;;310    	 
;;;311    	event_ptr=lc640_read_int(PTR_EVENT_LOG);
;;;312    	event_ptr++;	
;;;313    	if(event_ptr>63)event_ptr=0;	
;;;314    	lc640_write_int(PTR_EVENT_LOG,event_ptr);	
;;;315    	
;;;316         event_cnt=lc640_read_int(CNT_EVENT_LOG);
;;;317    	if(event_cnt!=63)event_cnt=event_ptr;
;;;318    	lc640_write_int(CNT_EVENT_LOG,event_cnt); 
;;;319    	
;;;320    	lc640_adr=EVENT_LOG+(lc640_read_int(PTR_EVENT_LOG)*32);
;;;321    	
;;;322    	data[0]='P';
;;;323    	data[1]=0;
;;;324    	data[2]='A';
;;;325    	data[3]=0;
;;;326    	lc640_write_long_ptr(lc640_adr,data);
;;;327    
;;;328    	data[0]=0;//*((char*)&Unet_store);
;;;329    	data[1]=0;//*(((char*)&Unet_store)+1);
;;;330    	data[2]=0;
;;;331    	data[3]=0;
;;;332    	lc640_write_long_ptr(lc640_adr+4,data);
;;;333    
;;;334    	data[0]=year__;
00033c  e59f6968          LDR      r6,|L1.3244|
;;;335    	data[1]=month__;
000340  e59f7968          LDR      r7,|L1.3248|
;;;336    	data[2]=day__;
000344  e59f8968          LDR      r8,|L1.3252|
000348  e3500001          CMP      r0,#1                 ;301
00034c  e3a09000          MOV      r9,#0                 ;313
000350  e3a0bb01          MOV      r11,#0x400            ;320
000354  1a00004b          BNE      |L1.1160|
000358  e3a00001          MOV      r0,#1                 ;303
00035c  e5c10000          STRB     r0,[r1,#0]            ;303  ; net_av
000360  e3a00c0e          MOV      r0,#0xe00             ;311
000364  ebfffffe          BL       lc640_read_int
000368  e2804001          ADD      r4,r0,#1              ;312
00036c  e354003f          CMP      r4,#0x3f              ;313
000370  83a04000          MOVHI    r4,#0                 ;313
000374  e1a01804          LSL      r1,r4,#16             ;314
000378  e1a01841          ASR      r1,r1,#16             ;314
00037c  e3a00c0e          MOV      r0,#0xe00             ;314
000380  ebfffffe          BL       lc640_write_int
000384  e59f591c          LDR      r5,|L1.3240|
000388  e1a00005          MOV      r0,r5                 ;316
00038c  ebfffffe          BL       lc640_read_int
000390  e350003f          CMP      r0,#0x3f              ;317
000394  11a00004          MOVNE    r0,r4                 ;317
000398  e1a01800          LSL      r1,r0,#16             ;318
00039c  e1a01841          ASR      r1,r1,#16             ;318
0003a0  e1a00005          MOV      r0,r5                 ;318
0003a4  ebfffffe          BL       lc640_write_int
0003a8  e3a00c0e          MOV      r0,#0xe00             ;320
0003ac  ebfffffe          BL       lc640_read_int
0003b0  e08b5280          ADD      r5,r11,r0,LSL #5      ;320
0003b4  e3a00050          MOV      r0,#0x50              ;322
0003b8  e5cd0000          STRB     r0,[sp,#0]            ;322
0003bc  e3a04041          MOV      r4,#0x41              ;324
0003c0  e5cd9001          STRB     r9,[sp,#1]            ;323
0003c4  e5cd4002          STRB     r4,[sp,#2]            ;324
0003c8  e1a0100d          MOV      r1,sp                 ;326
0003cc  e1a00005          MOV      r0,r5                 ;326
0003d0  e5cd9003          STRB     r9,[sp,#3]            ;325
0003d4  ebfffffe          BL       lc640_write_long_ptr
0003d8  e1a0100d          MOV      r1,sp                 ;332
0003dc  e2850004          ADD      r0,r5,#4              ;332
0003e0  e58d9000          STR      r9,[sp,#0]            ;331
0003e4  ebfffffe          BL       lc640_write_long_ptr
0003e8  e5d60000          LDRB     r0,[r6,#0]            ;334  ; year__
;;;337    	data[3]=0;
;;;338    	lc640_write_long_ptr(lc640_adr+8,data);
0003ec  e1a0100d          MOV      r1,sp
0003f0  e5cd0000          STRB     r0,[sp,#0]            ;334
0003f4  e5d70000          LDRB     r0,[r7,#0]            ;335  ; month__
0003f8  e5cd0001          STRB     r0,[sp,#1]            ;335
0003fc  e5d80000          LDRB     r0,[r8,#0]            ;336  ; day__
000400  e5cd0002          STRB     r0,[sp,#2]            ;336
000404  e2850008          ADD      r0,r5,#8
000408  e5cd9003          STRB     r9,[sp,#3]            ;337
00040c  ebfffffe          BL       lc640_write_long_ptr
;;;339    
;;;340    	data[0]=hour__;
000410  e59f08a0          LDR      r0,|L1.3256|
;;;341    	data[1]=min__;
;;;342    	data[2]=sec__;
;;;343    	data[3]=0;
;;;344    	lc640_write_long_ptr(lc640_adr+12,data);
000414  e1a0100d          MOV      r1,sp
000418  e5d00000          LDRB     r0,[r0,#0]            ;340  ; hour__
00041c  e5cd0000          STRB     r0,[sp,#0]            ;340
000420  e59f0894          LDR      r0,|L1.3260|
000424  e5d00000          LDRB     r0,[r0,#0]            ;341  ; min__
000428  e5cd0001          STRB     r0,[sp,#1]            ;341
00042c  e59f088c          LDR      r0,|L1.3264|
000430  e5d00000          LDRB     r0,[r0,#0]            ;342  ; sec__
000434  e5cd0002          STRB     r0,[sp,#2]            ;342
000438  e285000c          ADD      r0,r5,#0xc
00043c  e5cd9003          STRB     r9,[sp,#3]            ;343
000440  ebfffffe          BL       lc640_write_long_ptr
;;;345    	
;;;346    	data[0]='A';
000444  e5cd4000          STRB     r4,[sp,#0]
;;;347    	data[1]='A';
000448  e5cd4001          STRB     r4,[sp,#1]
;;;348    	data[2]='A';
00044c  e5cd4002          STRB     r4,[sp,#2]
;;;349    	data[3]='A';
;;;350    	lc640_write_long_ptr(lc640_adr+16,data);
000450  e1a0100d          MOV      r1,sp
000454  e2850010          ADD      r0,r5,#0x10
000458  e5cd4003          STRB     r4,[sp,#3]            ;349
00045c  ebfffffe          BL       lc640_write_long_ptr
;;;351    	
;;;352    	data[0]='A';
000460  e5cd4000          STRB     r4,[sp,#0]
;;;353    	data[1]='A';
000464  e5cd4001          STRB     r4,[sp,#1]
;;;354    	data[2]='A';
000468  e5cd4002          STRB     r4,[sp,#2]
;;;355    	data[3]='A';
;;;356    	lc640_write_long_ptr(lc640_adr+20,data);
00046c  e1a0100d          MOV      r1,sp
000470  e2850014          ADD      r0,r5,#0x14
000474  e5cd4003          STRB     r4,[sp,#3]            ;355
000478  ebfffffe          BL       lc640_write_long_ptr
;;;357    	
;;;358    	data[0]='A';
00047c  e5cd4000          STRB     r4,[sp,#0]
;;;359    	data[1]='A';
000480  e5cd4001          STRB     r4,[sp,#1]
;;;360    	data[2]='A';
;;;361    	data[3]='A';
;;;362    	lc640_write_long_ptr(lc640_adr+24,data);
;;;363    	
;;;364    	data[0]='A';
;;;365    	data[1]='A';
;;;366    	data[2]='A';
;;;367    	data[3]='A';
;;;368    	lc640_write_long_ptr(lc640_adr+28,data);				
000484  ea00004a          B        |L1.1460|
                  |L1.1160|
;;;369    	
;;;370    /*	memo_out0[0]=0x55;
;;;371         memo_out0[1]=0x00+2;
;;;372         memo_out0[2]=1;
;;;373         memo_out0[3]=0x0b;
;;;374         memo_out0[4]=0x55;
;;;375         memo_out0[5]=0x55; 
;;;376         	
;;;377         memo_out0[6]=crc_87(memo_out0,6);
;;;378    	memo_out0[7]=crc_95(memo_out0,6);
;;;379         usart_out_adr0(memo_out0,8); 
;;;380    	*/
;;;381    	
;;;382    	}
;;;383    
;;;384    else if(in==0)
000488  e3500000          CMP      r0,#0
00048c  1a000054          BNE      |L1.1508|
;;;385    	{
;;;386    	net_av=0;
;;;387    
;;;388      /*
;;;389    	SET_REG(C2GSR,3,24,8);
;;;390    	C2MOD=0;
;;;391    	bOUT_FREE2=1;*/
;;;392    
;;;393    
;;;394    	//C2MOD=0;
;;;395    
;;;396    	//can2_init(7,8,CANBitrate250k_60MHz);
;;;397    
;;;398         //beep_init(0x02L,'O');
;;;399    	//a_.av.bAN=0;
;;;400    	SET_REG(avar_stat,0,0,1);
000490  e59f07f4          LDR      r0,|L1.3212|
000494  e5c19000          STRB     r9,[r1,#0]            ;386  ; net_av
;;;401    
;;;402    	//if(AV_OFF_AVT)a.av.bAN=0;
;;;403    	
;;;404    	if(AV_OFF_AVT) SET_REG(avar_ind_stat,0,0,1);
000498  e5902000          LDR      r2,[r0,#0]  ; avar_stat
00049c  e59f1800          LDR      r1,|L1.3236|
0004a0  e3c22001          BIC      r2,r2,#1              ;400
0004a4  e5802000          STR      r2,[r0,#0]            ;400  ; avar_stat
0004a8  e1d110b0          LDRH     r1,[r1,#0]  ; AV_OFF_AVT
0004ac  e3510000          CMP      r1,#0
0004b0  15901004          LDRNE    r1,[r0,#4]  ; avar_ind_stat
0004b4  13c11001          BICNE    r1,r1,#1
0004b8  15801004          STRNE    r1,[r0,#4]  ; avar_ind_stat
;;;405    
;;;406         event_ptr=lc640_read_int(PTR_EVENT_LOG);
0004bc  e3a00c0e          MOV      r0,#0xe00
0004c0  ebfffffe          BL       lc640_read_int
0004c4  e1a0a000          MOV      r10,r0
;;;407    	event_ptr_find=event_ptr;
0004c8  e1a04000          MOV      r4,r0
                  |L1.1228|
;;;408    avar_unet_hndl_lbl1:
;;;409    	lc640_adr=EVENT_LOG+(event_ptr_find*32);
0004cc  e08b5284          ADD      r5,r11,r4,LSL #5
;;;410    
;;;411         lc640_read_long_ptr(lc640_adr,data);
0004d0  e1a0100d          MOV      r1,sp
0004d4  e1a00005          MOV      r0,r5
0004d8  ebfffffe          BL       lc640_read_long_ptr
;;;412         
;;;413         if(!((data[0]=='P')&&(data[1]==0)&&(data[2]=='A')))
0004dc  e5dd0000          LDRB     r0,[sp,#0]
0004e0  e3500050          CMP      r0,#0x50
0004e4  05dd0001          LDRBEQ   r0,[sp,#1]
0004e8  03500000          CMPEQ    r0,#0
0004ec  05dd0002          LDRBEQ   r0,[sp,#2]
0004f0  03500041          CMPEQ    r0,#0x41
0004f4  1a00000b          BNE      |L1.1320|
;;;414         	{        
;;;415         	if(event_ptr_find)event_ptr_find--;
;;;416         	else event_ptr_find=63;
;;;417         	if(event_ptr_find==event_ptr)goto avar_unet_hndl_end;
;;;418         	else goto avar_unet_hndl_lbl1;
;;;419         	}
;;;420         else 
;;;421         	{
;;;422         	lc640_read_long_ptr(lc640_adr+16,data);
0004f8  e1a0100d          MOV      r1,sp
0004fc  e2850010          ADD      r0,r5,#0x10
000500  ebfffffe          BL       lc640_read_long_ptr
;;;423         	if(!((data[0]=='A')&&(data[1]=='A')&&(data[2]=='A')&&(data[3]=='A')))
000504  e5dd0000          LDRB     r0,[sp,#0]
000508  e3500041          CMP      r0,#0x41
00050c  05dd0001          LDRBEQ   r0,[sp,#1]
000510  03500041          CMPEQ    r0,#0x41
000514  05dd0002          LDRBEQ   r0,[sp,#2]
000518  03500041          CMPEQ    r0,#0x41
00051c  05dd0003          LDRBEQ   r0,[sp,#3]
000520  03500041          CMPEQ    r0,#0x41
000524  0a000005          BEQ      |L1.1344|
                  |L1.1320|
;;;424         		{        
;;;425         		if(event_ptr_find)event_ptr_find--;
000528  e3540000          CMP      r4,#0
00052c  03a0403f          MOVEQ    r4,#0x3f              ;416
000530  12444001          SUBNE    r4,r4,#1              ;415
;;;426             		else event_ptr_find=63;
;;;427             		if(event_ptr_find==event_ptr)goto avar_unet_hndl_end;
000534  e154000a          CMP      r4,r10
000538  1affffe3          BNE      |L1.1228|
00053c  ea000028          B        |L1.1508|
                  |L1.1344|
;;;428         		else goto avar_unet_hndl_lbl1;
;;;429         		}
;;;430    
;;;431         	}	
;;;432    	
;;;433    	data[0]=year__;
000540  e5d60000          LDRB     r0,[r6,#0]  ; year__
;;;434    	data[1]=month__;
;;;435    	data[2]=day__;
;;;436    	data[3]=0;
;;;437    	lc640_write_long_ptr(lc640_adr+16,data);
000544  e1a0100d          MOV      r1,sp
000548  e5cd0000          STRB     r0,[sp,#0]            ;433
00054c  e5d70000          LDRB     r0,[r7,#0]            ;434  ; month__
000550  e5cd0001          STRB     r0,[sp,#1]            ;434
000554  e5d80000          LDRB     r0,[r8,#0]            ;435  ; day__
000558  e5cd0002          STRB     r0,[sp,#2]            ;435
00055c  e2850010          ADD      r0,r5,#0x10
000560  e5cd9003          STRB     r9,[sp,#3]            ;436
000564  ebfffffe          BL       lc640_write_long_ptr
;;;438    
;;;439    	data[0]=hour__;
000568  e59f0748          LDR      r0,|L1.3256|
;;;440    	data[1]=min__;
;;;441    	data[2]=sec__;
;;;442    	data[3]=0;
;;;443    	lc640_write_long_ptr(lc640_adr+20,data); 
00056c  e1a0100d          MOV      r1,sp
000570  e5d00000          LDRB     r0,[r0,#0]            ;439  ; hour__
000574  e5cd0000          STRB     r0,[sp,#0]            ;439
000578  e59f073c          LDR      r0,|L1.3260|
00057c  e5d00000          LDRB     r0,[r0,#0]            ;440  ; min__
000580  e5cd0001          STRB     r0,[sp,#1]            ;440
000584  e59f0734          LDR      r0,|L1.3264|
000588  e5d00000          LDRB     r0,[r0,#0]            ;441  ; sec__
00058c  e5cd0002          STRB     r0,[sp,#2]            ;441
000590  e2850014          ADD      r0,r5,#0x14
000594  e5cd9003          STRB     r9,[sp,#3]            ;442
000598  ebfffffe          BL       lc640_write_long_ptr
;;;444    	
;;;445    	data[0]=*((char*)(&net_Ustore));
00059c  e59f0720          LDR      r0,|L1.3268|
;;;446    	data[1]=*(((char*)(&net_Ustore))+1);
;;;447    	data[2]='B';
0005a0  e3a04042          MOV      r4,#0x42
0005a4  e5d01000          LDRB     r1,[r0,#0]            ;445  ; net_Ustore
0005a8  e5cd1000          STRB     r1,[sp,#0]            ;445
0005ac  e5d00001          LDRB     r0,[r0,#1]            ;446  ; net_Ustore
0005b0  e5cd0001          STRB     r0,[sp,#1]            ;446
                  |L1.1460|
0005b4  e5cd4002          STRB     r4,[sp,#2]
;;;448    	data[3]='B';
;;;449    	lc640_write_long_ptr(lc640_adr+24,data);
0005b8  e1a0100d          MOV      r1,sp
0005bc  e2850018          ADD      r0,r5,#0x18
0005c0  e5cd4003          STRB     r4,[sp,#3]            ;448
0005c4  ebfffffe          BL       lc640_write_long_ptr
;;;450    	
;;;451    	data[0]='B';
0005c8  e5cd4000          STRB     r4,[sp,#0]
;;;452    	data[1]='B';
0005cc  e5cd4001          STRB     r4,[sp,#1]
;;;453    	data[2]='B';
0005d0  e5cd4002          STRB     r4,[sp,#2]
;;;454    	data[3]='B';
;;;455    	lc640_write_long_ptr(lc640_adr+28,data);	
0005d4  e1a0100d          MOV      r1,sp
0005d8  e285001c          ADD      r0,r5,#0x1c
0005dc  e5cd4003          STRB     r4,[sp,#3]            ;454
0005e0  ebfffffe          BL       lc640_write_long_ptr
                  |L1.1508|
;;;456    	
;;;457    /*	memo_out0[0]=0x55;
;;;458         memo_out0[1]=0x00+2;
;;;459         memo_out0[2]=1;
;;;460         memo_out0[3]=0x0b;
;;;461         memo_out0[4]=0xaa;
;;;462         memo_out0[5]=0xaa; 
;;;463         	
;;;464         memo_out0[6]=crc_87(memo_out0,6);
;;;465    	memo_out0[7]=crc_95(memo_out0,6);
;;;466         usart_out_adr0(memo_out0,8); */
;;;467         	
;;;468    	}
;;;469    avar_unet_hndl_end:
;;;470    	__nop();		
0005e4  e1a00000          MOV      r0,r0
;;;471    }
0005e8  e8bd4ff8          POP      {r3-r11,lr}
0005ec  e12fff1e          BX       lr
;;;472    
                          ENDP

                  avar_bps_hndl PROC
;;;474    //-----------------------------------------------
;;;475    void avar_bps_hndl(char dev, char v, char in)
0005f0  e92d4ff8          PUSH     {r3-r11,lr}
;;;476    {
;;;477    char data[4];
;;;478    unsigned short event_ptr,lc640_adr,event_ptr_find,event_cnt;
;;;479    char avar_simbol;
;;;480    
;;;481    avar_simbol='T';
;;;482    if(v==0)avar_simbol='T';
0005f4  e3510000          CMP      r1,#0
0005f8  e1a06000          MOV      r6,r0                 ;476
0005fc  e3a05054          MOV      r5,#0x54              ;481
000600  0a000007          BEQ      |L1.1572|
;;;483    else if(v==1)avar_simbol='U';
000604  e3510001          CMP      r1,#1
000608  03a05055          MOVEQ    r5,#0x55
00060c  0a000004          BEQ      |L1.1572|
;;;484    else if(v==2)avar_simbol='u';
000610  e3510002          CMP      r1,#2
000614  03a05075          MOVEQ    r5,#0x75
000618  0a000001          BEQ      |L1.1572|
;;;485    else if(v==3)avar_simbol='L';
00061c  e3510003          CMP      r1,#3
000620  03a0504c          MOVEQ    r5,#0x4c
                  |L1.1572|
;;;486    
;;;487    if(in==1)
;;;488    	{
;;;489    	//av_src[bps]=1;
;;;490    
;;;491    //	SET_REG(avar_ind_stat,1,3+dev,1);
;;;492    //	SET_REG(avar_stat,1,3+dev,1);
;;;493    	
;;;494    	if(v==0)bps[dev]._av|=(1<<0);
000624  e59f3668          LDR      r3,|L1.3220|
000628  e0660186          RSB      r0,r6,r6,LSL #3
;;;495    	else if(v==1) bps[dev]._av|=(1<<1);
;;;496    	else if(v==2) bps[dev]._av|=(1<<2);
;;;497    	else if(v==3) bps[dev]._av|=(1<<3);
;;;498    
;;;499    	bps[dev]._last_avar=v;
;;;500    
;;;501    	//beep_init(0x33333333,'A');
;;;502    
;;;503    	event_ptr=lc640_read_int(PTR_EVENT_LOG);
;;;504    	event_ptr++;	
;;;505    	if(event_ptr>63)event_ptr=0;	
;;;506    	lc640_write_int(PTR_EVENT_LOG,event_ptr);	
;;;507    	
;;;508         event_cnt=lc640_read_int(CNT_EVENT_LOG);
;;;509    	if(event_cnt!=63)event_cnt=event_ptr;
;;;510    	lc640_write_int(CNT_EVENT_LOG,event_cnt); 
;;;511    	
;;;512    	lc640_adr=EVENT_LOG+(lc640_read_int(PTR_EVENT_LOG)*32);
;;;513    	
;;;514    	data[0]='S';
;;;515    	data[1]=dev; 
;;;516    	data[2]=avar_simbol;
;;;517    	data[3]=0;
;;;518    	lc640_write_long_ptr(lc640_adr,data);
;;;519    
;;;520    	data[0]=0;
;;;521    	data[1]=0;
;;;522    	data[2]=0;
;;;523    	data[3]=0;
;;;524    	lc640_write_long_ptr(lc640_adr+4,data);
;;;525    
;;;526    	data[0]=year__;
00062c  e59f8678          LDR      r8,|L1.3244|
000630  e0800080          ADD      r0,r0,r0,LSL #1       ;494
000634  e3520001          CMP      r2,#1                 ;487
000638  e3a07000          MOV      r7,#0                 ;476
00063c  e3a09b01          MOV      r9,#0x400             ;512
000640  e0830100          ADD      r0,r3,r0,LSL #2       ;494
000644  1a00006f          BNE      |L1.2056|
000648  e3510000          CMP      r1,#0                 ;494
00064c  05d02001          LDRBEQ   r2,[r0,#1]            ;494
000650  03822001          ORREQ    r2,r2,#1              ;494
000654  0a00000b          BEQ      |L1.1672|
000658  e3510001          CMP      r1,#1                 ;495
00065c  05d02001          LDRBEQ   r2,[r0,#1]            ;495
000660  03822002          ORREQ    r2,r2,#2              ;495
000664  0a000007          BEQ      |L1.1672|
000668  e3510002          CMP      r1,#2                 ;496
00066c  05d02001          LDRBEQ   r2,[r0,#1]            ;496
000670  03822004          ORREQ    r2,r2,#4              ;496
000674  0a000003          BEQ      |L1.1672|
000678  e3510003          CMP      r1,#3                 ;497
00067c  1a000002          BNE      |L1.1676|
000680  e5d02001          LDRB     r2,[r0,#1]            ;497
000684  e3822008          ORR      r2,r2,#8              ;497
                  |L1.1672|
000688  e5c02001          STRB     r2,[r0,#1]            ;497
                  |L1.1676|
00068c  e5c01053          STRB     r1,[r0,#0x53]         ;499
000690  e3a00c0e          MOV      r0,#0xe00             ;503
000694  ebfffffe          BL       lc640_read_int
000698  e1a00800          LSL      r0,r0,#16             ;503
00069c  e1a00820          LSR      r0,r0,#16             ;503
0006a0  e2800001          ADD      r0,r0,#1              ;504
0006a4  e3c04801          BIC      r4,r0,#0x10000        ;504
0006a8  e354003f          CMP      r4,#0x3f              ;505
0006ac  83a04000          MOVHI    r4,#0                 ;505
0006b0  e1a01804          LSL      r1,r4,#16             ;506
0006b4  e1a01841          ASR      r1,r1,#16             ;506
0006b8  e3a00c0e          MOV      r0,#0xe00             ;506
0006bc  ebfffffe          BL       lc640_write_int
0006c0  e59fa5e0          LDR      r10,|L1.3240|
0006c4  e1a0000a          MOV      r0,r10                ;508
0006c8  ebfffffe          BL       lc640_read_int
0006cc  e1a00800          LSL      r0,r0,#16             ;508
0006d0  e1a00820          LSR      r0,r0,#16             ;508
0006d4  e350003f          CMP      r0,#0x3f              ;509
0006d8  11a00004          MOVNE    r0,r4                 ;509
0006dc  e1a01800          LSL      r1,r0,#16             ;510
0006e0  e1a01841          ASR      r1,r1,#16             ;510
0006e4  e1a0000a          MOV      r0,r10                ;510
0006e8  ebfffffe          BL       lc640_write_int
0006ec  e3a00c0e          MOV      r0,#0xe00             ;512
0006f0  ebfffffe          BL       lc640_read_int
0006f4  e0890280          ADD      r0,r9,r0,LSL #5       ;512
0006f8  e1a04800          LSL      r4,r0,#16             ;512
0006fc  e3a00053          MOV      r0,#0x53              ;514
000700  e5cd0000          STRB     r0,[sp,#0]            ;514
000704  e5cd6001          STRB     r6,[sp,#1]            ;515
000708  e1a04824          LSR      r4,r4,#16             ;512
00070c  e5cd5002          STRB     r5,[sp,#2]            ;516
000710  e1a0100d          MOV      r1,sp                 ;518
000714  e1a00004          MOV      r0,r4                 ;518
000718  e5cd7003          STRB     r7,[sp,#3]            ;517
00071c  ebfffffe          BL       lc640_write_long_ptr
000720  e1a0100d          MOV      r1,sp                 ;524
000724  e2840004          ADD      r0,r4,#4              ;524
000728  e58d7000          STR      r7,[sp,#0]            ;523
00072c  ebfffffe          BL       lc640_write_long_ptr
000730  e5d80000          LDRB     r0,[r8,#0]  ; year__
;;;527    	data[1]=month__;
;;;528    	data[2]=day__;
;;;529    	data[3]=0;
;;;530    	lc640_write_long_ptr(lc640_adr+8,data);
000734  e1a0100d          MOV      r1,sp
000738  e5cd0000          STRB     r0,[sp,#0]            ;526
00073c  e59f056c          LDR      r0,|L1.3248|
000740  e5d00000          LDRB     r0,[r0,#0]            ;527  ; month__
000744  e5cd0001          STRB     r0,[sp,#1]            ;527
000748  e59f0564          LDR      r0,|L1.3252|
00074c  e5d00000          LDRB     r0,[r0,#0]            ;528  ; day__
000750  e5cd0002          STRB     r0,[sp,#2]            ;528
000754  e2840008          ADD      r0,r4,#8
000758  e5cd7003          STRB     r7,[sp,#3]            ;529
00075c  ebfffffe          BL       lc640_write_long_ptr
;;;531    
;;;532    	data[0]=hour__;
000760  e59f0550          LDR      r0,|L1.3256|
;;;533    	data[1]=min__;
;;;534    	data[2]=sec__;
;;;535    	data[3]=0;
;;;536    	lc640_write_long_ptr(lc640_adr+12,data);
000764  e1a0100d          MOV      r1,sp
000768  e5d00000          LDRB     r0,[r0,#0]            ;532  ; hour__
00076c  e5cd0000          STRB     r0,[sp,#0]            ;532
000770  e59f0544          LDR      r0,|L1.3260|
000774  e5d00000          LDRB     r0,[r0,#0]            ;533  ; min__
000778  e5cd0001          STRB     r0,[sp,#1]            ;533
00077c  e59f053c          LDR      r0,|L1.3264|
000780  e5d00000          LDRB     r0,[r0,#0]            ;534  ; sec__
000784  e5cd0002          STRB     r0,[sp,#2]            ;534
000788  e284000c          ADD      r0,r4,#0xc
00078c  e5cd7003          STRB     r7,[sp,#3]            ;535
000790  ebfffffe          BL       lc640_write_long_ptr
;;;537    	
;;;538    	data[0]='A';
000794  e3a05041          MOV      r5,#0x41
000798  e5cd5000          STRB     r5,[sp,#0]
;;;539    	data[1]='A';
00079c  e5cd5001          STRB     r5,[sp,#1]
;;;540    	data[2]='A';
0007a0  e5cd5002          STRB     r5,[sp,#2]
;;;541    	data[3]='A';
;;;542    	lc640_write_long_ptr(lc640_adr+16,data);
0007a4  e1a0100d          MOV      r1,sp
0007a8  e2840010          ADD      r0,r4,#0x10
0007ac  e5cd5003          STRB     r5,[sp,#3]            ;541
0007b0  ebfffffe          BL       lc640_write_long_ptr
;;;543    	
;;;544    	data[0]='A';
0007b4  e5cd5000          STRB     r5,[sp,#0]
;;;545    	data[1]='A';
0007b8  e5cd5001          STRB     r5,[sp,#1]
;;;546    	data[2]='A';
0007bc  e5cd5002          STRB     r5,[sp,#2]
;;;547    	data[3]='A';
;;;548    	lc640_write_long_ptr(lc640_adr+20,data);
0007c0  e1a0100d          MOV      r1,sp
0007c4  e2840014          ADD      r0,r4,#0x14
0007c8  e5cd5003          STRB     r5,[sp,#3]            ;547
0007cc  ebfffffe          BL       lc640_write_long_ptr
;;;549    	
;;;550    	data[0]='A';
0007d0  e5cd5000          STRB     r5,[sp,#0]
;;;551    	data[1]='A';
0007d4  e5cd5001          STRB     r5,[sp,#1]
;;;552    	data[2]='A';
0007d8  e5cd5002          STRB     r5,[sp,#2]
;;;553    	data[3]='A';
;;;554    	lc640_write_long_ptr(lc640_adr+24,data);
0007dc  e1a0100d          MOV      r1,sp
0007e0  e2840018          ADD      r0,r4,#0x18
0007e4  e5cd5003          STRB     r5,[sp,#3]            ;553
0007e8  ebfffffe          BL       lc640_write_long_ptr
;;;555    	
;;;556    	data[0]='A';
0007ec  e5cd5000          STRB     r5,[sp,#0]
;;;557    	data[1]='A';
0007f0  e5cd5001          STRB     r5,[sp,#1]
;;;558    	data[2]='A';
0007f4  e5cd5002          STRB     r5,[sp,#2]
;;;559    	data[3]='A';
;;;560    	lc640_write_long_ptr(lc640_adr+28,data);		
0007f8  e1a0100d          MOV      r1,sp
0007fc  e284001c          ADD      r0,r4,#0x1c
000800  e5cd5003          STRB     r5,[sp,#3]            ;559
000804  ea00005e          B        |L1.2436|
                  |L1.2056|
;;;561     	
;;;562    	}
;;;563    
;;;564    else if(in==0)
000808  e3520000          CMP      r2,#0
00080c  1a00005d          BNE      |L1.2440|
;;;565    	{      
;;;566    //	av_bps[bps]=0;
;;;567    
;;;568    	//SET_REG(avar_stat,0,3+bps,1);
;;;569    	//if(AV_OFF_AVT) SET_REG(avar_ind_stat,0,3+bps,1);
;;;570    
;;;571         if(v==0) bps[dev]._av&=(~(1<<0));
000810  e3510000          CMP      r1,#0
000814  05d01001          LDRBEQ   r1,[r0,#1]
000818  03c11001          BICEQ    r1,r1,#1
00081c  0a00000b          BEQ      |L1.2128|
;;;572         else if(v==1) bps[dev]._av&=(~(1<<1));
000820  e3510001          CMP      r1,#1
000824  05d01001          LDRBEQ   r1,[r0,#1]
000828  03c11002          BICEQ    r1,r1,#2
00082c  0a000007          BEQ      |L1.2128|
;;;573    	else if(v==2) bps[dev]._av&=(~(1<<2));
000830  e3510002          CMP      r1,#2
000834  05d01001          LDRBEQ   r1,[r0,#1]
000838  03c11004          BICEQ    r1,r1,#4
00083c  0a000003          BEQ      |L1.2128|
;;;574    	else if(v==3) bps[dev]._av&=(~(1<<3));
000840  e3510003          CMP      r1,#3
000844  1a000002          BNE      |L1.2132|
000848  e5d01001          LDRB     r1,[r0,#1]
00084c  e3c11008          BIC      r1,r1,#8
                  |L1.2128|
000850  e5c01001          STRB     r1,[r0,#1]
                  |L1.2132|
;;;575         
;;;576    //	if((bps[dev]._av&0x0f==0))
;;;577    //	     {
;;;578    		//SET_REG(avar_stat,0,3+bps,1);
;;;579    		//if(AV_OFF_AVT) SET_REG(avar_ind_stat,0,3+bps,1);
;;;580    //	     }
;;;581     
;;;582    	event_ptr=lc640_read_int(PTR_EVENT_LOG);
000854  e3a00c0e          MOV      r0,#0xe00
000858  ebfffffe          BL       lc640_read_int
00085c  e1a0b800          LSL      r11,r0,#16
000860  e1a0b82b          LSR      r11,r11,#16
;;;583    	event_ptr_find=event_ptr;
000864  e1a0400b          MOV      r4,r11
                  |L1.2152|
;;;584    	
;;;585    avar_src_hndl_lbl1: 
;;;586    
;;;587    	lc640_adr=EVENT_LOG+(event_ptr_find*32);
000868  e0890284          ADD      r0,r9,r4,LSL #5
00086c  e3c0a83f          BIC      r10,r0,#0x3f0000
;;;588    
;;;589         lc640_read_long_ptr(lc640_adr,data);
000870  e1a0100d          MOV      r1,sp
000874  e1a0000a          MOV      r0,r10
000878  ebfffffe          BL       lc640_read_long_ptr
;;;590         
;;;591         if(!((data[0]=='S')&&(data[1]==dev)&&(data[2]==avar_simbol)))
00087c  e5dd0000          LDRB     r0,[sp,#0]
000880  e3500053          CMP      r0,#0x53
000884  05dd0001          LDRBEQ   r0,[sp,#1]
000888  01500006          CMPEQ    r0,r6
00088c  05dd0002          LDRBEQ   r0,[sp,#2]
000890  01500005          CMPEQ    r0,r5
000894  1a00000b          BNE      |L1.2248|
;;;592         	{        
;;;593         	if(event_ptr_find)event_ptr_find--;
;;;594         	else event_ptr_find=63;
;;;595         	if(event_ptr_find==event_ptr)goto avar_src_hndl_end;
;;;596         	else goto avar_src_hndl_lbl1;
;;;597         	}
;;;598         else 
;;;599         	{
;;;600         	lc640_read_long_ptr(lc640_adr+16,data);
000898  e1a0100d          MOV      r1,sp
00089c  e28a0010          ADD      r0,r10,#0x10
0008a0  ebfffffe          BL       lc640_read_long_ptr
;;;601         	if(!((data[0]=='A')&&(data[1]=='A')&&(data[2]=='A')&&(data[3]=='A')))
0008a4  e5dd0000          LDRB     r0,[sp,#0]
0008a8  e3500041          CMP      r0,#0x41
0008ac  05dd0001          LDRBEQ   r0,[sp,#1]
0008b0  03500041          CMPEQ    r0,#0x41
0008b4  05dd0002          LDRBEQ   r0,[sp,#2]
0008b8  03500041          CMPEQ    r0,#0x41
0008bc  05dd0003          LDRBEQ   r0,[sp,#3]
0008c0  03500041          CMPEQ    r0,#0x41
0008c4  0a000007          BEQ      |L1.2280|
                  |L1.2248|
;;;602         		{        
;;;603         		if(event_ptr_find)event_ptr_find--;
0008c8  e3540000          CMP      r4,#0
0008cc  12440001          SUBNE    r0,r4,#1              ;593
0008d0  11a04800          LSLNE    r4,r0,#16             ;593
0008d4  03a0403f          MOVEQ    r4,#0x3f              ;594
0008d8  11a04824          LSRNE    r4,r4,#16             ;593
;;;604             		else event_ptr_find=63;
;;;605             		if(event_ptr_find==event_ptr)goto avar_src_hndl_end;
0008dc  e154000b          CMP      r4,r11
0008e0  1affffe0          BNE      |L1.2152|
0008e4  ea000027          B        |L1.2440|
                  |L1.2280|
;;;606         		else goto avar_src_hndl_lbl1;
;;;607         		}
;;;608    
;;;609         	}	
;;;610    
;;;611    
;;;612    	
;;;613    	data[0]=year__;
0008e8  e5d80000          LDRB     r0,[r8,#0]  ; year__
;;;614    	data[1]=month__;
;;;615    	data[2]=day__;
;;;616    	data[3]=0;
;;;617    	lc640_write_long_ptr(lc640_adr+16,data);
0008ec  e1a0100d          MOV      r1,sp
0008f0  e5cd0000          STRB     r0,[sp,#0]            ;613
0008f4  e59f03b4          LDR      r0,|L1.3248|
0008f8  e5d00000          LDRB     r0,[r0,#0]            ;614  ; month__
0008fc  e5cd0001          STRB     r0,[sp,#1]            ;614
000900  e59f03ac          LDR      r0,|L1.3252|
000904  e5d00000          LDRB     r0,[r0,#0]            ;615  ; day__
000908  e5cd0002          STRB     r0,[sp,#2]            ;615
00090c  e28a0010          ADD      r0,r10,#0x10
000910  e5cd7003          STRB     r7,[sp,#3]            ;616
000914  ebfffffe          BL       lc640_write_long_ptr
;;;618    
;;;619    	data[0]=hour__;
000918  e59f0398          LDR      r0,|L1.3256|
;;;620    	data[1]=min__;
;;;621    	data[2]=sec__;
;;;622    	data[3]=0;
;;;623    	lc640_write_long_ptr(lc640_adr+20,data);
00091c  e1a0100d          MOV      r1,sp
000920  e5d00000          LDRB     r0,[r0,#0]            ;619  ; hour__
000924  e5cd0000          STRB     r0,[sp,#0]            ;619
000928  e59f038c          LDR      r0,|L1.3260|
00092c  e5d00000          LDRB     r0,[r0,#0]            ;620  ; min__
000930  e5cd0001          STRB     r0,[sp,#1]            ;620
000934  e59f0384          LDR      r0,|L1.3264|
000938  e5d00000          LDRB     r0,[r0,#0]            ;621  ; sec__
00093c  e5cd0002          STRB     r0,[sp,#2]            ;621
000940  e28a0014          ADD      r0,r10,#0x14
000944  e5cd7003          STRB     r7,[sp,#3]            ;622
000948  ebfffffe          BL       lc640_write_long_ptr
;;;624    	
;;;625    	data[0]='B';
00094c  e3a04042          MOV      r4,#0x42
000950  e5cd4000          STRB     r4,[sp,#0]
;;;626    	data[1]='B';
000954  e5cd4001          STRB     r4,[sp,#1]
;;;627    	data[2]='B';
000958  e5cd4002          STRB     r4,[sp,#2]
;;;628    	data[3]='B';
;;;629    	lc640_write_long_ptr(lc640_adr+24,data);
00095c  e1a0100d          MOV      r1,sp
000960  e28a0018          ADD      r0,r10,#0x18
000964  e5cd4003          STRB     r4,[sp,#3]            ;628
000968  ebfffffe          BL       lc640_write_long_ptr
;;;630    	
;;;631    	data[0]='B';
00096c  e5cd4000          STRB     r4,[sp,#0]
;;;632    	data[1]='B';
000970  e5cd4001          STRB     r4,[sp,#1]
;;;633    	data[2]='B';
000974  e5cd4002          STRB     r4,[sp,#2]
;;;634    	data[3]='B';
;;;635    	lc640_write_long_ptr(lc640_adr+28,data);
000978  e1a0100d          MOV      r1,sp
00097c  e28a001c          ADD      r0,r10,#0x1c
000980  e5cd4003          STRB     r4,[sp,#3]            ;634
                  |L1.2436|
000984  ebfffffe          BL       lc640_write_long_ptr
                  |L1.2440|
;;;636    	
;;;637    	}
;;;638    	
;;;639    avar_src_hndl_end:
;;;640    __nop();		
000988  e1a00000          MOV      r0,r0
;;;641    }
00098c  e8bd4ff8          POP      {r3-r11,lr}
000990  e12fff1e          BX       lr
;;;642    
                          ENDP

                  avar_bat_hndl PROC
;;;705    //-----------------------------------------------
;;;706    void avar_bat_hndl(char b, char in)
000994  e92d4ff8          PUSH     {r3-r11,lr}
;;;707    {
;;;708    //unsigned char temp,temp_;
;;;709    //unsigned int tempUI;
;;;710    //unsigned long tempUL;
;;;711    char data[4];
;;;712    unsigned short event_ptr,lc640_adr,event_ptr_find,event_cnt;
;;;713    
;;;714    if(in==1)
;;;715    	{
;;;716    /*	if(!bat)
;;;717    		{
;;;718    		a.av.bAB1=1;
;;;719    		a_.av.bAB1=1;
;;;720    		}
;;;721    	else if(bat==1)
;;;722    		{
;;;723    		a.av.bAB2=1;
;;;724    		a_.av.bAB2=1;
;;;725    		}	
;;;726    	
;;;727    	beep_init(0x33333333,'A');*/
;;;728    
;;;729    	bat[b]._av=1;
000998  e59f22f0          LDR      r2,|L1.3216|
00099c  e1a07000          MOV      r7,r0                 ;707
;;;730        
;;;731    	event_ptr=lc640_read_int(PTR_EVENT_LOG);
;;;732    	event_ptr++;	
;;;733    	if(event_ptr>63)event_ptr=0;	
;;;734    	lc640_write_int(PTR_EVENT_LOG,event_ptr);	
;;;735    	
;;;736         event_cnt=lc640_read_int(CNT_EVENT_LOG);
;;;737    	if(event_cnt!=63)event_cnt=event_ptr;
;;;738    	lc640_write_int(CNT_EVENT_LOG,event_cnt); 
;;;739    	
;;;740    	lc640_adr=EVENT_LOG+(lc640_read_int(PTR_EVENT_LOG)*32);
;;;741    	
;;;742    	data[0]='B';
;;;743    	data[1]=b;
;;;744    	data[2]='C';
;;;745    	data[3]=0;
;;;746    	lc640_write_long_ptr(lc640_adr,data);
;;;747    
;;;748    	data[0]=0;
;;;749    	data[1]=0;
;;;750    	data[2]=0;
;;;751    	data[3]=0;
;;;752    	lc640_write_long_ptr(lc640_adr+4,data);
;;;753    
;;;754    	data[0]=year__;
0009a0  e59f9304          LDR      r9,|L1.3244|
0009a4  e0600200          RSB      r0,r0,r0,LSL #4       ;729
0009a8  e3510001          CMP      r1,#1                 ;714
0009ac  e0820100          ADD      r0,r2,r0,LSL #2       ;729
0009b0  e3a08042          MOV      r8,#0x42              ;742
0009b4  e3a0a000          MOV      r10,#0                ;733
0009b8  e3a0bb01          MOV      r11,#0x400            ;740
0009bc  1a00005f          BNE      |L1.2880|
0009c0  e3a01001          MOV      r1,#1                 ;729
0009c4  e5c01035          STRB     r1,[r0,#0x35]         ;729
0009c8  e3a00c0e          MOV      r0,#0xe00             ;731
0009cc  ebfffffe          BL       lc640_read_int
0009d0  e1a00800          LSL      r0,r0,#16             ;731
0009d4  e1a00820          LSR      r0,r0,#16             ;731
0009d8  e2800001          ADD      r0,r0,#1              ;732
0009dc  e3c04801          BIC      r4,r0,#0x10000        ;732
0009e0  e354003f          CMP      r4,#0x3f              ;733
0009e4  83a04000          MOVHI    r4,#0                 ;733
0009e8  e1a01804          LSL      r1,r4,#16             ;734
0009ec  e1a01841          ASR      r1,r1,#16             ;734
0009f0  e3a00c0e          MOV      r0,#0xe00             ;734
0009f4  ebfffffe          BL       lc640_write_int
0009f8  e59f52a8          LDR      r5,|L1.3240|
0009fc  e1a00005          MOV      r0,r5                 ;736
000a00  ebfffffe          BL       lc640_read_int
000a04  e1a00800          LSL      r0,r0,#16             ;736
000a08  e1a00820          LSR      r0,r0,#16             ;736
000a0c  e350003f          CMP      r0,#0x3f              ;737
000a10  11a00004          MOVNE    r0,r4                 ;737
000a14  e1a01800          LSL      r1,r0,#16             ;738
000a18  e1a01841          ASR      r1,r1,#16             ;738
000a1c  e1a00005          MOV      r0,r5                 ;738
000a20  ebfffffe          BL       lc640_write_int
000a24  e3a00c0e          MOV      r0,#0xe00             ;740
000a28  ebfffffe          BL       lc640_read_int
000a2c  e08b0280          ADD      r0,r11,r0,LSL #5      ;740
000a30  e1a04800          LSL      r4,r0,#16             ;740
000a34  e5cd8000          STRB     r8,[sp,#0]            ;742
000a38  e3a00043          MOV      r0,#0x43              ;744
000a3c  e5cd7001          STRB     r7,[sp,#1]            ;743
000a40  e5cd0002          STRB     r0,[sp,#2]            ;744
000a44  e1a04824          LSR      r4,r4,#16             ;740
000a48  e1a0100d          MOV      r1,sp                 ;746
000a4c  e1a00004          MOV      r0,r4                 ;746
000a50  e5cda003          STRB     r10,[sp,#3]           ;745
000a54  ebfffffe          BL       lc640_write_long_ptr
000a58  e1a0100d          MOV      r1,sp                 ;752
000a5c  e2840004          ADD      r0,r4,#4              ;752
000a60  e58da000          STR      r10,[sp,#0]           ;751
000a64  ebfffffe          BL       lc640_write_long_ptr
000a68  e5d90000          LDRB     r0,[r9,#0]  ; year__
;;;755    	data[1]=month__;
;;;756    	data[2]=day__;
;;;757    	data[3]=0;
;;;758    	lc640_write_long_ptr(lc640_adr+8,data);
000a6c  e1a0100d          MOV      r1,sp
000a70  e5cd0000          STRB     r0,[sp,#0]            ;754
000a74  e59f0234          LDR      r0,|L1.3248|
000a78  e5d00000          LDRB     r0,[r0,#0]            ;755  ; month__
000a7c  e5cd0001          STRB     r0,[sp,#1]            ;755
000a80  e59f022c          LDR      r0,|L1.3252|
000a84  e5d00000          LDRB     r0,[r0,#0]            ;756  ; day__
000a88  e5cd0002          STRB     r0,[sp,#2]            ;756
000a8c  e2840008          ADD      r0,r4,#8
000a90  e5cda003          STRB     r10,[sp,#3]           ;757
000a94  ebfffffe          BL       lc640_write_long_ptr
;;;759    
;;;760    	data[0]=hour__;
000a98  e59f0218          LDR      r0,|L1.3256|
;;;761    	data[1]=min__;
;;;762    	data[2]=sec__;
;;;763    	data[3]=0;
;;;764    	lc640_write_long_ptr(lc640_adr+12,data);
000a9c  e1a0100d          MOV      r1,sp
000aa0  e5d00000          LDRB     r0,[r0,#0]            ;760  ; hour__
000aa4  e5cd0000          STRB     r0,[sp,#0]            ;760
000aa8  e59f020c          LDR      r0,|L1.3260|
000aac  e5d00000          LDRB     r0,[r0,#0]            ;761  ; min__
000ab0  e5cd0001          STRB     r0,[sp,#1]            ;761
000ab4  e59f0204          LDR      r0,|L1.3264|
000ab8  e5d00000          LDRB     r0,[r0,#0]            ;762  ; sec__
000abc  e5cd0002          STRB     r0,[sp,#2]            ;762
000ac0  e284000c          ADD      r0,r4,#0xc
000ac4  e5cda003          STRB     r10,[sp,#3]           ;763
000ac8  ebfffffe          BL       lc640_write_long_ptr
;;;765    	
;;;766    	data[0]='A';
000acc  e3a05041          MOV      r5,#0x41
000ad0  e5cd5000          STRB     r5,[sp,#0]
;;;767    	data[1]='A';
000ad4  e5cd5001          STRB     r5,[sp,#1]
;;;768    	data[2]='A';
000ad8  e5cd5002          STRB     r5,[sp,#2]
;;;769    	data[3]='A';
;;;770    	lc640_write_long_ptr(lc640_adr+16,data);
000adc  e1a0100d          MOV      r1,sp
000ae0  e2840010          ADD      r0,r4,#0x10
000ae4  e5cd5003          STRB     r5,[sp,#3]            ;769
000ae8  ebfffffe          BL       lc640_write_long_ptr
;;;771    	
;;;772    	data[0]='A';
000aec  e5cd5000          STRB     r5,[sp,#0]
;;;773    	data[1]='A';
000af0  e5cd5001          STRB     r5,[sp,#1]
;;;774    	data[2]='A';
000af4  e5cd5002          STRB     r5,[sp,#2]
;;;775    	data[3]='A';
;;;776    	lc640_write_long_ptr(lc640_adr+20,data);
000af8  e1a0100d          MOV      r1,sp
000afc  e2840014          ADD      r0,r4,#0x14
000b00  e5cd5003          STRB     r5,[sp,#3]            ;775
000b04  ebfffffe          BL       lc640_write_long_ptr
;;;777    	
;;;778    	data[0]='A';
000b08  e5cd5000          STRB     r5,[sp,#0]
;;;779    	data[1]='A';
000b0c  e5cd5001          STRB     r5,[sp,#1]
;;;780    	data[2]='A';
000b10  e5cd5002          STRB     r5,[sp,#2]
;;;781    	data[3]='A';
;;;782    	lc640_write_long_ptr(lc640_adr+24,data);
000b14  e1a0100d          MOV      r1,sp
000b18  e2840018          ADD      r0,r4,#0x18
000b1c  e5cd5003          STRB     r5,[sp,#3]            ;781
000b20  ebfffffe          BL       lc640_write_long_ptr
;;;783    	
;;;784    	data[0]='A';
000b24  e5cd5000          STRB     r5,[sp,#0]
;;;785    	data[1]='A';
000b28  e5cd5001          STRB     r5,[sp,#1]
;;;786    	data[2]='A';
000b2c  e5cd5002          STRB     r5,[sp,#2]
;;;787    	data[3]='A';
;;;788    	lc640_write_long_ptr(lc640_adr+28,data);				
000b30  e1a0100d          MOV      r1,sp
000b34  e284001c          ADD      r0,r4,#0x1c
000b38  e5cd5003          STRB     r5,[sp,#3]            ;787
000b3c  ea00004d          B        |L1.3192|
                  |L1.2880|
;;;789    	
;;;790    	}
;;;791    
;;;792    else if(in==0)
000b40  e3510000          CMP      r1,#0
000b44  1a00004c          BNE      |L1.3196|
;;;793    	{
;;;794    /*	if(!bat)
;;;795    		{
;;;796    		a.av.bAB1=0;
;;;797    		if(K[MNL]!=ON)a_.av.bAB1=0;
;;;798    		}
;;;799    	else if(bat==1)
;;;800    		{
;;;801    		a.av.bAB2=0;
;;;802    		if(K[MNL]!=ON)a_.av.bAB2=0;
;;;803    		}*/
;;;804    				
;;;805    	bat[b]._av=0;
000b48  e5c0a035          STRB     r10,[r0,#0x35]
;;;806    
;;;807         event_ptr=lc640_read_int(PTR_EVENT_LOG);
000b4c  e3a00c0e          MOV      r0,#0xe00
000b50  ebfffffe          BL       lc640_read_int
000b54  e1a06800          LSL      r6,r0,#16
000b58  e1a06826          LSR      r6,r6,#16
;;;808    	event_ptr_find=event_ptr;
000b5c  e1a04006          MOV      r4,r6
                  |L1.2912|
;;;809    	
;;;810    avar_bat_hndl_lbl1: 
;;;811    
;;;812    	lc640_adr=EVENT_LOG+(event_ptr_find*32);
000b60  e08b0284          ADD      r0,r11,r4,LSL #5
000b64  e3c0583f          BIC      r5,r0,#0x3f0000
;;;813    
;;;814         lc640_read_long_ptr(lc640_adr,data);
000b68  e1a0100d          MOV      r1,sp
000b6c  e1a00005          MOV      r0,r5
000b70  ebfffffe          BL       lc640_read_long_ptr
;;;815         
;;;816         if(!((data[0]=='B')&&(data[1]==b)&&(data[2]=='C')))
000b74  e5dd0000          LDRB     r0,[sp,#0]
000b78  e3500042          CMP      r0,#0x42
000b7c  05dd0001          LDRBEQ   r0,[sp,#1]
000b80  01500007          CMPEQ    r0,r7
000b84  05dd0002          LDRBEQ   r0,[sp,#2]
000b88  03500043          CMPEQ    r0,#0x43
000b8c  1a00000b          BNE      |L1.3008|
;;;817         	{        
;;;818         	if(event_ptr_find)event_ptr_find--;
;;;819         	else event_ptr_find=63;
;;;820         	if(event_ptr_find==event_ptr)goto avar_bat_hndl_end;
;;;821         	else goto avar_bat_hndl_lbl1;
;;;822         	}
;;;823         else 
;;;824         	{
;;;825         	lc640_read_long_ptr(lc640_adr+16,data);
000b90  e1a0100d          MOV      r1,sp
000b94  e2850010          ADD      r0,r5,#0x10
000b98  ebfffffe          BL       lc640_read_long_ptr
;;;826         	if(!((data[0]=='A')&&(data[1]=='A')&&(data[2]=='A')&&(data[3]=='A')))
000b9c  e5dd0000          LDRB     r0,[sp,#0]
000ba0  e3500041          CMP      r0,#0x41
000ba4  05dd0001          LDRBEQ   r0,[sp,#1]
000ba8  03500041          CMPEQ    r0,#0x41
000bac  05dd0002          LDRBEQ   r0,[sp,#2]
000bb0  03500041          CMPEQ    r0,#0x41
000bb4  05dd0003          LDRBEQ   r0,[sp,#3]
000bb8  03500041          CMPEQ    r0,#0x41
000bbc  0a000007          BEQ      |L1.3040|
                  |L1.3008|
;;;827         		{        
;;;828         		if(event_ptr_find)event_ptr_find--;
000bc0  e3540000          CMP      r4,#0
000bc4  12440001          SUBNE    r0,r4,#1              ;818
000bc8  11a04800          LSLNE    r4,r0,#16             ;818
000bcc  03a0403f          MOVEQ    r4,#0x3f              ;819
000bd0  11a04824          LSRNE    r4,r4,#16             ;818
;;;829             		else event_ptr_find=63;
;;;830             	    	if(event_ptr_find==event_ptr)goto avar_bat_hndl_end;
000bd4  e1540006          CMP      r4,r6
000bd8  1affffe0          BNE      |L1.2912|
000bdc  ea000026          B        |L1.3196|
                  |L1.3040|
;;;831         		else goto avar_bat_hndl_lbl1;
;;;832         		}
;;;833    
;;;834         	}
;;;835         		
;;;836    	data[0]=year__;
000be0  e5d90000          LDRB     r0,[r9,#0]  ; year__
;;;837    	data[1]=month__;
;;;838    	data[2]=day__;
;;;839    	data[3]=0;
;;;840    	lc640_write_long_ptr(lc640_adr+16,data);
000be4  e1a0100d          MOV      r1,sp
000be8  e5cd0000          STRB     r0,[sp,#0]            ;836
000bec  e59f00bc          LDR      r0,|L1.3248|
000bf0  e5d00000          LDRB     r0,[r0,#0]            ;837  ; month__
000bf4  e5cd0001          STRB     r0,[sp,#1]            ;837
000bf8  e59f00b4          LDR      r0,|L1.3252|
000bfc  e5d00000          LDRB     r0,[r0,#0]            ;838  ; day__
000c00  e5cd0002          STRB     r0,[sp,#2]            ;838
000c04  e2850010          ADD      r0,r5,#0x10
000c08  e5cda003          STRB     r10,[sp,#3]           ;839
000c0c  ebfffffe          BL       lc640_write_long_ptr
;;;841    
;;;842    	data[0]=hour__;
000c10  e59f00a0          LDR      r0,|L1.3256|
;;;843    	data[1]=min__;
;;;844    	data[2]=sec__;
;;;845    	data[3]=0;
;;;846    	lc640_write_long_ptr(lc640_adr+20,data);
000c14  e1a0100d          MOV      r1,sp
000c18  e5d00000          LDRB     r0,[r0,#0]            ;842  ; hour__
000c1c  e5cd0000          STRB     r0,[sp,#0]            ;842
000c20  e59f0094          LDR      r0,|L1.3260|
000c24  e5d00000          LDRB     r0,[r0,#0]            ;843  ; min__
000c28  e5cd0001          STRB     r0,[sp,#1]            ;843
000c2c  e59f008c          LDR      r0,|L1.3264|
000c30  e5d00000          LDRB     r0,[r0,#0]            ;844  ; sec__
000c34  e5cd0002          STRB     r0,[sp,#2]            ;844
000c38  e2850014          ADD      r0,r5,#0x14
000c3c  e5cda003          STRB     r10,[sp,#3]           ;845
000c40  ebfffffe          BL       lc640_write_long_ptr
;;;847    	
;;;848    	data[0]='B';
000c44  e5cd8000          STRB     r8,[sp,#0]
;;;849    	data[1]='B';
000c48  e5cd8001          STRB     r8,[sp,#1]
;;;850    	data[2]='B';
000c4c  e5cd8002          STRB     r8,[sp,#2]
;;;851    	data[3]='B';
;;;852    	lc640_write_long_ptr(lc640_adr+24,data);
000c50  e1a0100d          MOV      r1,sp
000c54  e2850018          ADD      r0,r5,#0x18
000c58  e5cd8003          STRB     r8,[sp,#3]            ;851
000c5c  ebfffffe          BL       lc640_write_long_ptr
;;;853    	
;;;854    	data[0]='B';
000c60  e5cd8000          STRB     r8,[sp,#0]
;;;855    	data[1]='B';
000c64  e5cd8001          STRB     r8,[sp,#1]
;;;856    	data[2]='B';
000c68  e5cd8002          STRB     r8,[sp,#2]
;;;857    	data[3]='B';
;;;858    	lc640_write_long_ptr(lc640_adr+28,data);
000c6c  e1a0100d          MOV      r1,sp
000c70  e285001c          ADD      r0,r5,#0x1c
000c74  e5cd8003          STRB     r8,[sp,#3]            ;857
                  |L1.3192|
000c78  ebfffffe          BL       lc640_write_long_ptr
                  |L1.3196|
;;;859    	
;;;860    
;;;861    	
;;;862    	}
;;;863    	
;;;864    avar_bat_hndl_end:
;;;865    __nop();		
000c7c  e1a00000          MOV      r0,r0
;;;866    }
000c80  e8bd4ff8          POP      {r3-r11,lr}
000c84  e12fff1e          BX       lr
;;;867      
                          ENDP

                  |L1.3208|
                          DCD      net_av
                  |L1.3212|
                          DCD      ||.data||
                  |L1.3216|
                          DCD      bat
                  |L1.3220|
                          DCD      bps
                  |L1.3224|
                          DCD      ||.data||+0x1c
                  |L1.3228|
                          DCD      ||.data||+0x14
                  |L1.3232|
                          DCD      ||.data||+0x18
                  |L1.3236|
                          DCD      AV_OFF_AVT
                  |L1.3240|
                          DCD      0x00000e02
                  |L1.3244|
                          DCD      year__
                  |L1.3248|
                          DCD      month__
                  |L1.3252|
                          DCD      day__
                  |L1.3256|
                          DCD      hour__
                  |L1.3260|
                          DCD      min__
                  |L1.3264|
                          DCD      sec__
                  |L1.3268|
                          DCD      net_Ustore

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  wrk_mem_hndl PROC
;;;171    //-----------------------------------------------
;;;172    void avar_hndl(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;173    {
000004  e1a06000          MOV      r6,r0
;;;174    //static unsigned avar_stat_old;
;;;175    char i;
;;;176    //unsigned avar_stat_new,avar_stat_offed;
;;;177    
;;;178    if(net_av)		SET_REG(avar_stat,1,0,1);
000008  e0601200          RSB      r1,r0,r0,LSL #4
00000c  e59f017c          LDR      r0,|L2.400|
;;;179    else	   			SET_REG(avar_stat,0,0,1);
;;;180    
;;;181    for(i=0;i<2;i++)
;;;182    	{
;;;183    	if(bat[i]._av)	SET_REG(avar_stat,1,1+i,1);
000010  e0804101          ADD      r4,r0,r1,LSL #2
000014  e1d401b6          LDRH     r0,[r4,#0x16]         ;178
000018  e3500000          CMP      r0,#0                 ;178
00001c  0a000058          BEQ      |L2.388|
000020  e59f016c          LDR      r0,|L2.404|
000024  e1d000b0          LDRH     r0,[r0,#0]            ;179  ; bat_u_old_cnt
000028  e2800006          ADD      r0,r0,#6              ;181
00002c  e2000007          AND      r0,r0,#7
000030  e0840080          ADD      r0,r4,r0,LSL #1
000034  e1d001b8          LDRH     r0,[r0,#0x18]
000038  e58d0000          STR      r0,[sp,#0]
00003c  e3a00c0e          MOV      r0,#0xe00
000040  ebfffffe          BL       lc640_read_int
000044  e1a00800          LSL      r0,r0,#16
000048  e1a00820          LSR      r0,r0,#16
;;;184    	else	   		SET_REG(avar_stat,0,1+i,1);
00004c  e2800001          ADD      r0,r0,#1
000050  e3c05801          BIC      r5,r0,#0x10000        ;183
000054  e355003f          CMP      r5,#0x3f              ;183
000058  83a05000          MOVHI    r5,#0                 ;181
00005c  e1a01805          LSL      r1,r5,#16             ;181
000060  e1a01841          ASR      r1,r1,#16             ;181
000064  e3a00c0e          MOV      r0,#0xe00             ;181
000068  ebfffffe          BL       lc640_write_int
;;;185    	}
;;;186    
;;;187    for(i=0;i<12;i++)
;;;188    	{
;;;189    	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
00006c  e59f7124          LDR      r7,|L2.408|
000070  e1a00007          MOV      r0,r7                 ;187
000074  ebfffffe          BL       lc640_read_int
000078  e1a00800          LSL      r0,r0,#16
00007c  e1a00820          LSR      r0,r0,#16
000080  e350003f          CMP      r0,#0x3f
000084  11a00005          MOVNE    r0,r5
000088  e1a01800          LSL      r1,r0,#16
00008c  e1a01841          ASR      r1,r1,#16
000090  e1a00007          MOV      r0,r7
;;;190    	else	   		SET_REG(avar_stat,0,3+i,1);
000094  ebfffffe          BL       lc640_write_int
000098  e3a00c0e          MOV      r0,#0xe00             ;189
00009c  ebfffffe          BL       lc640_read_int
0000a0  e3a01b01          MOV      r1,#0x400             ;187
0000a4  e0810280          ADD      r0,r1,r0,LSL #5       ;187
0000a8  e1a05800          LSL      r5,r0,#16             ;187
0000ac  e3a00042          MOV      r0,#0x42              ;187
0000b0  e5cd0004          STRB     r0,[sp,#4]            ;187
;;;191    	}
;;;192    
;;;193    for(i=0;i<6;i++)
;;;194    	{
;;;195    	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
0000b4  e5cd6005          STRB     r6,[sp,#5]
0000b8  e3a00057          MOV      r0,#0x57              ;193
0000bc  e5cd0006          STRB     r0,[sp,#6]
0000c0  e1a05825          LSR      r5,r5,#16
0000c4  e3a06000          MOV      r6,#0
0000c8  e28d1004          ADD      r1,sp,#4
0000cc  e1a00005          MOV      r0,r5
;;;196    	else	   		SET_REG(avar_stat,0,15+i,1);
0000d0  e5cd6007          STRB     r6,[sp,#7]
0000d4  ebfffffe          BL       lc640_write_long_ptr
0000d8  e5d40016          LDRB     r0,[r4,#0x16]         ;195
0000dc  e28d1004          ADD      r1,sp,#4              ;193
0000e0  e5cd0004          STRB     r0,[sp,#4]            ;193
0000e4  e5d40017          LDRB     r0,[r4,#0x17]         ;193
0000e8  e5cd0005          STRB     r0,[sp,#5]            ;193
0000ec  e5dd0000          LDRB     r0,[sp,#0]            ;193
;;;197    	}
;;;198    
;;;199    for(i=0;i<4;i++)
;;;200    	{
;;;201    	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
0000f0  e5cd0006          STRB     r0,[sp,#6]
0000f4  e5dd0001          LDRB     r0,[sp,#1]            ;199
0000f8  e5cd0007          STRB     r0,[sp,#7]
0000fc  e2850004          ADD      r0,r5,#4
000100  ebfffffe          BL       lc640_write_long_ptr
000104  e284102c          ADD      r1,r4,#0x2c
000108  e2850008          ADD      r0,r5,#8
;;;202    	else	   		SET_REG(avar_stat,0,21+i,1);
00010c  ebfffffe          BL       lc640_write_long_ptr
000110  e2841030          ADD      r1,r4,#0x30           ;201
000114  e285000c          ADD      r0,r5,#0xc            ;201
000118  ebfffffe          BL       lc640_write_long_ptr
00011c  e59f0078          LDR      r0,|L2.412|
000120  e28d1004          ADD      r1,sp,#4              ;199
000124  e5d00000          LDRB     r0,[r0,#0]            ;199  ; year__
000128  e5cd0004          STRB     r0,[sp,#4]            ;199
;;;203    	}
;;;204    for(i=0;i<4;i++)
;;;205    	{
;;;206    	if(av_sk[i])	SET_REG(avar_stat,1,25+i,1);
00012c  e59f006c          LDR      r0,|L2.416|
000130  e5d00000          LDRB     r0,[r0,#0]            ;204  ; month__
000134  e5cd0005          STRB     r0,[sp,#5]
000138  e59f0064          LDR      r0,|L2.420|
00013c  e5d00000          LDRB     r0,[r0,#0]  ; day__
000140  e5cd0006          STRB     r0,[sp,#6]
000144  e2850010          ADD      r0,r5,#0x10
;;;207    	else	   		SET_REG(avar_stat,0,25+i,1);
000148  e5cd6007          STRB     r6,[sp,#7]
00014c  ebfffffe          BL       lc640_write_long_ptr
000150  e59f0050          LDR      r0,|L2.424|
000154  e28d1004          ADD      r1,sp,#4              ;204
000158  e5d00000          LDRB     r0,[r0,#0]            ;204  ; hour__
00015c  e5cd0004          STRB     r0,[sp,#4]            ;204
000160  e59f0044          LDR      r0,|L2.428|
000164  e5d00000          LDRB     r0,[r0,#0]            ;204  ; min__
;;;208    	}
;;;209    
;;;210    avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
000168  e5cd0005          STRB     r0,[sp,#5]
00016c  e59f003c          LDR      r0,|L2.432|
000170  e5d00000          LDRB     r0,[r0,#0]  ; sec__
;;;211    
;;;212    avar_ind_stat|=avar_stat_new;
000174  e5cd0006          STRB     r0,[sp,#6]
000178  e2850014          ADD      r0,r5,#0x14
;;;213    
;;;214    
;;;215    
;;;216    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
00017c  e5cd6007          STRB     r6,[sp,#7]
000180  ebfffffe          BL       lc640_write_long_ptr
                  |L2.388|
000184  e1a00000          MOV      r0,r0
;;;217    
;;;218    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
000188  e8bd41fc          POP      {r2-r8,lr}
00018c  e12fff1e          BX       lr
;;;219    
;;;220    avar_ind_stat&=avar_stat_offed; 
;;;221    
;;;222    avar_stat_old=avar_stat;
;;;223    }
;;;224    
                          ENDP

                  |L2.400|
                          DCD      bat
                  |L2.404|
                          DCD      bat_u_old_cnt
                  |L2.408|
                          DCD      0x00000e02
                  |L2.412|
                          DCD      year__
                  |L2.416|
                          DCD      month__
                  |L2.420|
                          DCD      day__
                  |L2.424|
                          DCD      hour__
                  |L2.428|
                          DCD      min__
                  |L2.432|
                          DCD      sec__

                          AREA ||.data||, DATA, ALIGN=2

                  avar_stat
                          DCD      0x00000000
                  avar_ind_stat
                          DCD      0x00000000
                  avar_stat_old
                          DCD      0x00000000
                  avar_stat_new
                          DCD      0x00000000
                  avar_stat_offed
                          DCD      0x00000000
                  av_dt
                          DCD      0x00000000
                  av_sk
                          DCD      0x00000000
                  av_inv
                          DCD      0x00000000
000020  0000              DCB      0x00,0x00
