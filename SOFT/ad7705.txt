; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -oad7705.o --depend=ad7705.d --feedback=UKU206.fed --device=DARMP --apcs=interwork -O3 -IC:\Keil\ARM\INC\Philips -D__MICROLIB --omf_browse=ad7705.crf ad7705.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  spi1_ad7705_config PROC
;;;15     //настройка SPI1
;;;16     void spi1_ad7705_config(void)
000000  e59f03f4          LDR      r0,|L1.1020|
;;;17     {
;;;18     SET_REG( PINSEL1, 2, 1*2, 2);
000004  e5901004          LDR      r1,[r0,#4]
000008  e3c1100c          BIC      r1,r1,#0xc
00000c  e3811008          ORR      r1,r1,#8
000010  e5801004          STR      r1,[r0,#4]
;;;19     SET_REG( PINSEL1, 2, 2*2, 2);
000014  e5901004          LDR      r1,[r0,#4]
000018  e3c11030          BIC      r1,r1,#0x30
00001c  e3811020          ORR      r1,r1,#0x20
000020  e5801004          STR      r1,[r0,#4]
;;;20     SET_REG( PINSEL1, 2, 3*2, 2);
000024  e5901004          LDR      r1,[r0,#4]
000028  e3c110c0          BIC      r1,r1,#0xc0
00002c  e3811080          ORR      r1,r1,#0x80
000030  e5801004          STR      r1,[r0,#4]
;;;21     SET_REG( PINSEL1, 2, 4*2, 2); 
000034  e5901004          LDR      r1,[r0,#4]
000038  e3c11c03          BIC      r1,r1,#0x300
00003c  e3811c02          ORR      r1,r1,#0x200
000040  e5801004          STR      r1,[r0,#4]
;;;22     
;;;23     S1SPCCR=100;
000044  e3a01064          MOV      r1,#0x64
000048  e2800901          ADD      r0,r0,#0x4000
00004c  e5c0100c          STRB     r1,[r0,#0xc]
;;;24     S1SPCR=0x3f;
000050  e3a0103f          MOV      r1,#0x3f
000054  e1c010b0          STRH     r1,[r0,#0]
;;;25     }
000058  e12fff1e          BX       lr
;;;26     //-----------------------------------------------
                          ENDP

                  ad7705_reset PROC
;;;27     void ad7705_reset(void)
00005c  e59f139c          LDR      r1,|L1.1024|
;;;28     {
;;;29     //short i;
;;;30     IO1DIR|=(1UL<<23);
000060  e5910018          LDR      r0,[r1,#0x18]
000064  e3800502          ORR      r0,r0,#0x800000
000068  e5810018          STR      r0,[r1,#0x18]
;;;31     IO1CLR|=(1UL<<23);
00006c  e591001c          LDR      r0,[r1,#0x1c]
000070  e3800502          ORR      r0,r0,#0x800000
000074  e581001c          STR      r0,[r1,#0x1c]
;;;32     delay_ms(10);
000078  e59f0384          LDR      r0,|L1.1028|
                  |L1.124|
00007c  e2500001          SUBS     r0,r0,#1
000080  1afffffd          BNE      |L1.124|
;;;33     IO1SET|=(1UL<<23);
000084  e5910014          LDR      r0,[r1,#0x14]
000088  e3800502          ORR      r0,r0,#0x800000
00008c  e5810014          STR      r0,[r1,#0x14]
;;;34     }
000090  e12fff1e          BX       lr
;;;35     
                          ENDP

                  ad7705_write PROC
;;;36     //-----------------------------------------------
;;;37     void ad7705_write(char in)
000094  e92d4010          PUSH     {r4,lr}
;;;38     {
;;;39     char i;
;;;40     IO0DIR|=(1UL<<11);
000098  e59f4360          LDR      r4,|L1.1024|
00009c  e1a03000          MOV      r3,r0                 ;38
0000a0  e5940008          LDR      r0,[r4,#8]
0000a4  e3800b02          ORR      r0,r0,#0x800
0000a8  e5840008          STR      r0,[r4,#8]
;;;41     IO0SET|=(1UL<<11);
0000ac  e5940004          LDR      r0,[r4,#4]
0000b0  e3800b02          ORR      r0,r0,#0x800
0000b4  e5840004          STR      r0,[r4,#4]
;;;42     spi1_ad7705_config();
0000b8  ebfffffe          BL       spi1_ad7705_config
;;;43     for(i=0;i<5;i++)IO0CLR|=(1UL<<11);
0000bc  e3a00000          MOV      r0,#0
                  |L1.192|
0000c0  e594100c          LDR      r1,[r4,#0xc]
0000c4  e2802001          ADD      r2,r0,#1
0000c8  e3810b02          ORR      r0,r1,#0x800
0000cc  e584000c          STR      r0,[r4,#0xc]
0000d0  e20200ff          AND      r0,r2,#0xff
0000d4  e3500005          CMP      r0,#5
0000d8  3afffff8          BCC      |L1.192|
;;;44     spi1(in);
0000dc  e1a00003          MOV      r0,r3
0000e0  ebfffffe          BL       spi1
;;;45     for(i=0;i<5;i++)IO0CLR|=(1UL<<11);
0000e4  e3a00000          MOV      r0,#0
                  |L1.232|
0000e8  e594100c          LDR      r1,[r4,#0xc]
0000ec  e2800001          ADD      r0,r0,#1
0000f0  e3811b02          ORR      r1,r1,#0x800
0000f4  e584100c          STR      r1,[r4,#0xc]
0000f8  e20000ff          AND      r0,r0,#0xff
0000fc  e3500005          CMP      r0,#5
000100  3afffff8          BCC      |L1.232|
;;;46     for(i=0;i<5;i++)IO0SET|=(1UL<<11);
000104  e3a00000          MOV      r0,#0
                  |L1.264|
000108  e5941004          LDR      r1,[r4,#4]
00010c  e2800001          ADD      r0,r0,#1
000110  e3811b02          ORR      r1,r1,#0x800
000114  e5841004          STR      r1,[r4,#4]
000118  e20000ff          AND      r0,r0,#0xff
00011c  e3500005          CMP      r0,#5
000120  3afffff8          BCC      |L1.264|
;;;47     spi1_unconfig();                   
000124  e8bd4010          POP      {r4,lr}
000128  eafffffe          B        spi1_unconfig
;;;48     }
;;;49     
                          ENDP

                  ad7705_read PROC
;;;51     //-----------------------------------------------
;;;52     void ad7705_read(char num)
00012c  e92d4070          PUSH     {r4-r6,lr}
;;;53     {
;;;54     //char temp;
;;;55     char i;
;;;56      
;;;57     IO0DIR|=(1UL<<11);
000130  e59f42c8          LDR      r4,|L1.1024|
000134  e1a02000          MOV      r2,r0                 ;53
000138  e5940008          LDR      r0,[r4,#8]
00013c  e3800b02          ORR      r0,r0,#0x800
000140  e5840008          STR      r0,[r4,#8]
;;;58     
;;;59     IO0SET|=(1UL<<11);
000144  e5940004          LDR      r0,[r4,#4]
000148  e3800b02          ORR      r0,r0,#0x800
00014c  e5840004          STR      r0,[r4,#4]
;;;60     spi1_ad7705_config();
000150  ebfffffe          BL       spi1_ad7705_config
;;;61     
;;;62     for(i=0;i<5;i++)IO0CLR|=(1UL<<11);
000154  e3a00000          MOV      r0,#0
                  |L1.344|
000158  e594100c          LDR      r1,[r4,#0xc]
00015c  e2800001          ADD      r0,r0,#1
000160  e3811b02          ORR      r1,r1,#0x800
000164  e584100c          STR      r1,[r4,#0xc]
000168  e20000ff          AND      r0,r0,#0xff
00016c  e3500005          CMP      r0,#5
000170  3afffff8          BCC      |L1.344|
;;;63     
;;;64     ad7705_res=0;
000174  e59f528c          LDR      r5,|L1.1032|
000178  e3a00000          MOV      r0,#0
;;;65     if(num==1) 
00017c  e3520001          CMP      r2,#1
000180  e1c500b6          STRH     r0,[r5,#6]            ;64  ; ad7705_res
000184  1a000002          BNE      |L1.404|
;;;66     	{
;;;67     	ad7705_res=spi1(0);
000188  ebfffffe          BL       spi1
00018c  e1c500b6          STRH     r0,[r5,#6]  ; ad7705_res
000190  ea000008          B        |L1.440|
                  |L1.404|
;;;68     	}
;;;69     else if(num==2)
000194  e3520002          CMP      r2,#2
000198  1a000006          BNE      |L1.440|
;;;70     	{
;;;71     	*(((char*)(&ad7705_res))+1)=spi1(0); 
00019c  e3a00000          MOV      r0,#0
0001a0  ebfffffe          BL       spi1
0001a4  e59f5260          LDR      r5,|L1.1036|
0001a8  e5c50001          STRB     r0,[r5,#1]  ; ad7705_res
;;;72     	*(((char*)(&ad7705_res)))=spi1(0);
0001ac  e3a00000          MOV      r0,#0
0001b0  ebfffffe          BL       spi1
0001b4  e5c50000          STRB     r0,[r5,#0]  ; ad7705_res
                  |L1.440|
;;;73     	}	   
;;;74     
;;;75     for(i=0;i<5;i++)IO0CLR|=(1UL<<11);
0001b8  e3a00000          MOV      r0,#0
                  |L1.444|
0001bc  e594100c          LDR      r1,[r4,#0xc]
0001c0  e2800001          ADD      r0,r0,#1
0001c4  e3811b02          ORR      r1,r1,#0x800
0001c8  e584100c          STR      r1,[r4,#0xc]
0001cc  e20000ff          AND      r0,r0,#0xff
0001d0  e3500005          CMP      r0,#5
0001d4  3afffff8          BCC      |L1.444|
;;;76     
;;;77     for(i=0;i<5;i++)IO0SET|=(1UL<<11);
0001d8  e3a00000          MOV      r0,#0
                  |L1.476|
0001dc  e5941004          LDR      r1,[r4,#4]
0001e0  e2800001          ADD      r0,r0,#1
0001e4  e3811b02          ORR      r1,r1,#0x800
0001e8  e5841004          STR      r1,[r4,#4]
0001ec  e20000ff          AND      r0,r0,#0xff
0001f0  e3500005          CMP      r0,#5
0001f4  3afffff8          BCC      |L1.476|
;;;78     
;;;79     spi1_unconfig();                                            
0001f8  e8bd4070          POP      {r4-r6,lr}
0001fc  eafffffe          B        spi1_unconfig
;;;80     }
;;;81     
                          ENDP

                  ad7705_drv PROC
;;;82     //-----------------------------------------------
;;;83     void ad7705_drv(void)
000200  e92d4070          PUSH     {r4-r6,lr}
;;;84     {
;;;85     __disable_irq();
000204  e10f0000          MRS      r0,APSR ; formerly CPSR
000208  e3800080          ORR      r0,r0,#0x80
00020c  e121f000          MSR      CPSR_c,r0
;;;86     
;;;87     IO0DIR|=(1UL<<11);
000210  e59f01e8          LDR      r0,|L1.1024|
000214  e5901008          LDR      r1,[r0,#8]
000218  e3811b02          ORR      r1,r1,#0x800
00021c  e5801008          STR      r1,[r0,#8]
;;;88     IO0DIR&=~(1UL<<10);
000220  e5901008          LDR      r1,[r0,#8]
000224  e3c11b01          BIC      r1,r1,#0x400
000228  e5801008          STR      r1,[r0,#8]
;;;89     
;;;90     if(!(IO0PIN&(1UL<<10)))
00022c  e5900000          LDR      r0,[r0,#0]
;;;91     	{
;;;92     	ad7705_write(0x38);
;;;93     	ad7705_read(2);
;;;94     	
;;;95     	if(!b7705ch)
000230  e59f41d0          LDR      r4,|L1.1032|
000234  e3100b01          TST      r0,#0x400             ;90
000238  e3a05000          MOV      r5,#0
00023c  1a000040          BNE      |L1.836|
000240  e3a00038          MOV      r0,#0x38              ;92
000244  ebfffffe          BL       ad7705_write
000248  e3a00002          MOV      r0,#2                 ;93
00024c  ebfffffe          BL       ad7705_read
000250  e5d40000          LDRB     r0,[r4,#0]  ; b7705ch
;;;96     		{
;;;97     		ad7705_buff[0][ad7705_wrk_cnt]=ad7705_res;
000254  e59fc1b4          LDR      r12,|L1.1040|
000258  e3500000          CMP      r0,#0                 ;95
00025c  1a000007          BNE      |L1.640|
000260  e5d41001          LDRB     r1,[r4,#1]  ; ad7705_wrk_cnt
000264  e1d400b6          LDRH     r0,[r4,#6]  ; ad7705_res
000268  e08c1081          ADD      r1,r12,r1,LSL #1
00026c  e1c100b0          STRH     r0,[r1,#0]
;;;98     		ad7705_res1=ad7705_res;
000270  e1c400b2          STRH     r0,[r4,#2]  ; ad7705_res1
;;;99     		}
;;;100    	else if(b7705ch) 
;;;101    		{
;;;102    		ad7705_buff[1][ad7705_wrk_cnt]=ad7705_res;
;;;103    		ad7705_res2=ad7705_res;
;;;104    		}
;;;105    
;;;106    	if(b7705ch)
;;;107    		{
;;;108    		b7705ch=0;
;;;109    		ad7705_wrk_cnt++;
;;;110    		if(ad7705_wrk_cnt>=16)ad7705_wrk_cnt=0;
;;;111    		
;;;112    		if((ad7705_wrk_cnt&0x01)==0)
;;;113    			{
;;;114    			unsigned temp_U;
;;;115    			char i,ii;
;;;116    
;;;117    			for(i=0;i<2;i++)
;;;118    				{
;;;119    				temp_U=0;
;;;120    				for(ii=0;ii<16;ii++)
;;;121    					{
;;;122    					temp_U+=(unsigned long)ad7705_buff[i][ii];
;;;123    					}
;;;124    				ad7705_buff_[i]=(unsigned short)(temp_U>>4);
;;;125    				}	
;;;126    			}
;;;127    		}	
;;;128    		
;;;129    		
;;;130    		
;;;131    	else b7705ch=1;
000274  e3a00001          MOV      r0,#1
000278  e5c40000          STRB     r0,[r4,#0]  ; b7705ch
00027c  ea000025          B        |L1.792|
                  |L1.640|
000280  e5d40001          LDRB     r0,[r4,#1]            ;102  ; ad7705_wrk_cnt
000284  e1d410b6          LDRH     r1,[r4,#6]            ;102  ; ad7705_res
000288  e08c2080          ADD      r2,r12,r0,LSL #1      ;102
00028c  e2800001          ADD      r0,r0,#1              ;109
000290  e1c212b0          STRH     r1,[r2,#0x20]         ;102
000294  e20000ff          AND      r0,r0,#0xff           ;109
000298  e1c410b4          STRH     r1,[r4,#4]            ;103  ; ad7705_res2
00029c  e5c45000          STRB     r5,[r4,#0]            ;108  ; b7705ch
0002a0  e3500010          CMP      r0,#0x10              ;110
0002a4  e5c40001          STRB     r0,[r4,#1]            ;109  ; ad7705_wrk_cnt
0002a8  25c45001          STRBCS   r5,[r4,#1]            ;110  ; ad7705_wrk_cnt
0002ac  e5d40001          LDRB     r0,[r4,#1]            ;112  ; ad7705_wrk_cnt
0002b0  e3100001          TST      r0,#1                 ;112
0002b4  1a000015          BNE      |L1.784|
0002b8  e59fe154          LDR      lr,|L1.1044|
0002bc  e3a01000          MOV      r1,#0                 ;117
                  |L1.704|
0002c0  e3a02000          MOV      r2,#0                 ;119
0002c4  e1a00002          MOV      r0,r2                 ;120
0002c8  e08c3281          ADD      r3,r12,r1,LSL #5      ;122
                  |L1.716|
0002cc  e0836080          ADD      r6,r3,r0,LSL #1       ;122
0002d0  e1d660b0          LDRH     r6,[r6,#0]            ;122
0002d4  e2800001          ADD      r0,r0,#1              ;120
0002d8  e20000ff          AND      r0,r0,#0xff           ;120
0002dc  e3500010          CMP      r0,#0x10              ;120
0002e0  e0822006          ADD      r2,r2,r6              ;122
0002e4  3afffff8          BCC      |L1.716|
0002e8  e1a00602          LSL      r0,r2,#12             ;124
0002ec  e1a00820          LSR      r0,r0,#16             ;124
0002f0  e08e2081          ADD      r2,lr,r1,LSL #1       ;124
0002f4  e1c200b0          STRH     r0,[r2,#0]            ;124
0002f8  e2810001          ADD      r0,r1,#1              ;117
0002fc  e20010ff          AND      r1,r0,#0xff           ;117
000300  e3510002          CMP      r1,#2                 ;117
000304  3affffed          BCC      |L1.704|
;;;132    	
;;;133    	if(!b7705ch) ad7705_write(0x20);
000308  e3550000          CMP      r5,#0
00030c  1a000001          BNE      |L1.792|
                  |L1.784|
000310  e3a00020          MOV      r0,#0x20
000314  ea000000          B        |L1.796|
                  |L1.792|
;;;134    	else if(b7705ch) ad7705_write(0x21);
000318  e3a00021          MOV      r0,#0x21
                  |L1.796|
00031c  ebfffffe          BL       ad7705_write
;;;135    
;;;136    	ad7705_write(BIN8(1101)); 
000320  e3a0000d          MOV      r0,#0xd
000324  ebfffffe          BL       ad7705_write
;;;137    
;;;138    	if(!b7705ch) ad7705_write(0x10);
000328  e5d40000          LDRB     r0,[r4,#0]  ; b7705ch
00032c  e3500000          CMP      r0,#0
;;;139    	else if(b7705ch) ad7705_write(0x11);
000330  13a00011          MOVNE    r0,#0x11
000334  03a00010          MOVEQ    r0,#0x10              ;138
000338  ebfffffe          BL       ad7705_write
;;;140    
;;;141    	ad7705_write(0x44);
00033c  e3a00044          MOV      r0,#0x44
000340  ebfffffe          BL       ad7705_write
                  |L1.836|
;;;142    	}
;;;143    
;;;144    	__enable_irq();
000344  e10f0000          MRS      r0,APSR ; formerly CPSR
000348  e3c00080          BIC      r0,r0,#0x80
00034c  e121f000          MSR      CPSR_c,r0
;;;145    
;;;146    if(((ad7705_res1&0x0fff)==0x0000)||((ad7705_res1&0x0fff)==0x0fff)||((ad7705_res2&0x0fff)==0x0000)||((ad7705_res2&0x0fff)==0x0fff))
000350  e1d400b2          LDRH     r0,[r4,#2]  ; ad7705_res1
000354  e1b01a00          LSLS     r1,r0,#20
000358  159f10b8          LDRNE    r1,|L1.1048|
00035c  11510a00          CMPNE    r1,r0,LSL #20
000360  11d400b4          LDRHNE   r0,[r4,#4]  ; ad7705_res2
000364  11b02a00          LSLSNE   r2,r0,#20
000368  11510a00          CMPNE    r1,r0,LSL #20
;;;147    {
;;;148    if(cnt_ad7705_vis<50)
;;;149    	{
;;;150    	cnt_ad7705_vis++;
;;;151    	if(cnt_ad7705_vis>=50) cnt_ad7705_vis_wrk=50;
;;;152    		
;;;153    	}
;;;154    }
;;;155    else cnt_ad7705_vis=0;
00036c  11c450b8          STRHNE   r5,[r4,#8]  ; cnt_ad7705_vis
000370  1a000009          BNE      |L1.924|
000374  e1d400b8          LDRH     r0,[r4,#8]            ;148  ; cnt_ad7705_vis
000378  e3500032          CMP      r0,#0x32              ;148
00037c  2a000006          BCS      |L1.924|
000380  e2800001          ADD      r0,r0,#1              ;150
000384  e1c400b8          STRH     r0,[r4,#8]            ;150  ; cnt_ad7705_vis
000388  e1d400b8          LDRH     r0,[r4,#8]            ;151  ; cnt_ad7705_vis
00038c  e3500032          CMP      r0,#0x32              ;151
000390  23a00032          MOVCS    r0,#0x32              ;151
000394  21c400ba          STRHCS   r0,[r4,#0xa]          ;151  ; cnt_ad7705_vis_wrk
000398  2a000002          BCS      |L1.936|
                  |L1.924|
;;;156    
;;;157    if(cnt_ad7705_vis_wrk)
00039c  e1d400ba          LDRH     r0,[r4,#0xa]  ; cnt_ad7705_vis_wrk
0003a0  e3500000          CMP      r0,#0
0003a4  0a000012          BEQ      |L1.1012|
                  |L1.936|
;;;158    	{
;;;159    	cnt_ad7705_vis_wrk--;
0003a8  e1d400ba          LDRH     r0,[r4,#0xa]  ; cnt_ad7705_vis_wrk
0003ac  e2400001          SUB      r0,r0,#1
0003b0  e1a00800          LSL      r0,r0,#16
0003b4  e1a00820          LSR      r0,r0,#16
;;;160    
;;;161    	if(cnt_ad7705_vis_wrk==30)
0003b8  e350001e          CMP      r0,#0x1e
;;;162    		{
;;;163    		ad7705_reset();
;;;164    		ad7705_write(0x20);
;;;165    		ad7705_write(BIN8(1101)); 
;;;166    		ad7705_write(0x10);
;;;167    		ad7705_write(0x44); 
;;;168    	     }
;;;169    	else if(cnt_ad7705_vis_wrk==20)
0003bc  13500014          CMPNE    r0,#0x14
;;;170    		{              
;;;171    		ad7705_reset();
;;;172    		ad7705_write(0x20);
;;;173    		ad7705_write(BIN8(1101)); 
;;;174    		ad7705_write(0x10);
;;;175    		ad7705_write(0x44); 
;;;176    	     }	
;;;177    	else if(cnt_ad7705_vis_wrk==10)
0003c0  1350000a          CMPNE    r0,#0xa
0003c4  e1c400ba          STRH     r0,[r4,#0xa]          ;159  ; cnt_ad7705_vis_wrk
0003c8  1a000009          BNE      |L1.1012|
;;;178    		{              
;;;179    		ad7705_reset();
0003cc  ebfffffe          BL       ad7705_reset
;;;180    		ad7705_write(0x20);
0003d0  e3a00020          MOV      r0,#0x20
0003d4  ebfffffe          BL       ad7705_write
;;;181    		ad7705_write(BIN8(1101)); 
0003d8  e3a0000d          MOV      r0,#0xd
0003dc  ebfffffe          BL       ad7705_write
;;;182    		ad7705_write(0x10);
0003e0  e3a00010          MOV      r0,#0x10
0003e4  ebfffffe          BL       ad7705_write
;;;183    		ad7705_write(0x44); 
0003e8  e8bd4070          POP      {r4-r6,lr}
0003ec  e3a00044          MOV      r0,#0x44
0003f0  eafffffe          B        ad7705_write
                  |L1.1012|
;;;184    	     }
;;;185    	else if(cnt_ad7705_vis_wrk==2)
;;;186    		{
;;;187    
;;;188    	     }		        		          
;;;189    	}         
;;;190    else 
;;;191    	{
;;;192    
;;;193    	}	
;;;194    	
;;;195    }
0003f4  e8bd4070          POP      {r4-r6,lr}
0003f8  e12fff1e          BX       lr
;;;196    
                          ENDP

                  |L1.1020|
                          DCD      0xe002c000
                  |L1.1024|
                          DCD      0xe0028000
                  |L1.1028|
                          DCD      0x0001d4c0
                  |L1.1032|
                          DCD      ||.data||
                  |L1.1036|
                          DCD      ||.data||+0x6
                  |L1.1040|
                          DCD      ||.bss||
                  |L1.1044|
                          DCD      ||.data||+0xc
                  |L1.1048|
                          DCD      0xfff00000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ad7705_buff
                          %        64

                          AREA ||.data||, DATA, ALIGN=1

                  b7705ch
000000  00                DCB      0x00
                  ad7705_wrk_cnt
000001  00                DCB      0x00
                  ad7705_res1
000002  0000              DCB      0x00,0x00
                  ad7705_res2
000004  0000              DCB      0x00,0x00
                  ad7705_res
000006  0000              DCB      0x00,0x00
                  cnt_ad7705_vis
000008  0000              DCB      0x00,0x00
                  cnt_ad7705_vis_wrk
00000a  0000              DCB      0x00,0x00
                  ad7705_buff_
                          DCDU     0x00000000
