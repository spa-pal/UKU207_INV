; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -oret.o --depend=ret.d --feedback=UKU206.fed --device=DARMP --apcs=interwork -O3 -IC:\Keil\ARM\INC\Philips -D__MICROLIB --omf_browse=ret.crf ret.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ret_ind PROC
;;;34     //-----------------------------------------------
;;;35     void ret_ind(char r_i,char r_s,int r_c)
000000  e59f3058          LDR      r3,|L1.96|
;;;36     {
;;;37     retcnt=r_c;
000004  e583200c          STR      r2,[r3,#0xc]  ; retcnt
;;;38     retind=r_i;
000008  e5c30000          STRB     r0,[r3,#0]  ; retind
;;;39     retsub=r_s;
00000c  e5c31001          STRB     r1,[r3,#1]  ; retsub
;;;40     }    
000010  e12fff1e          BX       lr
;;;41     
                          ENDP

                  ret_ind_sec PROC
;;;42     //-----------------------------------------------
;;;43     void ret_ind_hndl(void)
;;;44     {
;;;45     if(retcnt)
;;;46     	{
;;;47     	if((--retcnt)==0)
000014  e59f2044          LDR      r2,|L1.96|
;;;48     		{
;;;49      		ind=retind;
;;;50        		sub_ind=retsub;
;;;51        		index_set=sub_ind;
;;;52        		f0=0;
;;;53        		fc0=0;
;;;54        		f1=0;
;;;55        		fc1=0;
;;;56     	 	}
;;;57          }
;;;58     }  
000018  e5821010          STR      r1,[r2,#0x10]  ; retcntsec
00001c  e5c20002          STRB     r0,[r2,#2]            ;49  ; retindsec
000020  e12fff1e          BX       lr                    ;49
;;;59     
                          ENDP

                  ||ret|| PROC
;;;42     //-----------------------------------------------
;;;43     void ret_ind_hndl(void)
;;;44     {
;;;45     if(retcnt)
;;;46     	{
;;;47     	if((--retcnt)==0)
;;;48     		{
;;;49      		ind=retind;
000024  e59f1034          LDR      r1,|L1.96|
;;;50        		sub_ind=retsub;
000028  e1c100b8          STRH     r0,[r1,#8]  ; ret_duty
00002c  e12fff1e          BX       lr
;;;51        		index_set=sub_ind;
;;;52        		f0=0;
;;;53        		fc0=0;
;;;54        		f1=0;
;;;55        		fc1=0;
;;;56     	 	}
;;;57          }
;;;58     }  
;;;59     
                          ENDP

                  ret_hndl PROC
;;;42     //-----------------------------------------------
;;;43     void ret_ind_hndl(void)
;;;44     {
;;;45     if(retcnt)
;;;46     	{
;;;47     	if((--retcnt)==0)
;;;48     		{
;;;49      		ind=retind;
;;;50        		sub_ind=retsub;
;;;51        		index_set=sub_ind;
000030  e59f1028          LDR      r1,|L1.96|
;;;52        		f0=0;
000034  e1d100f8          LDRSH    r0,[r1,#8]  ; ret_duty
000038  e3500000          CMP      r0,#0
;;;53        		fc0=0;
00003c  012fff1e          BXEQ     lr
;;;54        		f1=0;
000040  e2400001          SUB      r0,r0,#1
;;;55        		fc1=0;
000044  e1a00800          LSL      r0,r0,#16
;;;56     	 	}
;;;57          }
;;;58     }  
000048  e1b00840          ASRS     r0,r0,#16
00004c  e1c100b8          STRH     r0,[r1,#8]  ; ret_duty
000050  112fff1e          BXNE     lr
000054  e3a01000          MOV      r1,#0
000058  e1a00001          MOV      r0,r1
00005c  eafffffe          B        tree_down
;;;59     
                          ENDP

                  |L1.96|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  ret_ind_hndl PROC
;;;42     //-----------------------------------------------
;;;43     void ret_ind_hndl(void)
000000  e59f0044          LDR      r0,|L2.76|
;;;44     {
;;;45     if(retcnt)
000004  e590100c          LDR      r1,[r0,#0xc]  ; retcnt
000008  e3510000          CMP      r1,#0
;;;46     	{
;;;47     	if((--retcnt)==0)
;;;48     		{
;;;49      		ind=retind;
;;;50        		sub_ind=retsub;
;;;51        		index_set=sub_ind;
;;;52        		f0=0;
;;;53        		fc0=0;
;;;54        		f1=0;
;;;55        		fc1=0;
;;;56     	 	}
;;;57          }
;;;58     }  
00000c  012fff1e          BXEQ     lr
000010  e2511001          SUBS     r1,r1,#1              ;47
000014  e580100c          STR      r1,[r0,#0xc]          ;47  ; retcnt
000018  112fff1e          BXNE     lr
00001c  e5d01000          LDRB     r1,[r0,#0]            ;49  ; retind
000020  e59f2028          LDR      r2,|L2.80|
000024  e5c21000          STRB     r1,[r2,#0]            ;49  ; aa
000028  e5d01001          LDRB     r1,[r0,#1]            ;50  ; retsub
00002c  e5c21001          STRB     r1,[r2,#1]            ;50  ; aa
000030  e5c21004          STRB     r1,[r2,#4]            ;51  ; aa
000034  e3a01000          MOV      r1,#0                 ;52
000038  e5c01003          STRB     r1,[r0,#3]            ;52  ; f0
00003c  e5c01004          STRB     r1,[r0,#4]            ;53  ; fc0
000040  e5c01005          STRB     r1,[r0,#5]            ;54  ; f1
000044  e5c01006          STRB     r1,[r0,#6]            ;55  ; fc1
000048  e12fff1e          BX       lr
;;;59     
                          ENDP

                  |L2.76|
                          DCD      ||.data||
                  |L2.80|
                          DCD      ||aa||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  ret_ind_sec_hndl PROC
;;;42     //-----------------------------------------------
;;;43     void ret_ind_hndl(void)
000000  e59f003c          LDR      r0,|L3.68|
;;;44     {
;;;45     if(retcnt)
000004  e5901010          LDR      r1,[r0,#0x10]  ; retcntsec
000008  e3510000          CMP      r1,#0
;;;46     	{
;;;47     	if((--retcnt)==0)
;;;48     		{
;;;49      		ind=retind;
;;;50        		sub_ind=retsub;
;;;51        		index_set=sub_ind;
;;;52        		f0=0;
;;;53        		fc0=0;
;;;54        		f1=0;
;;;55        		fc1=0;
;;;56     	 	}
;;;57          }
;;;58     }  
00000c  012fff1e          BXEQ     lr
000010  e2511001          SUBS     r1,r1,#1              ;47
000014  e5801010          STR      r1,[r0,#0x10]         ;47  ; retcntsec
000018  112fff1e          BXNE     lr
00001c  e5d01002          LDRB     r1,[r0,#2]            ;49  ; retindsec
000020  e59f2020          LDR      r2,|L3.72|
000024  e5c21000          STRB     r1,[r2,#0]            ;49  ; aa
000028  e3a01000          MOV      r1,#0                 ;50
00002c  e5c21001          STRB     r1,[r2,#1]            ;50  ; aa
000030  e5c01003          STRB     r1,[r0,#3]            ;51  ; f0
000034  e5c01004          STRB     r1,[r0,#4]            ;52  ; fc0
000038  e5c01005          STRB     r1,[r0,#5]            ;52  ; f1
00003c  e5c01006          STRB     r1,[r0,#6]            ;53  ; fc1
000040  e12fff1e          BX       lr                    ;54
;;;59     
                          ENDP

                  |L3.68|
                          DCD      ||.data||
                  |L3.72|
                          DCD      ||aa||

                          AREA ||.data||, DATA, ALIGN=2

                  retind
000000  00                DCB      0x00
                  retsub
000001  00                DCB      0x00
                  retindsec
000002  00                DCB      0x00
                  ||f0||
000003  00                DCB      0x00
                  ||fc0||
000004  00                DCB      0x00
                  ||f1||
000005  00                DCB      0x00
                  ||fc1||
000006  0000              DCB      0x00,0x00
                  ret_duty
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  retcnt
                          DCD      0x00000000
                  retcntsec
                          DCD      0x00000000
