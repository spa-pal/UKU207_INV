; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -omess.o --depend=mess.d --feedback=UKU206.fed --device=DARMP --apcs=interwork -O3 -IC:\Keil\ARM\INC\Philips -D__MICROLIB --omf_browse=mess.crf mess.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mess_hndl PROC
;;;9      //-----------------------------------------------
;;;10     void mess_hndl(void)
000000  e59f3168          LDR      r3,|L1.368|
;;;11     {
000004  e92d4010          PUSH     {r4,lr}
;;;12     char i;
;;;13     for(i=0;i<MESS_DEEP;i++)
000008  e3a00000          MOV      r0,#0
00000c  e1a0e000          MOV      lr,r0
;;;14     	{
;;;15     	if((mess[i])&&(mess[i]==mess_old[i])&&(mess_cnt[i]))
000010  e2432014          SUB      r2,r3,#0x14
000014  e243c00a          SUB      r12,r3,#0xa
                  |L1.24|
000018  e7d21000          LDRB     r1,[r2,r0]
00001c  e3510000          CMP      r1,#0
000020  0a000009          BEQ      |L1.76|
000024  e7dc4000          LDRB     r4,[r12,r0]
000028  e1510004          CMP      r1,r4
00002c  1a000006          BNE      |L1.76|
000030  e7d31000          LDRB     r1,[r3,r0]
000034  e3510000          CMP      r1,#0
000038  0a000003          BEQ      |L1.76|
;;;16     		{
;;;17     		mess_cnt[i]--;
00003c  e2411001          SUB      r1,r1,#1
000040  e21110ff          ANDS     r1,r1,#0xff
000044  e7c31000          STRB     r1,[r3,r0]
;;;18     		if(!mess_cnt[i])mess[i]=MESS_ZERO;
000048  07c2e000          STRBEQ   lr,[r2,r0]
                  |L1.76|
;;;19     		
;;;20     		}
;;;21     	mess_old[i]=mess[i];
00004c  e7d21000          LDRB     r1,[r2,r0]
000050  e7cc1000          STRB     r1,[r12,r0]
000054  e2800001          ADD      r0,r0,#1              ;13
000058  e20000ff          AND      r0,r0,#0xff           ;13
00005c  e350000a          CMP      r0,#0xa               ;13
000060  3affffec          BCC      |L1.24|
;;;22     	} 
;;;23     }
000064  e8bd4010          POP      {r4,lr}
000068  e12fff1e          BX       lr
;;;24     
                          ENDP

                  mess_send PROC
;;;25     //-----------------------------------------------
;;;26     void mess_send(char _mess, short par0, short par1, char _time)
00006c  e92d4010          PUSH     {r4,lr}
;;;27     {
;;;28     char i;
;;;29     i=0;
;;;30     
;;;31     do
;;;32     	{
;;;33     	i++;
;;;34     	}
;;;35     while((mess[i])&&(mess[i]!=_mess)&&(i<MESS_DEEP));
000070  e59f40fc          LDR      r4,|L1.372|
000074  e3a0c000          MOV      r12,#0                ;29
                  |L1.120|
000078  e28cc001          ADD      r12,r12,#1            ;33
00007c  e20cc0ff          AND      r12,r12,#0xff         ;33
000080  e7d4e00c          LDRB     lr,[r4,r12]
000084  e35e0000          CMP      lr,#0
000088  115e0000          CMPNE    lr,r0
00008c  135c000a          CMPNE    r12,#0xa
000090  3afffff8          BCC      |L1.120|
;;;36     
;;;37     mess[i]=_mess;  
000094  e7c4000c          STRB     r0,[r4,r12]
;;;38     mess_par0[i]=par0;
000098  e59f00d8          LDR      r0,|L1.376|
00009c  e780110c          STR      r1,[r0,r12,LSL #2]
;;;39     mess_par1[i]=par1;
0000a0  e2800028          ADD      r0,r0,#0x28
0000a4  e780210c          STR      r2,[r0,r12,LSL #2]
;;;40     mess_cnt[i]=_time; 
0000a8  e2400034          SUB      r0,r0,#0x34
0000ac  e7c0300c          STRB     r3,[r0,r12]
;;;41      
;;;42     }
0000b0  e8bd4010          POP      {r4,lr}
0000b4  e12fff1e          BX       lr
;;;43     
                          ENDP

                  mess_find PROC
;;;44     //-----------------------------------------------
;;;45     char mess_find(char _mess)
0000b8  e59f20b4          LDR      r2,|L1.372|
;;;46     {
;;;47     char i;
;;;48     i=0;
0000bc  e3a01000          MOV      r1,#0
                  |L1.192|
;;;49     
;;;50     do
;;;51     	{
;;;52     	i++;
0000c0  e2811001          ADD      r1,r1,#1
0000c4  e20110ff          AND      r1,r1,#0xff
;;;53     	}
;;;54     while((mess[i]!=_mess)&&(i<MESS_DEEP));
0000c8  e7d23001          LDRB     r3,[r2,r1]
0000cc  e1530000          CMP      r3,r0
0000d0  1351000a          CMPNE    r1,#0xa
0000d4  3afffff9          BCC      |L1.192|
;;;55     
;;;56     if(mess[i]==_mess)
0000d8  e7d23001          LDRB     r3,[r2,r1]
0000dc  e1530000          CMP      r3,r0
;;;57     	{ 
;;;58     	mess_data[0]=mess_par0[i];  
;;;59     	mess_data[1]=mess_par1[i];
;;;60     	mess[i]=MESS_ZERO;
;;;61     	mess_cnt[i]=0;
;;;62     	return 1; 
;;;63     	}
;;;64     else return 0; 
0000e0  13a00000          MOVNE    r0,#0
;;;65      
;;;66     }
0000e4  112fff1e          BXNE     lr
0000e8  e59f0088          LDR      r0,|L1.376|
0000ec  e7903101          LDR      r3,[r0,r1,LSL #2]     ;58
0000f0  e59f0084          LDR      r0,|L1.380|
0000f4  e5803000          STR      r3,[r0,#0]            ;58  ; mess_data
0000f8  e59f3080          LDR      r3,|L1.384|
0000fc  e7933101          LDR      r3,[r3,r1,LSL #2]     ;59
000100  e5803004          STR      r3,[r0,#4]            ;59  ; mess_data
000104  e3a00000          MOV      r0,#0                 ;60
000108  e7c20001          STRB     r0,[r2,r1]            ;60
00010c  e59f205c          LDR      r2,|L1.368|
000110  e7c20001          STRB     r0,[r2,r1]            ;61
000114  e3a00001          MOV      r0,#1                 ;62
000118  e12fff1e          BX       lr
;;;67     
                          ENDP

                  mess_find_unvol PROC
;;;68     //-----------------------------------------------
;;;69     char mess_find_unvol(char _mess)
00011c  e59f2050          LDR      r2,|L1.372|
;;;70     {
;;;71     char i;
;;;72     i=0;
000120  e3a01000          MOV      r1,#0
                  |L1.292|
;;;73     
;;;74     do
;;;75     	{
;;;76     	i++;
000124  e2811001          ADD      r1,r1,#1
000128  e20110ff          AND      r1,r1,#0xff
;;;77     	}
;;;78     while((mess[i]!=_mess)&&(i<MESS_DEEP));
00012c  e7d23001          LDRB     r3,[r2,r1]
000130  e1530000          CMP      r3,r0
000134  1351000a          CMPNE    r1,#0xa
000138  3afffff9          BCC      |L1.292|
;;;79     
;;;80     if(mess[i]==_mess)
00013c  e7d22001          LDRB     r2,[r2,r1]
000140  e1520000          CMP      r2,r0
;;;81     	{ 
;;;82     	mess_data[0]=mess_par0[i];  
;;;83     	mess_data[1]=mess_par1[i];
;;;84     	return 1; 
;;;85     	}
;;;86     else return 0; 
000144  13a00000          MOVNE    r0,#0
;;;87      
;;;88     }
000148  112fff1e          BXNE     lr
00014c  e59f0024          LDR      r0,|L1.376|
000150  e7902101          LDR      r2,[r0,r1,LSL #2]     ;82
000154  e59f0020          LDR      r0,|L1.380|
000158  e5802000          STR      r2,[r0,#0]            ;82  ; mess_data
00015c  e59f201c          LDR      r2,|L1.384|
000160  e7921101          LDR      r1,[r2,r1,LSL #2]     ;83
000164  e5801004          STR      r1,[r0,#4]            ;83  ; mess_data
000168  e3a00001          MOV      r0,#1                 ;84
00016c  e12fff1e          BX       lr
                          ENDP

                  |L1.368|
                          DCD      ||.bss||+0x14
                  |L1.372|
                          DCD      ||.bss||
                  |L1.376|
                          DCD      ||.bss||+0x20
                  |L1.380|
                          DCD      ||.data||
                  |L1.384|
                          DCD      ||.bss||+0x48

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mess
                          %        10
                  mess_old
                          %        10
                  mess_cnt
                          %        12
                  mess_par0
                          %        40
                  mess_par1
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  mess_data
                          %        8
