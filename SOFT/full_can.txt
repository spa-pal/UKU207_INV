; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -ofull_can.o --depend=full_can.d --feedback=UKU206.fed --device=DARMP --apcs=interwork -O3 -IC:\Keil\ARM\INC\Philips -D__MICROLIB --omf_browse=full_can.crf full_can.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CRC1_in PROC
;;;138    //-----------------------------------------------
;;;139    char CRC1_in(void)
000000  e59f2bc8          LDR      r2,|L1.3024|
;;;140    {
000004  e52de004          PUSH     {lr}
;;;141    char r,j,lb;
;;;142    lb=(RXBUFF[1]&0x1f)+0x04;
000008  e5d21001          LDRB     r1,[r2,#1]  ; RXBUFF
;;;143    r=RXBUFF[0];
00000c  e5d20000          LDRB     r0,[r2,#0]  ; RXBUFF
;;;144    for(j=1;j<(lb+1);j++)
;;;145    	{
;;;146    	r=(RXBUFF[j]^Table87[r]);
000010  e59f3bbc          LDR      r3,|L1.3028|
000014  e201101f          AND      r1,r1,#0x1f           ;142
000018  e281c004          ADD      r12,r1,#4             ;142
00001c  e3a01001          MOV      r1,#1                 ;144
000020  e28cc001          ADD      r12,r12,#1            ;144
                  |L1.36|
000024  e151000c          CMP      r1,r12                ;144
000028  37d2e001          LDRBCC   lr,[r2,r1]
00002c  37d30000          LDRBCC   r0,[r3,r0]
000030  32811001          ADDCC    r1,r1,#1              ;144
000034  320110ff          ANDCC    r1,r1,#0xff           ;144
000038  3020000e          EORCC    r0,r0,lr
00003c  3afffff8          BCC      |L1.36|
;;;147    	}
;;;148    if(r==0)r=0xFF;
000040  e49de004          POP      {lr}
000044  e3500000          CMP      r0,#0
000048  03a000ff          MOVEQ    r0,#0xff
;;;149    return r;	
;;;150    } 
00004c  e12fff1e          BX       lr
;;;151    
                          ENDP

                  CRC2_in PROC
;;;152    //-----------------------------------------------
;;;153    char CRC2_in(void)
000050  e59f2b78          LDR      r2,|L1.3024|
;;;154    {
000054  e52de004          PUSH     {lr}
;;;155    char r,j,lb;
;;;156    lb=(RXBUFF[1]&0x1f)+0x04;
000058  e5d21001          LDRB     r1,[r2,#1]  ; RXBUFF
;;;157    r=RXBUFF[0];
00005c  e5d20000          LDRB     r0,[r2,#0]  ; RXBUFF
;;;158    for(j=1;j<(lb+1);j++)
;;;159    	{
;;;160    	r=(RXBUFF[j]^Table95[r]);
000060  e59f3b70          LDR      r3,|L1.3032|
000064  e201101f          AND      r1,r1,#0x1f           ;156
000068  e281c004          ADD      r12,r1,#4             ;156
00006c  e3a01001          MOV      r1,#1                 ;158
000070  e28cc001          ADD      r12,r12,#1            ;158
                  |L1.116|
000074  e151000c          CMP      r1,r12                ;158
000078  37d2e001          LDRBCC   lr,[r2,r1]
00007c  37d30000          LDRBCC   r0,[r3,r0]
000080  32811001          ADDCC    r1,r1,#1              ;158
000084  320110ff          ANDCC    r1,r1,#0xff           ;158
000088  3020000e          EORCC    r0,r0,lr
00008c  3afffff8          BCC      |L1.116|
;;;161    	}
;;;162    if(r==0)r=0xFF;
000090  e49de004          POP      {lr}
000094  e3500000          CMP      r0,#0
000098  03a000ff          MOVEQ    r0,#0xff
;;;163    return r;	
;;;164    }  
00009c  e12fff1e          BX       lr
;;;165    
                          ENDP

                  can1_out_adr PROC
;;;194    //-----------------------------------------------
;;;195    void can1_out_adr(char* ptr,char num)
0000a0  e92d4ff0          PUSH     {r4-r11,lr}
;;;196    {
;;;197    
;;;198    if(num<=8)
;;;199    	{
;;;200    	can1_info[ptr_can1_tx_wr]=(((long)num)<<16)&0x000f0000UL;
0000a4  e59f7b30          LDR      r7,|L1.3036|
0000a8  e59f8b30          LDR      r8,|L1.3040|
0000ac  e5d72002          LDRB     r2,[r7,#2]
;;;201    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
0000b0  e2889020          ADD      r9,r8,#0x20
;;;202    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[0];
0000b4  e2895020          ADD      r5,r9,#0x20
;;;203    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[1];
;;;204    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[2];
;;;205    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[3];
;;;206    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[4];
;;;207    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[5];
;;;208    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[6];
;;;209    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[7];	
;;;210    	ptr_can1_tx_wr++;
0000b8  e2823001          ADD      r3,r2,#1
0000bc  e20340ff          AND      r4,r3,#0xff
0000c0  e2896040          ADD      r6,r9,#0x40           ;206
0000c4  e3510008          CMP      r1,#8                 ;198
0000c8  e3a0b09e          MOV      r11,#0x9e             ;201
;;;211    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;
0000cc  e3a0e000          MOV      lr,#0
0000d0  e0863102          ADD      r3,r6,r2,LSL #2       ;206
0000d4  e085c102          ADD      r12,r5,r2,LSL #2      ;202
0000d8  8a000017          BHI      |L1.316|
0000dc  e3a0a80f          MOV      r10,#0xf0000          ;200
0000e0  e00a1801          AND      r1,r10,r1,LSL #16     ;200
0000e4  e7881102          STR      r1,[r8,r2,LSL #2]     ;200
0000e8  e789b102          STR      r11,[r9,r2,LSL #2]    ;201
0000ec  e5d01000          LDRB     r1,[r0,#0]            ;202
0000f0  e3540008          CMP      r4,#8
0000f4  e7c51102          STRB     r1,[r5,r2,LSL #2]     ;202
0000f8  e5d01001          LDRB     r1,[r0,#1]            ;203
0000fc  e5cc1001          STRB     r1,[r12,#1]           ;203
000100  e5d01002          LDRB     r1,[r0,#2]            ;204
000104  e5cc1002          STRB     r1,[r12,#2]           ;204
000108  e5d01003          LDRB     r1,[r0,#3]            ;205
00010c  e5cc1003          STRB     r1,[r12,#3]           ;205
000110  e5d01004          LDRB     r1,[r0,#4]            ;206
000114  e7c61102          STRB     r1,[r6,r2,LSL #2]     ;206
000118  e5d01005          LDRB     r1,[r0,#5]            ;207
00011c  e5c31001          STRB     r1,[r3,#1]            ;207
000120  e5d01006          LDRB     r1,[r0,#6]            ;208
000124  e5c31002          STRB     r1,[r3,#2]            ;208
000128  e5d00007          LDRB     r0,[r0,#7]            ;209
00012c  e5c30003          STRB     r0,[r3,#3]            ;209
000130  e5c74002          STRB     r4,[r7,#2]            ;210  ; ptr_can1_tx_wr
000134  3a0000e6          BCC      |L1.1236|
000138  ea0000e4          B        |L1.1232|
                  |L1.316|
;;;212    	}
;;;213    	
;;;214    else if(num<=16)
00013c  e3510010          CMP      r1,#0x10
;;;215    	{
;;;216    	can1_info[ptr_can1_tx_wr]=(8UL<<16)&0x000f0000UL;
000140  e3a0a702          MOV      r10,#0x80000
000144  8a00002c          BHI      |L1.508|
000148  e788a102          STR      r10,[r8,r2,LSL #2]
;;;217    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
00014c  e789b102          STR      r11,[r9,r2,LSL #2]
;;;218    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[0];
000150  e5d0a000          LDRB     r10,[r0,#0]
;;;219    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[1];
;;;220    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[2];
;;;221    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[3];
;;;222    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[4];
;;;223    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[5];
;;;224    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[6];
;;;225    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[7];	
;;;226    	ptr_can1_tx_wr++;
;;;227    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;
000154  e3540008          CMP      r4,#8
;;;228    	
;;;229    	can1_info[ptr_can1_tx_wr]=(((long)(num-8))<<16)&0x000f0000UL;
000158  e2411008          SUB      r1,r1,#8
00015c  e7c5a102          STRB     r10,[r5,r2,LSL #2]    ;218
000160  e5d0a001          LDRB     r10,[r0,#1]           ;219
000164  e5cca001          STRB     r10,[r12,#1]          ;219
000168  e5d0a002          LDRB     r10,[r0,#2]           ;220
00016c  e5cca002          STRB     r10,[r12,#2]          ;220
000170  e5d0a003          LDRB     r10,[r0,#3]           ;221
000174  e5cca003          STRB     r10,[r12,#3]          ;221
000178  e5d0c004          LDRB     r12,[r0,#4]           ;222
00017c  e7c6c102          STRB     r12,[r6,r2,LSL #2]    ;222
000180  e5d02005          LDRB     r2,[r0,#5]            ;223
000184  e5c32001          STRB     r2,[r3,#1]            ;223
000188  e5d02006          LDRB     r2,[r0,#6]            ;224
00018c  e5c32002          STRB     r2,[r3,#2]            ;224
000190  e5d02007          LDRB     r2,[r0,#7]            ;225
000194  e5c32003          STRB     r2,[r3,#3]            ;225
000198  e3a0280f          MOV      r2,#0xf0000
00019c  e5c74002          STRB     r4,[r7,#2]            ;226  ; ptr_can1_tx_wr
0001a0  e0022801          AND      r2,r2,r1,LSL #16
0001a4  25c7e002          STRBCS   lr,[r7,#2]            ;227  ; ptr_can1_tx_wr
0001a8  e5d71002          LDRB     r1,[r7,#2]  ; ptr_can1_tx_wr
0001ac  e7882101          STR      r2,[r8,r1,LSL #2]
;;;230    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
0001b0  e789b101          STR      r11,[r9,r1,LSL #2]
;;;231    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[8];
0001b4  e5d02008          LDRB     r2,[r0,#8]
;;;232    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[9];
0001b8  e0853101          ADD      r3,r5,r1,LSL #2
0001bc  e7c52101          STRB     r2,[r5,r1,LSL #2]     ;231
0001c0  e5d02009          LDRB     r2,[r0,#9]
0001c4  e5c32001          STRB     r2,[r3,#1]
;;;233    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[10];
0001c8  e5d0200a          LDRB     r2,[r0,#0xa]
0001cc  e5c32002          STRB     r2,[r3,#2]
;;;234    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[11];
0001d0  e5d0200b          LDRB     r2,[r0,#0xb]
0001d4  e5c32003          STRB     r2,[r3,#3]
;;;235    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[12];
0001d8  e5d0200c          LDRB     r2,[r0,#0xc]
0001dc  e7c62101          STRB     r2,[r6,r1,LSL #2]
;;;236    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[13];
0001e0  e5d0300d          LDRB     r3,[r0,#0xd]
0001e4  e0862101          ADD      r2,r6,r1,LSL #2
0001e8  e5c23001          STRB     r3,[r2,#1]
;;;237    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[14];
0001ec  e5d0300e          LDRB     r3,[r0,#0xe]
0001f0  e5c23002          STRB     r3,[r2,#2]
;;;238    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[15];	
0001f4  e5d0000f          LDRB     r0,[r0,#0xf]
;;;239    	ptr_can1_tx_wr++;
;;;240    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;	
0001f8  ea0000ae          B        |L1.1208|
                  |L1.508|
;;;241    	}	
;;;242    
;;;243    else if(num<=24)
0001fc  e3510018          CMP      r1,#0x18
000200  8a000048          BHI      |L1.808|
;;;244    	{
;;;245    	can1_info[ptr_can1_tx_wr]=(8UL<<16)&0x000f0000UL;
000204  e3a0a702          MOV      r10,#0x80000
000208  e788a102          STR      r10,[r8,r2,LSL #2]
;;;246    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
00020c  e789b102          STR      r11,[r9,r2,LSL #2]
;;;247    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[0];
000210  e5d0a000          LDRB     r10,[r0,#0]
;;;248    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[1];
;;;249    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[2];
;;;250    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[3];
;;;251    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[4];
;;;252    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[5];
;;;253    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[6];
;;;254    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[7];	
;;;255    	ptr_can1_tx_wr++;
;;;256    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;
000214  e3540008          CMP      r4,#8
;;;257    
;;;258    	can1_info[ptr_can1_tx_wr]=(8UL<<16)&0x000f0000UL;
;;;259    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
;;;260    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[8];
;;;261    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[9];
;;;262    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[10];
;;;263    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[11];
;;;264    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[12];
;;;265    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[13];
;;;266    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[14];
;;;267    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[15];	
;;;268    	ptr_can1_tx_wr++;
;;;269    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;
;;;270    	
;;;271    	can1_info[ptr_can1_tx_wr]=(((long)(num-16))<<16)&0x000f0000UL;
000218  e2411010          SUB      r1,r1,#0x10
00021c  e7c5a102          STRB     r10,[r5,r2,LSL #2]    ;247
000220  e5d0a001          LDRB     r10,[r0,#1]           ;248
000224  e5cca001          STRB     r10,[r12,#1]          ;248
000228  e5d0a002          LDRB     r10,[r0,#2]           ;249
00022c  e5cca002          STRB     r10,[r12,#2]          ;249
000230  e5d0a003          LDRB     r10,[r0,#3]           ;250
000234  e5cca003          STRB     r10,[r12,#3]          ;250
000238  e5d0c004          LDRB     r12,[r0,#4]           ;251
00023c  e7c6c102          STRB     r12,[r6,r2,LSL #2]    ;251
000240  e5d02005          LDRB     r2,[r0,#5]            ;252
000244  e5c32001          STRB     r2,[r3,#1]            ;252
000248  e5d02006          LDRB     r2,[r0,#6]            ;253
00024c  e5c32002          STRB     r2,[r3,#2]            ;253
000250  e5d02007          LDRB     r2,[r0,#7]            ;254
000254  e5c32003          STRB     r2,[r3,#3]            ;254
000258  e5c74002          STRB     r4,[r7,#2]            ;255  ; ptr_can1_tx_wr
00025c  25c7e002          STRBCS   lr,[r7,#2]            ;256  ; ptr_can1_tx_wr
000260  e5d72002          LDRB     r2,[r7,#2]            ;258  ; ptr_can1_tx_wr
000264  e3a03702          MOV      r3,#0x80000           ;258
000268  e7883102          STR      r3,[r8,r2,LSL #2]     ;258
00026c  e789b102          STR      r11,[r9,r2,LSL #2]    ;259
000270  e5d03008          LDRB     r3,[r0,#8]            ;260
000274  e7c53102          STRB     r3,[r5,r2,LSL #2]     ;260
000278  e5d0c009          LDRB     r12,[r0,#9]           ;261
00027c  e0853102          ADD      r3,r5,r2,LSL #2       ;261
000280  e5c3c001          STRB     r12,[r3,#1]           ;261
000284  e5d0c00a          LDRB     r12,[r0,#0xa]         ;262
000288  e5c3c002          STRB     r12,[r3,#2]           ;262
00028c  e5d0c00b          LDRB     r12,[r0,#0xb]         ;263
000290  e5c3c003          STRB     r12,[r3,#3]           ;263
000294  e5d0300c          LDRB     r3,[r0,#0xc]          ;264
000298  e7c63102          STRB     r3,[r6,r2,LSL #2]     ;264
00029c  e5d0c00d          LDRB     r12,[r0,#0xd]         ;265
0002a0  e0863102          ADD      r3,r6,r2,LSL #2       ;265
0002a4  e2822001          ADD      r2,r2,#1              ;268
0002a8  e5c3c001          STRB     r12,[r3,#1]           ;265
0002ac  e5d0c00e          LDRB     r12,[r0,#0xe]         ;266
0002b0  e20220ff          AND      r2,r2,#0xff           ;268
0002b4  e3520008          CMP      r2,#8                 ;269
0002b8  e5c3c002          STRB     r12,[r3,#2]           ;266
0002bc  e5d0c00f          LDRB     r12,[r0,#0xf]         ;267
0002c0  e5c3c003          STRB     r12,[r3,#3]           ;267
0002c4  e5c72002          STRB     r2,[r7,#2]            ;268  ; ptr_can1_tx_wr
0002c8  e3a0280f          MOV      r2,#0xf0000
0002cc  e0022801          AND      r2,r2,r1,LSL #16
0002d0  25c7e002          STRBCS   lr,[r7,#2]            ;269  ; ptr_can1_tx_wr
0002d4  e5d71002          LDRB     r1,[r7,#2]  ; ptr_can1_tx_wr
0002d8  e7882101          STR      r2,[r8,r1,LSL #2]
;;;272    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
0002dc  e789b101          STR      r11,[r9,r1,LSL #2]
;;;273    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[16];
0002e0  e5d02010          LDRB     r2,[r0,#0x10]
;;;274    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[17];
0002e4  e0853101          ADD      r3,r5,r1,LSL #2
0002e8  e7c52101          STRB     r2,[r5,r1,LSL #2]     ;273
0002ec  e5d02011          LDRB     r2,[r0,#0x11]
0002f0  e5c32001          STRB     r2,[r3,#1]
;;;275    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[16];
0002f4  e5d02010          LDRB     r2,[r0,#0x10]
0002f8  e5c32002          STRB     r2,[r3,#2]
;;;276    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[19];
0002fc  e5d02013          LDRB     r2,[r0,#0x13]
000300  e5c32003          STRB     r2,[r3,#3]
;;;277    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[20];
000304  e5d02014          LDRB     r2,[r0,#0x14]
000308  e7c62101          STRB     r2,[r6,r1,LSL #2]
;;;278    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[21];
00030c  e5d03015          LDRB     r3,[r0,#0x15]
000310  e0862101          ADD      r2,r6,r1,LSL #2
000314  e5c23001          STRB     r3,[r2,#1]
;;;279    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[22];
000318  e5d03016          LDRB     r3,[r0,#0x16]
00031c  e5c23002          STRB     r3,[r2,#2]
;;;280    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[23];	
000320  e5d00017          LDRB     r0,[r0,#0x17]
;;;281    	ptr_can1_tx_wr++;
;;;282    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;	
000324  ea000063          B        |L1.1208|
                  |L1.808|
;;;283    	}	
;;;284    
;;;285    else if(num<=32)
000328  e3510020          CMP      r1,#0x20
00032c  8a000068          BHI      |L1.1236|
;;;286    	{
;;;287    	can1_info[ptr_can1_tx_wr]=(8UL<<16)&0x000f0000UL;
000330  e3a0a702          MOV      r10,#0x80000
000334  e788a102          STR      r10,[r8,r2,LSL #2]
;;;288    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
000338  e789b102          STR      r11,[r9,r2,LSL #2]
;;;289    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[0];
00033c  e5d0a000          LDRB     r10,[r0,#0]
;;;290    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[1];
;;;291    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[2];
;;;292    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[3];
;;;293    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[4];
;;;294    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[5];
;;;295    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[6];
;;;296    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[7];	
;;;297    	ptr_can1_tx_wr++;
;;;298    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;
000340  e3540008          CMP      r4,#8
000344  e7c5a102          STRB     r10,[r5,r2,LSL #2]    ;289
000348  e5d0a001          LDRB     r10,[r0,#1]           ;290
00034c  e5cca001          STRB     r10,[r12,#1]          ;290
000350  e5d0a002          LDRB     r10,[r0,#2]           ;291
000354  e5cca002          STRB     r10,[r12,#2]          ;291
000358  e5d0a003          LDRB     r10,[r0,#3]           ;292
00035c  e5cca003          STRB     r10,[r12,#3]          ;292
000360  e5d0c004          LDRB     r12,[r0,#4]           ;293
000364  e7c6c102          STRB     r12,[r6,r2,LSL #2]    ;293
000368  e5d02005          LDRB     r2,[r0,#5]            ;294
00036c  e5c32001          STRB     r2,[r3,#1]            ;294
000370  e5d02006          LDRB     r2,[r0,#6]            ;295
000374  e5c32002          STRB     r2,[r3,#2]            ;295
000378  e5d02007          LDRB     r2,[r0,#7]            ;296
00037c  e5c32003          STRB     r2,[r3,#3]            ;296
000380  e5c74002          STRB     r4,[r7,#2]            ;297  ; ptr_can1_tx_wr
000384  25c7e002          STRBCS   lr,[r7,#2]  ; ptr_can1_tx_wr
;;;299    
;;;300    	can1_info[ptr_can1_tx_wr]=(8UL<<16)&0x000f0000UL;
000388  e5d72002          LDRB     r2,[r7,#2]  ; ptr_can1_tx_wr
00038c  e3a03702          MOV      r3,#0x80000
000390  e7883102          STR      r3,[r8,r2,LSL #2]
;;;301    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
000394  e789b102          STR      r11,[r9,r2,LSL #2]
;;;302    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[8];
000398  e5d0c008          LDRB     r12,[r0,#8]
00039c  e7c5c102          STRB     r12,[r5,r2,LSL #2]
;;;303    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[9];
0003a0  e5d04009          LDRB     r4,[r0,#9]
0003a4  e085c102          ADD      r12,r5,r2,LSL #2
0003a8  e5cc4001          STRB     r4,[r12,#1]
;;;304    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[10];
0003ac  e5d0400a          LDRB     r4,[r0,#0xa]
0003b0  e5cc4002          STRB     r4,[r12,#2]
;;;305    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[11];
0003b4  e5d0400b          LDRB     r4,[r0,#0xb]
0003b8  e5cc4003          STRB     r4,[r12,#3]
;;;306    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[12];
0003bc  e5d0c00c          LDRB     r12,[r0,#0xc]
0003c0  e7c6c102          STRB     r12,[r6,r2,LSL #2]
;;;307    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[13];
0003c4  e5d0400d          LDRB     r4,[r0,#0xd]
0003c8  e086c102          ADD      r12,r6,r2,LSL #2
;;;308    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[14];
;;;309    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[15];	
;;;310    	ptr_can1_tx_wr++;
0003cc  e2822001          ADD      r2,r2,#1
0003d0  e5cc4001          STRB     r4,[r12,#1]           ;307
0003d4  e5d0400e          LDRB     r4,[r0,#0xe]          ;308
0003d8  e20220ff          AND      r2,r2,#0xff
;;;311    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;
0003dc  e3520008          CMP      r2,#8
0003e0  e5cc4002          STRB     r4,[r12,#2]           ;308
0003e4  e5d0400f          LDRB     r4,[r0,#0xf]          ;309
0003e8  e5cc4003          STRB     r4,[r12,#3]           ;309
0003ec  e5c72002          STRB     r2,[r7,#2]            ;310  ; ptr_can1_tx_wr
0003f0  25c7e002          STRBCS   lr,[r7,#2]  ; ptr_can1_tx_wr
;;;312    	
;;;313    	can1_info[ptr_can1_tx_wr]=(8UL<<16)&0x000f0000UL;
0003f4  e5d72002          LDRB     r2,[r7,#2]  ; ptr_can1_tx_wr
0003f8  e7883102          STR      r3,[r8,r2,LSL #2]
;;;314    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
0003fc  e789b102          STR      r11,[r9,r2,LSL #2]
;;;315    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[16];
000400  e5d03010          LDRB     r3,[r0,#0x10]
000404  e7c53102          STRB     r3,[r5,r2,LSL #2]
;;;316    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[17];
000408  e5d0c011          LDRB     r12,[r0,#0x11]
00040c  e0853102          ADD      r3,r5,r2,LSL #2
000410  e5c3c001          STRB     r12,[r3,#1]
;;;317    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[18];
000414  e5d0c012          LDRB     r12,[r0,#0x12]
000418  e5c3c002          STRB     r12,[r3,#2]
;;;318    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[19];
00041c  e5d0c013          LDRB     r12,[r0,#0x13]
000420  e5c3c003          STRB     r12,[r3,#3]
;;;319    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[20];
000424  e5d03014          LDRB     r3,[r0,#0x14]
000428  e7c63102          STRB     r3,[r6,r2,LSL #2]
;;;320    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[21];
00042c  e5d0c015          LDRB     r12,[r0,#0x15]
000430  e0863102          ADD      r3,r6,r2,LSL #2
;;;321    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[22];
;;;322    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[23];	
;;;323    	ptr_can1_tx_wr++;
000434  e2822001          ADD      r2,r2,#1
000438  e5c3c001          STRB     r12,[r3,#1]           ;320
00043c  e5d0c016          LDRB     r12,[r0,#0x16]        ;321
000440  e20220ff          AND      r2,r2,#0xff
;;;324    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;
000444  e3520008          CMP      r2,#8
000448  e5c3c002          STRB     r12,[r3,#2]           ;321
00044c  e5d0c017          LDRB     r12,[r0,#0x17]        ;322
000450  e5c3c003          STRB     r12,[r3,#3]           ;322
000454  e5c72002          STRB     r2,[r7,#2]            ;323  ; ptr_can1_tx_wr
000458  25c7e002          STRBCS   lr,[r7,#2]  ; ptr_can1_tx_wr
;;;325    	
;;;326    	can1_info[ptr_can1_tx_wr]=(((long)(num-24))<<16)&0x000f0000UL;
00045c  e2411018          SUB      r1,r1,#0x18
000460  e3a0280f          MOV      r2,#0xf0000
000464  e0022801          AND      r2,r2,r1,LSL #16
000468  e5d71002          LDRB     r1,[r7,#2]  ; ptr_can1_tx_wr
00046c  e7882101          STR      r2,[r8,r1,LSL #2]
;;;327    	can1_id[ptr_can1_tx_wr]=0x0000009eUL;
000470  e789b101          STR      r11,[r9,r1,LSL #2]
;;;328    	*((char*)&can1_data[ptr_can1_tx_wr])=ptr[24];
000474  e5d02018          LDRB     r2,[r0,#0x18]
;;;329    	*(((char*)&can1_data[ptr_can1_tx_wr])+1)=ptr[25];
000478  e0853101          ADD      r3,r5,r1,LSL #2
00047c  e7c52101          STRB     r2,[r5,r1,LSL #2]     ;328
000480  e5d02019          LDRB     r2,[r0,#0x19]
000484  e5c32001          STRB     r2,[r3,#1]
;;;330    	*(((char*)&can1_data[ptr_can1_tx_wr])+2)=ptr[26];
000488  e5d0201a          LDRB     r2,[r0,#0x1a]
00048c  e5c32002          STRB     r2,[r3,#2]
;;;331    	*(((char*)&can1_data[ptr_can1_tx_wr])+3)=ptr[27];
000490  e5d0201b          LDRB     r2,[r0,#0x1b]
000494  e5c32003          STRB     r2,[r3,#3]
;;;332    	*((char*)&can1_datb[ptr_can1_tx_wr])=ptr[28];
000498  e5d0201c          LDRB     r2,[r0,#0x1c]
00049c  e7c62101          STRB     r2,[r6,r1,LSL #2]
;;;333    	*(((char*)&can1_datb[ptr_can1_tx_wr])+1)=ptr[29];
0004a0  e5d0301d          LDRB     r3,[r0,#0x1d]
0004a4  e0862101          ADD      r2,r6,r1,LSL #2
0004a8  e5c23001          STRB     r3,[r2,#1]
;;;334    	*(((char*)&can1_datb[ptr_can1_tx_wr])+2)=ptr[30];
0004ac  e5d0301e          LDRB     r3,[r0,#0x1e]
0004b0  e5c23002          STRB     r3,[r2,#2]
;;;335    	*(((char*)&can1_datb[ptr_can1_tx_wr])+3)=ptr[31];	
0004b4  e5d0001f          LDRB     r0,[r0,#0x1f]
                  |L1.1208|
0004b8  e5c20003          STRB     r0,[r2,#3]
;;;336    	ptr_can1_tx_wr++;
0004bc  e2810001          ADD      r0,r1,#1
0004c0  e20000ff          AND      r0,r0,#0xff
;;;337    	if(ptr_can1_tx_wr>=8)ptr_can1_tx_wr=0;	
0004c4  e3500008          CMP      r0,#8
0004c8  e5c70002          STRB     r0,[r7,#2]            ;336  ; ptr_can1_tx_wr
0004cc  3a000000          BCC      |L1.1236|
                  |L1.1232|
0004d0  e5c7e002          STRB     lr,[r7,#2]  ; ptr_can1_tx_wr
                  |L1.1236|
;;;338    	}	
;;;339    
;;;340    
;;;341    if(bOUT_FREE)
0004d4  e5d70000          LDRB     r0,[r7,#0]  ; bOUT_FREE
0004d8  e3500000          CMP      r0,#0
0004dc  0a000011          BEQ      |L1.1320|
;;;342    	{
;;;343    	C1TFI1=can1_info[ptr_can1_tx_rd];
0004e0  e5d70003          LDRB     r0,[r7,#3]  ; ptr_can1_tx_rd
0004e4  e59f16f8          LDR      r1,|L1.3044|
0004e8  e7982100          LDR      r2,[r8,r0,LSL #2]
0004ec  e5812030          STR      r2,[r1,#0x30]
;;;344         C1TID1=can1_id[ptr_can1_tx_rd];
0004f0  e7992100          LDR      r2,[r9,r0,LSL #2]
0004f4  e5812034          STR      r2,[r1,#0x34]
;;;345         C1TDA1=can1_data[ptr_can1_tx_rd];
0004f8  e7952100          LDR      r2,[r5,r0,LSL #2]
0004fc  e5812038          STR      r2,[r1,#0x38]
;;;346         C1TDB1=can1_datb[ptr_can1_tx_rd];
000500  e7962100          LDR      r2,[r6,r0,LSL #2]
000504  e581203c          STR      r2,[r1,#0x3c]
;;;347         C1CMR=0x00000021;
000508  e3a02021          MOV      r2,#0x21
00050c  e5812004          STR      r2,[r1,#4]
;;;348         ptr_can1_tx_rd++;
000510  e2800001          ADD      r0,r0,#1
000514  e20000ff          AND      r0,r0,#0xff
;;;349         if(ptr_can1_tx_rd>=8)ptr_can1_tx_rd=0;
000518  e3500008          CMP      r0,#8
00051c  e5c70003          STRB     r0,[r7,#3]            ;348  ; ptr_can1_tx_rd
000520  25c7e003          STRBCS   lr,[r7,#3]  ; ptr_can1_tx_rd
;;;350         bOUT_FREE=0;	
000524  e5c7e000          STRB     lr,[r7,#0]  ; bOUT_FREE
                  |L1.1320|
;;;351    	}
;;;352    
;;;353    }	
000528  e8bd4ff0          POP      {r4-r11,lr}
00052c  e12fff1e          BX       lr
;;;354    
                          ENDP

                  can2_out PROC
;;;355    //-----------------------------------------------
;;;356    void can2_out(char data0,char data1,char data2,char data3,char data4,char data5,char data6,char data7)
000530  e92d4ff0          PUSH     {r4-r11,lr}
;;;357    {
;;;358    
;;;359    can2_info[ptr_can2_tx_wr]=((8UL)<<16)&0x000f0000UL;
000534  e59fe6a0          LDR      lr,|L1.3036|
000538  e28db024          ADD      r11,sp,#0x24
00053c  e89b0f00          LDM      r11,{r8-r11}
000540  e59f56a0          LDR      r5,|L1.3048|
000544  e5dec004          LDRB     r12,[lr,#4]  ; ptr_can2_tx_wr
000548  e3a04702          MOV      r4,#0x80000
;;;360    can2_id[ptr_can2_tx_wr]=0x0000009eUL;
00054c  e2857020          ADD      r7,r5,#0x20
000550  e785410c          STR      r4,[r5,r12,LSL #2]    ;359
000554  e3a0609e          MOV      r6,#0x9e
;;;361    *((char*)&can2_data[ptr_can2_tx_wr])=data0;
000558  e2874020          ADD      r4,r7,#0x20
00055c  e787610c          STR      r6,[r7,r12,LSL #2]    ;360
000560  e7c4010c          STRB     r0,[r4,r12,LSL #2]
;;;362    *(((char*)&can2_data[ptr_can2_tx_wr])+1)=data1;
000564  e084010c          ADD      r0,r4,r12,LSL #2
000568  e5c01001          STRB     r1,[r0,#1]
;;;363    *(((char*)&can2_data[ptr_can2_tx_wr])+2)=data2;
00056c  e5c02002          STRB     r2,[r0,#2]
;;;364    *(((char*)&can2_data[ptr_can2_tx_wr])+3)=data3;
000570  e5c03003          STRB     r3,[r0,#3]
;;;365    *((char*)&can2_datb[ptr_can2_tx_wr])=data4;
000574  e2872040          ADD      r2,r7,#0x40
;;;366    *(((char*)&can2_datb[ptr_can2_tx_wr])+1)=data5;
000578  e082010c          ADD      r0,r2,r12,LSL #2
00057c  e7c2810c          STRB     r8,[r2,r12,LSL #2]    ;365
000580  e5c09001          STRB     r9,[r0,#1]
;;;367    *(((char*)&can2_datb[ptr_can2_tx_wr])+2)=data6;
000584  e5c0a002          STRB     r10,[r0,#2]
;;;368    *(((char*)&can2_datb[ptr_can2_tx_wr])+3)=data7;	
000588  e5c0b003          STRB     r11,[r0,#3]
;;;369    ptr_can2_tx_wr++;
00058c  e28c0001          ADD      r0,r12,#1
000590  e20000ff          AND      r0,r0,#0xff
;;;370    if(ptr_can2_tx_wr>=8)ptr_can2_tx_wr=0;
000594  e3500008          CMP      r0,#8
000598  e3a03000          MOV      r3,#0
00059c  e5ce0004          STRB     r0,[lr,#4]            ;369  ; ptr_can2_tx_wr
0005a0  25ce3004          STRBCS   r3,[lr,#4]  ; ptr_can2_tx_wr
;;;371    
;;;372    
;;;373    
;;;374    if(bOUT_FREE2)
0005a4  e5de0001          LDRB     r0,[lr,#1]  ; bOUT_FREE2
0005a8  e3500000          CMP      r0,#0
0005ac  0a000011          BEQ      |L1.1528|
;;;375    	{
;;;376    	C2TFI1=can2_info[ptr_can2_tx_rd];
0005b0  e5de0005          LDRB     r0,[lr,#5]  ; ptr_can2_tx_rd
0005b4  e59f1630          LDR      r1,|L1.3052|
0005b8  e795c100          LDR      r12,[r5,r0,LSL #2]
0005bc  e581c030          STR      r12,[r1,#0x30]
;;;377         C2TID1=can2_id[ptr_can2_tx_rd];
0005c0  e797c100          LDR      r12,[r7,r0,LSL #2]
0005c4  e581c034          STR      r12,[r1,#0x34]
;;;378         C2TDA1=can2_data[ptr_can2_tx_rd];
0005c8  e794c100          LDR      r12,[r4,r0,LSL #2]
0005cc  e581c038          STR      r12,[r1,#0x38]
;;;379         C2TDB1=can2_datb[ptr_can2_tx_rd];
0005d0  e7922100          LDR      r2,[r2,r0,LSL #2]
0005d4  e581203c          STR      r2,[r1,#0x3c]
;;;380         C2CMR=0x00000021;
0005d8  e3a02021          MOV      r2,#0x21
0005dc  e5812004          STR      r2,[r1,#4]
;;;381         ptr_can2_tx_rd++;
0005e0  e2800001          ADD      r0,r0,#1
0005e4  e20000ff          AND      r0,r0,#0xff
;;;382         if(ptr_can2_tx_rd>=8)ptr_can2_tx_rd=0;
0005e8  e3500008          CMP      r0,#8
0005ec  e5ce0005          STRB     r0,[lr,#5]            ;381  ; ptr_can2_tx_rd
0005f0  25ce3005          STRBCS   r3,[lr,#5]  ; ptr_can2_tx_rd
;;;383         bOUT_FREE2=0;	
0005f4  e5ce3001          STRB     r3,[lr,#1]  ; bOUT_FREE2
                  |L1.1528|
;;;384    	}
;;;385    
;;;386    }	
0005f8  e8bd4ff0          POP      {r4-r11,lr}
0005fc  e12fff1e          BX       lr
;;;387    
                          ENDP

                  can_in_an PROC
;;;397    //-----------------------------------------------
;;;398    void can_in_an(void)
000600  e59f05d4          LDR      r0,|L1.3036|
;;;399    {
;;;400    if(!bIN) goto CAN_IN_AN_end; 
;;;401    
;;;402    
;;;403    CAN_IN_AN_end:
;;;404    bIN=0;
000604  e3a01000          MOV      r1,#0
000608  e5c01007          STRB     r1,[r0,#7]  ; bIN
;;;405    }
00060c  e12fff1e          BX       lr
;;;406    
                          ENDP

                  can_in_an2 PROC
;;;407    //-----------------------------------------------
;;;408    void can_in_an2(void)
000610  e92d47f0          PUSH     {r4-r10,lr}
;;;409    {
;;;410    //char i;
;;;411    //signed short temp_SS;
;;;412    char slave_num;
;;;413    
;;;414    if(!bIN2) goto CAN_IN_AN2_end; 
000614  e59f75c0          LDR      r7,|L1.3036|
000618  e3a05000          MOV      r5,#0
00061c  e5d70008          LDRB     r0,[r7,#8]  ; bIN2
000620  e3500000          CMP      r0,#0
000624  0a000063          BEQ      |L1.1976|
;;;415    
;;;416    
;;;417    
;;;418    if((RXBUFF2[0]==sub_ind1)&&(RXBUFF2[1]==PUTID)&&(RXBUFF2[2]==0xdd)&&(RXBUFF2[3]==0xdd)&&(sub_ind==6))
000628  e59f65c0          LDR      r6,|L1.3056|
00062c  e59f05c0          LDR      r0,|L1.3060|
000630  e5d61000          LDRB     r1,[r6,#0]  ; RXBUFF2
000634  e1d020d2          LDRSB    r2,[r0,#2]  ; aa
000638  e1510002          CMP      r1,r2
00063c  05d61001          LDRBEQ   r1,[r6,#1]  ; RXBUFF2
000640  03510091          CMPEQ    r1,#0x91
000644  1a00000b          BNE      |L1.1656|
000648  e5d61002          LDRB     r1,[r6,#2]  ; RXBUFF2
00064c  e35100dd          CMP      r1,#0xdd
000650  05d61003          LDRBEQ   r1,[r6,#3]  ; RXBUFF2
000654  035100dd          CMPEQ    r1,#0xdd
000658  05d00001          LDRBEQ   r0,[r0,#1]  ; aa
00065c  03500006          CMPEQ    r0,#6
000660  1a000054          BNE      |L1.1976|
;;;419    	{
;;;420    	mess_send(MESS2IND_HNDL,PARAM_U_AVT_GOOD,0,10);
000664  e3a0300a          MOV      r3,#0xa
000668  e3a02000          MOV      r2,#0
00066c  e3a010d9          MOV      r1,#0xd9
000670  e3a000d7          MOV      r0,#0xd7
000674  ebfffffe          BL       mess_send
                  |L1.1656|
;;;421    	}
;;;422    
;;;423    
;;;424    if((RXBUFF2[1]==PUTTM1)&&((RXBUFF2[0]&0x1f)>=0)&&((RXBUFF2[0]&0x1f)<20))
000678  e5d60001          LDRB     r0,[r6,#1]  ; RXBUFF2
;;;425         {
;;;426         slave_num=RXBUFF2[0]&0x1f;
;;;427         
;;;428         if((RXBUFF2[0]&0xe0)==0)bps[slave_num]._device=dSRC;
00067c  e59f4574          LDR      r4,|L1.3064|
000680  e3a09003          MOV      r9,#3
000684  e35000da          CMP      r0,#0xda              ;424
;;;429         else if((RXBUFF2[0]&0xe0)==0x40)bps[slave_num]._device=dINV;
000688  e3a0a005          MOV      r10,#5
00068c  e3a0800a          MOV      r8,#0xa               ;420
000690  1a000025          BNE      |L1.1836|
000694  e5d61000          LDRB     r1,[r6,#0]            ;424  ; RXBUFF2
000698  e201001f          AND      r0,r1,#0x1f           ;424
00069c  e3500014          CMP      r0,#0x14              ;424
0006a0  2a000044          BCS      |L1.1976|
0006a4  e31100e0          TST      r1,#0xe0              ;428
0006a8  e201001f          AND      r0,r1,#0x1f           ;426
0006ac  00601180          RSBEQ    r1,r0,r0,LSL #3       ;428
0006b0  00811081          ADDEQ    r1,r1,r1,LSL #1       ;428
0006b4  07c49101          STRBEQ   r9,[r4,r1,LSL #2]     ;428
0006b8  0a000004          BEQ      |L1.1744|
0006bc  e20110e0          AND      r1,r1,#0xe0
0006c0  e3510040          CMP      r1,#0x40
0006c4  00601180          RSBEQ    r1,r0,r0,LSL #3
0006c8  00811081          ADDEQ    r1,r1,r1,LSL #1
0006cc  07c4a101          STRBEQ   r10,[r4,r1,LSL #2]
                  |L1.1744|
;;;430         	
;;;431    	bps[slave_num]._buff[0]=RXBUFF2[2]; 
0006d0  e5d62002          LDRB     r2,[r6,#2]  ; RXBUFF2
0006d4  e0601180          RSB      r1,r0,r0,LSL #3
0006d8  e0811081          ADD      r1,r1,r1,LSL #1
0006dc  e0841101          ADD      r1,r4,r1,LSL #2
0006e0  e5c12006          STRB     r2,[r1,#6]
;;;432    	bps[slave_num]._buff[1]=RXBUFF2[3];
0006e4  e5d62003          LDRB     r2,[r6,#3]  ; RXBUFF2
0006e8  e5c12007          STRB     r2,[r1,#7]
;;;433    	bps[slave_num]._buff[2]=RXBUFF2[4];
0006ec  e5d62004          LDRB     r2,[r6,#4]  ; RXBUFF2
0006f0  e5c12008          STRB     r2,[r1,#8]
;;;434    	bps[slave_num]._buff[3]=RXBUFF2[5];
0006f4  e5d62005          LDRB     r2,[r6,#5]  ; RXBUFF2
0006f8  e5c12009          STRB     r2,[r1,#9]
;;;435    	bps[slave_num]._buff[4]=RXBUFF2[6];
0006fc  e5d62006          LDRB     r2,[r6,#6]  ; RXBUFF2
000700  e5c1200a          STRB     r2,[r1,#0xa]
;;;436    	bps[slave_num]._buff[5]=RXBUFF2[7];
000704  e5d62007          LDRB     r2,[r6,#7]  ; RXBUFF2
000708  e5c1200b          STRB     r2,[r1,#0xb]
;;;437    	
;;;438    	bps[slave_num]._cnt=0;
00070c  e5c15003          STRB     r5,[r1,#3]
;;;439    	bps[slave_num]._is_on_cnt=10;
000710  e5c18034          STRB     r8,[r1,#0x34]
;;;440    	
;;;441     	if((bps[slave_num]._cnt==0)&&(bps[slave_num]._av&(1<<3))) avar_bps_hndl(slave_num,3,0);
000714  e5d11001          LDRB     r1,[r1,#1]
000718  e3110008          TST      r1,#8
00071c  0a000025          BEQ      |L1.1976|
000720  e3a02000          MOV      r2,#0
000724  e3a01003          MOV      r1,#3
000728  ebfffffe          BL       avar_bps_hndl
                  |L1.1836|
;;;442         }
;;;443    
;;;444    if((RXBUFF2[1]==PUTTM2)&&((RXBUFF2[0]&0x1f)>=0)&&((RXBUFF2[0]&0x1f)<9))
00072c  e5d60001          LDRB     r0,[r6,#1]  ; RXBUFF2
000730  e35000db          CMP      r0,#0xdb
000734  1a00001f          BNE      |L1.1976|
000738  e5d60000          LDRB     r0,[r6,#0]  ; RXBUFF2
00073c  e200101f          AND      r1,r0,#0x1f
000740  e3510009          CMP      r1,#9
000744  2a00001b          BCS      |L1.1976|
;;;445         {
;;;446         slave_num=RXBUFF2[0]&0x1f;  
;;;447    
;;;448         if((RXBUFF2[0]&0xe0)==0)bps[slave_num]._device=dSRC;
000748  e31000e0          TST      r0,#0xe0
00074c  e200101f          AND      r1,r0,#0x1f           ;446
000750  00610181          RSBEQ    r0,r1,r1,LSL #3
000754  00800080          ADDEQ    r0,r0,r0,LSL #1
000758  07c49100          STRBEQ   r9,[r4,r0,LSL #2]
00075c  0a000004          BEQ      |L1.1908|
;;;449         else if((RXBUFF2[0]&0xe0)==0x40)bps[slave_num]._device=dINV;
000760  e20000e0          AND      r0,r0,#0xe0
000764  e3500040          CMP      r0,#0x40
000768  00610181          RSBEQ    r0,r1,r1,LSL #3
00076c  00800080          ADDEQ    r0,r0,r0,LSL #1
000770  07c4a100          STRBEQ   r10,[r4,r0,LSL #2]
                  |L1.1908|
;;;450         
;;;451    	bps[slave_num]._buff[6]=RXBUFF2[2]; 
000774  e5d62002          LDRB     r2,[r6,#2]  ; RXBUFF2
000778  e0610181          RSB      r0,r1,r1,LSL #3
00077c  e0800080          ADD      r0,r0,r0,LSL #1
000780  e0840100          ADD      r0,r4,r0,LSL #2
000784  e5c0200c          STRB     r2,[r0,#0xc]
;;;452    	bps[slave_num]._buff[7]=RXBUFF2[3];
000788  e5d61003          LDRB     r1,[r6,#3]  ; RXBUFF2
00078c  e5c0100d          STRB     r1,[r0,#0xd]
;;;453    	bps[slave_num]._buff[8]=RXBUFF2[4];
000790  e5d61004          LDRB     r1,[r6,#4]  ; RXBUFF2
000794  e5c0100e          STRB     r1,[r0,#0xe]
;;;454    	bps[slave_num]._buff[9]=RXBUFF2[5];
000798  e5d61005          LDRB     r1,[r6,#5]  ; RXBUFF2
00079c  e5c0100f          STRB     r1,[r0,#0xf]
;;;455    	bps[slave_num]._buff[10]=RXBUFF2[6];
0007a0  e5d61006          LDRB     r1,[r6,#6]  ; RXBUFF2
0007a4  e5c01010          STRB     r1,[r0,#0x10]
;;;456    	bps[slave_num]._buff[11]=RXBUFF2[7];
0007a8  e5d61007          LDRB     r1,[r6,#7]  ; RXBUFF2
0007ac  e5c01011          STRB     r1,[r0,#0x11]
;;;457    	
;;;458    	bps[slave_num]._cnt=0;
0007b0  e5c05003          STRB     r5,[r0,#3]
;;;459    	bps[slave_num]._is_on_cnt=10; 
0007b4  e5c08034          STRB     r8,[r0,#0x34]
                  |L1.1976|
;;;460    
;;;461       	//if((src[slave_num]._cnt==0)&&(src[slave_num]._av_net)) avar_s_hndl(slave_num,3,0); 
;;;462         }
;;;463    
;;;464    
;;;465    
;;;466    CAN_IN_AN2_end:
;;;467    bIN2=0;
0007b8  e5c75008          STRB     r5,[r7,#8]  ; bIN2
;;;468    }
0007bc  e8bd47f0          POP      {r4-r10,lr}
0007c0  e12fff1e          BX       lr
;;;469      
                          ENDP

                  can_isr_rx PROC
;;;475    ***************************************************************************/ 
;;;476    __irq void can_isr_rx (void) 
0007c4  e92d5fff          PUSH     {r0-r12,lr}
;;;477    {
;;;478    unsigned int buf;
;;;479    unsigned int *pDest;
;;;480    char temp;
;;;481    char *ptr,j;
;;;482    //can_cnt++;
;;;483    
;;;484    rotor_can[0]++;
0007c8  e59f042c          LDR      r0,|L1.3068|
;;;485     if(C1ICR & 0x00000001L)
0007cc  e59f5410          LDR      r5,|L1.3044|
0007d0  e1d010b0          LDRH     r1,[r0,#0]            ;484  ; rotor_can
0007d4  e2811001          ADD      r1,r1,#1              ;484
0007d8  e1c010b0          STRH     r1,[r0,#0]            ;484  ; rotor_can
0007dc  e595000c          LDR      r0,[r5,#0xc]
;;;486    	{
;;;487    	if (!(C1RFS & 0xC0000400L))
0007e0  e59f7418          LDR      r7,|L1.3072|
;;;488        		{ // 11-bit ID, no RTR, matched a filter
;;;489    
;;;490        		//rotor_can[1]++;
;;;491        		// initialize destination pointer
;;;492        		// filter number is in lower 10 bits of C1RFS
;;;493        		pDest = (unsigned int *) &(gFullCANList[(C1RFS & 0x000003FFL)].Dat1);
;;;494        
;;;495        		// calculate contents for first entry into FullCAN list
;;;496        		buf = C1RFS & 0xC00F0000L; // mask FF, RTR and DLC
0007e4  e59f8418          LDR      r8,|L1.3076|
0007e8  e59f9418          LDR      r9,|L1.3080|
;;;497        		buf |= 0x01002000L; // set semaphore to 01b and CAN port to 1
;;;498        		buf |= C1RID & 0x000007FFL; // get CAN message ID
;;;499    
;;;500        		// now copy entire message to FullCAN list
;;;501        		*pDest = buf; 
;;;502        		pDest++; // set to gFullCANList[(C1RFS & 0x000003FFL)].DatA
;;;503        		*pDest = C1RDA; 
;;;504        		pDest++; // set to gFullCANList[(C1RFS & 0x000003FFL)].DatB
;;;505        		*pDest = C1RDB; 
;;;506    
;;;507        		// now set the sempahore to complete
;;;508        		buf |= 0x03000000L; // set semaphore to 11b
;;;509        		pDest -= 2; // set to gFullCANList[(C1RFS & 0x000003FFL)].Dat1
;;;510        		*pDest = buf; 
;;;511        
;;;512    		temp=(char)gFullCANList[0].DatA;
;;;513    		if(temp==0x30) bR=0;
0007ec  e59f43e8          LDR      r4,|L1.3036|
0007f0  e3100001          TST      r0,#1                 ;485
0007f4  e3a0b000          MOV      r11,#0
0007f8  0a000048          BEQ      |L1.2336|
0007fc  e5950020          LDR      r0,[r5,#0x20]         ;487
000800  e1100007          TST      r0,r7                 ;487
000804  1a000043          BNE      |L1.2328|
000808  e5950020          LDR      r0,[r5,#0x20]         ;493
00080c  e1c009c5          BIC      r0,r0,r5,ASR #19      ;493
000810  e0800080          ADD      r0,r0,r0,LSL #1       ;493
000814  e0891100          ADD      r1,r9,r0,LSL #2       ;493
000818  e5950020          LDR      r0,[r5,#0x20]         ;496
00081c  e5952024          LDR      r2,[r5,#0x24]         ;498
000820  e0000008          AND      r0,r0,r8              ;496
000824  e3800401          ORR      r0,r0,#0x1000000      ;497
000828  e3800a02          ORR      r0,r0,#0x2000         ;497
00082c  e1c229c7          BIC      r2,r2,r7,ASR #19      ;498
000830  e1800002          ORR      r0,r0,r2              ;498
000834  e4810004          STR      r0,[r1],#4            ;503
000838  e5953028          LDR      r3,[r5,#0x28]         ;503
00083c  e2812004          ADD      r2,r1,#4              ;504
000840  e4013004          STR      r3,[r1],#-4           ;505
000844  e595302c          LDR      r3,[r5,#0x2c]         ;505
000848  e3800403          ORR      r0,r0,#0x3000000      ;508
00084c  e5823000          STR      r3,[r2,#0]            ;510
000850  e5810000          STR      r0,[r1,#0]            ;512
000854  e5990004          LDR      r0,[r9,#4]            ;512  ; gFullCANList
000858  e20000ff          AND      r0,r0,#0xff           ;512
00085c  e3500030          CMP      r0,#0x30
;;;514    		else bR++;
000860  15d40006          LDRBNE   r0,[r4,#6]  ; bR
000864  12800001          ADDNE    r0,r0,#1
000868  15c40006          STRBNE   r0,[r4,#6]  ; bR
00086c  05c4b006          STRBEQ   r11,[r4,#6]           ;513  ; bR
;;;515    	
;;;516    		temp=(char)(((gFullCANList[0].Dat1)>>16)&0x0f); 
000870  e5991000          LDR      r1,[r9,#0]  ; gFullCANList
;;;517         
;;;518         	ptr=(char*)(&gFullCANList[0].DatA);
;;;519    	
;;;520    		if(!bR)
;;;521    			{
;;;522    			for(j=0;j<temp;j++)
;;;523    				{
;;;524    				RXBUFF[j]=*ptr;
000874  e59f6354          LDR      r6,|L1.3024|
000878  e1a01601          LSL      r1,r1,#12             ;516
00087c  e1a02e21          LSR      r2,r1,#28             ;516
000880  e5d41006          LDRB     r1,[r4,#6]            ;520  ; bR
000884  e2890004          ADD      r0,r9,#4              ;518
000888  e3510000          CMP      r1,#0                 ;520
00088c  1a000006          BNE      |L1.2220|
                  |L1.2192|
000890  e1510002          CMP      r1,r2                 ;522
000894  34d03001          LDRBCC   r3,[r0],#1
000898  37c63001          STRBCC   r3,[r6,r1]
00089c  32811001          ADDCC    r1,r1,#1              ;522
0008a0  320110ff          ANDCC    r1,r1,#0xff           ;522
0008a4  3afffff9          BCC      |L1.2192|
0008a8  ea000009          B        |L1.2260|
                  |L1.2220|
;;;525    				ptr++;
;;;526    				}
;;;527    			}
;;;528    		else if(bR==1)
0008ac  e3510001          CMP      r1,#1
0008b0  1a000007          BNE      |L1.2260|
;;;529    			{
;;;530    			for(j=8;j<(temp+8);j++)
0008b4  e3a01008          MOV      r1,#8
0008b8  e2823008          ADD      r3,r2,#8
                  |L1.2236|
0008bc  e1510003          CMP      r1,r3
;;;531    				{
;;;532    				RXBUFF[j]=*ptr;
0008c0  34d02001          LDRBCC   r2,[r0],#1
0008c4  37c62001          STRBCC   r2,[r6,r1]
0008c8  32811001          ADDCC    r1,r1,#1              ;530
0008cc  320110ff          ANDCC    r1,r1,#0xff           ;530
0008d0  3afffff9          BCC      |L1.2236|
                  |L1.2260|
;;;533    				ptr++;
;;;534    				}                      
;;;535    			
;;;536    			} 		
;;;537    	
;;;538    	
;;;539    	
;;;540    		
;;;541    		temp=((RXBUFF[1]&0x1f)+4);
0008d4  e5d60001          LDRB     r0,[r6,#1]  ; RXBUFF
0008d8  e200001f          AND      r0,r0,#0x1f
0008dc  e280a004          ADD      r10,r0,#4
;;;542        		//rotor_can[2]++;
;;;543    		if((CRC1_in()==RXBUFF[temp+1])&&(CRC2_in()==RXBUFF[temp+2])&&bR)
0008e0  ebfffffe          BL       CRC1_in
0008e4  e086600a          ADD      r6,r6,r10
0008e8  e5d61001          LDRB     r1,[r6,#1]
0008ec  e1500001          CMP      r0,r1
0008f0  1a000008          BNE      |L1.2328|
0008f4  ebfffffe          BL       CRC2_in
0008f8  e5d61002          LDRB     r1,[r6,#2]
0008fc  e1500001          CMP      r0,r1
000900  1a000004          BNE      |L1.2328|
000904  e5d40006          LDRB     r0,[r4,#6]  ; bR
000908  e3500000          CMP      r0,#0
;;;544    			{
;;;545      
;;;546    			bIN=1;
00090c  13a00001          MOVNE    r0,#1
000910  15c40007          STRBNE   r0,[r4,#7]  ; bIN
;;;547      			//rotor_can[3]++;
;;;548      			can_in_an();
000914  1bfffffe          BLNE     can_in_an
                  |L1.2328|
;;;549    			}    
;;;550        
;;;551      		}
;;;552    
;;;553    	C1CMR = 0x04; // release receive buffer
000918  e3a00004          MOV      r0,#4
00091c  e5850004          STR      r0,[r5,#4]
                  |L1.2336|
;;;554    	}
;;;555    	
;;;556    if(C2ICR & 0x00000001L)
000920  e59f52c4          LDR      r5,|L1.3052|
000924  e595000c          LDR      r0,[r5,#0xc]
000928  e3100001          TST      r0,#1
00092c  0a000028          BEQ      |L1.2516|
;;;557    	{	
;;;558    	if (!(C2RFS & 0xC0000400L))
000930  e5950020          LDR      r0,[r5,#0x20]
000934  e1100007          TST      r0,r7
000938  1a000020          BNE      |L1.2496|
;;;559      		{ // 11-bit ID, no RTR, matched a filter
;;;560    
;;;561    		//rotor_can[3]++;
;;;562        		// initialize destination pointer
;;;563        		// filter number is in lower 10 bits of C1RFS
;;;564        		pDest = (unsigned int *) &(gFullCANList[(C2RFS & 0x000003FFL)].Dat1);
00093c  e5950020          LDR      r0,[r5,#0x20]
000940  e1c009c5          BIC      r0,r0,r5,ASR #19
000944  e0800080          ADD      r0,r0,r0,LSL #1
000948  e0891100          ADD      r1,r9,r0,LSL #2
;;;565        
;;;566        		// calculate contents for first entry into FullCAN list
;;;567        		buf = C2RFS & 0xC00F0000L; // mask FF, RTR and DLC
00094c  e5950020          LDR      r0,[r5,#0x20]
;;;568        		buf |= 0x01002000L; // set semaphore to 01b and CAN port to 1
;;;569        		buf |= C2RID & 0x000007FFL; // get CAN message ID
000950  e5952024          LDR      r2,[r5,#0x24]
000954  e0000008          AND      r0,r0,r8              ;567
000958  e3800401          ORR      r0,r0,#0x1000000      ;568
00095c  e3800a02          ORR      r0,r0,#0x2000         ;568
000960  e1a02a82          LSL      r2,r2,#21
000964  e1a02aa2          LSR      r2,r2,#21
000968  e1800002          ORR      r0,r0,r2
;;;570    
;;;571        		// now copy entire message to FullCAN list
;;;572        		*pDest = buf; 
;;;573        		pDest++; // set to gFullCANList[(C1RFS & 0x000003FFL)].DatA
;;;574        		*pDest = C2RDA; 
00096c  e4810004          STR      r0,[r1],#4
000970  e5953028          LDR      r3,[r5,#0x28]
;;;575        		pDest++; // set to gFullCANList[(C1RFS & 0x000003FFL)].DatB
000974  e2812004          ADD      r2,r1,#4
;;;576        		*pDest = C2RDB; 
000978  e4013004          STR      r3,[r1],#-4
00097c  e595302c          LDR      r3,[r5,#0x2c]
;;;577    
;;;578        		// now set the sempahore to complete
;;;579        		buf |= 0x03000000L; // set semaphore to 11b
000980  e3800403          ORR      r0,r0,#0x3000000
;;;580        		pDest -= 2; // set to gFullCANList[(C1RFS & 0x000003FFL)].Dat1
;;;581        		*pDest = buf; 
000984  e5823000          STR      r3,[r2,#0]
;;;582        
;;;583    		temp=(char)gFullCANList[0].DatA;
000988  e5810000          STR      r0,[r1,#0]
00098c  e5990004          LDR      r0,[r9,#4]  ; gFullCANList
;;;584    		/*if(temp==0x30) bR=0;
;;;585    		else bR++;*/
;;;586    	
;;;587    		temp=(char)(((gFullCANList[0].Dat1)>>16)&0x0f); 
000990  e5990000          LDR      r0,[r9,#0]  ; gFullCANList
;;;588         
;;;589         	ptr=(char*)(&gFullCANList[0].DatA);
;;;590    	
;;;591    		for(j=0;j<temp;j++)
;;;592    			{
;;;593    			RXBUFF2[j]=*ptr;
000994  e59f2254          LDR      r2,|L1.3056|
000998  e1a00600          LSL      r0,r0,#12             ;587
00099c  e1a03e20          LSR      r3,r0,#28             ;587
0009a0  e2891004          ADD      r1,r9,#4              ;589
0009a4  e3a00000          MOV      r0,#0                 ;591
                  |L1.2472|
0009a8  e1500003          CMP      r0,r3                 ;591
0009ac  34d1c001          LDRBCC   r12,[r1],#1
0009b0  37c2c000          STRBCC   r12,[r2,r0]
0009b4  32800001          ADDCC    r0,r0,#1              ;591
0009b8  320000ff          ANDCC    r0,r0,#0xff           ;591
0009bc  3afffff9          BCC      |L1.2472|
                  |L1.2496|
;;;594    			ptr++;
;;;595    			}
;;;596    		}
;;;597    			
;;;598    	bIN2=1;
0009c0  e3a00001          MOV      r0,#1
0009c4  e5c40008          STRB     r0,[r4,#8]  ; bIN2
;;;599    	can_in_an2();
0009c8  ebfffffe          BL       can_in_an2
;;;600    
;;;601    
;;;602    	C2CMR = 0x04; // release receive buffer
0009cc  e3a00004          MOV      r0,#4
0009d0  e5850004          STR      r0,[r5,#4]
                  |L1.2516|
;;;603    	}
;;;604    
;;;605    VICVectAddr = 0xFFFFFFFFL; // acknowledge Interrupt
0009d4  e3e00000          MVN      r0,#0
0009d8  e50b0fd0          STR      r0,[r11,#-0xfd0]
;;;606    
;;;607    }
0009dc  e8bd5fff          POP      {r0-r12,lr}
0009e0  e25ef004          SUBS     pc,lr,#4
;;;608    
                          ENDP

                  can2_init PROC
;;;753    ***************************************************************************/ 
;;;754    short can2_init (unsigned short can_rx_vector, unsigned short can_tx_vector, unsigned int can_btr)
0009e4  e92d40f0          PUSH     {r4-r7,lr}
;;;755    {
;;;756    unsigned int *pSFR; // pointer into SFR space
;;;757    unsigned int *pSFR2; // pointer into SFR space
;;;758    unsigned int offset; // offset added to pSFR
;;;759                                                   
;;;760    PINSEL1 |= 0x00014000L; // Set bit 18
0009e8  e59f321c          LDR      r3,|L1.3084|
0009ec  e593c004          LDR      r12,[r3,#4]
0009f0  e38cc905          ORR      r12,r12,#0x14000
0009f4  e583c004          STR      r12,[r3,#4]
;;;761    offset = 0x00001000L; // Use 1st set of CAN registers
;;;762    
;;;763    // Reset and disable all message filters
;;;764    gCANFilter = 0;
0009f8  e59fc1dc          LDR      r12,|L1.3036|
0009fc  e3a03000          MOV      r3,#0
000a00  e1cc30ba          STRH     r3,[r12,#0xa]  ; gCANFilter
;;;765    
;;;766    // Acceptance Filter Mode Register = off !
;;;767    AFMR = 0x00000001L;
000a04  e59fc204          LDR      r12,|L1.3088|
000a08  e3a0e001          MOV      lr,#1
000a0c  e58ce000          STR      lr,[r12,#0]
;;;768    
;;;769    pSFR = (unsigned int *) &C1MOD + offset; // Select Mode register
000a10  e28cc903          ADD      r12,r12,#0xc000
;;;770    *pSFR = 1; // Go into Reset mode
000a14  e58ce000          STR      lr,[r12,#0]
;;;771    
;;;772    pSFR = (unsigned int *) &C1IER + offset; // Select Interrupt Enable Register
000a18  e28ce010          ADD      lr,r12,#0x10
;;;773    *pSFR = 0;// Disable All Interrupts
;;;774    
;;;775    pSFR = (unsigned int *) &C1GSR + offset; // Select Status Register
000a1c  e28c4008          ADD      r4,r12,#8
;;;776    *pSFR = 0; // Clear Status register
000a20  e58e3000          STR      r3,[lr,#0]
000a24  e5843000          STR      r3,[r4,#0]
;;;777    
;;;778    pSFR = (unsigned int *) &C1BTR + offset; // Select BTR Register
000a28  e284400c          ADD      r4,r4,#0xc
;;;779    *pSFR = can_btr; // Set bit timing
;;;780    
;;;781    
;;;782    
;;;783      // Set and enable error interrupt
;;;784    pSFR = (unsigned int *) &VICVectAddr0;
000a2c  e5842000          STR      r2,[r4,#0]
;;;785    pSFR += 12; // Set to desired interrupt vector
000a30  e2432eed          SUB      r2,r3,#0xed0
;;;786      
;;;787    pSFR2 = (unsigned int *) &VICVectCntl0;
;;;788    pSFR2 += 12; // Set to desired interrupt control
;;;789    
;;;790    // Set interrupt vector
;;;791    *pSFR = (unsigned long) can_isr_err; 
000a34  e59f71d8          LDR      r7,|L1.3092|
000a38  e28240d0          ADD      r4,r2,#0xd0           ;787
000a3c  e2826c01          ADD      r6,r2,#0x100          ;788
000a40  e5827000          STR      r7,[r2,#0]
;;;792    // Use this Interrupt for CAN Rx1 Interrupt
;;;793    *pSFR2 = 0x20 | 19;
000a44  e3a02033          MOV      r2,#0x33
000a48  e5862000          STR      r2,[r6,#0]
;;;794    // Enable CAN Rx1 Interrupt
;;;795    VICIntEnable = 1<<19; 
000a4c  e3a02702          MOV      r2,#0x80000
000a50  e2435c0f          SUB      r5,r3,#0xf00          ;784
000a54  e5032ff0          STR      r2,[r3,#-0xff0]
;;;796    
;;;797    
;;;798    
;;;799      // Set and enable receive interrupt
;;;800    pSFR = (unsigned int *) &VICVectAddr0;
;;;801    pSFR += can_rx_vector; // Set to desired interrupt vector
000a58  e0852100          ADD      r2,r5,r0,LSL #2
;;;802      
;;;803    pSFR2 = (unsigned int *) &VICVectCntl0;
;;;804    pSFR2 += can_rx_vector; // Set to desired interrupt control
;;;805    
;;;806    // Set interrupt vector
;;;807    *pSFR = (unsigned long) can_isr_rx; 
000a5c  e24f6e2a          ADR      r6,can_isr_rx
000a60  e5826000          STR      r6,[r2,#0]
;;;808    // Use this Interrupt for CAN Rx1 Interrupt
;;;809    *pSFR2 = 0x20 | 27;
000a64  e3a0203b          MOV      r2,#0x3b
000a68  e7842100          STR      r2,[r4,r0,LSL #2]
;;;810    // Enable CAN Rx1 Interrupt
;;;811    VICIntEnable = 0x08000000L;  
000a6c  e3a00302          MOV      r0,#0x8000000
000a70  e5030ff0          STR      r0,[r3,#-0xff0]
;;;812    
;;;813      // Set and enable transmit interrupt
;;;814    pSFR = (unsigned int *) &VICVectAddr0;
;;;815    pSFR += can_tx_vector; // Set to desired interrupt vector
;;;816      
;;;817    pSFR2 = (unsigned int *) &VICVectCntl0;
;;;818    pSFR2 += can_tx_vector; // Set to desired interrupt control
;;;819    
;;;820    // Set interrupt vector
;;;821    *pSFR = (unsigned long) can_isr_tx; 
000a74  e59f219c          LDR      r2,|L1.3096|
000a78  e0850101          ADD      r0,r5,r1,LSL #2       ;815
000a7c  e5802000          STR      r2,[r0,#0]
;;;822    // Use this Interrupt for CAN Rx1 Interrupt
;;;823    *pSFR2 = 0x20 | 21;
000a80  e3a00035          MOV      r0,#0x35
000a84  e7840101          STR      r0,[r4,r1,LSL #2]
;;;824    // Enable CAN Rx1 Interrupt
;;;825    VICIntEnable = 0x00200000L;
000a88  e3a00602          MOV      r0,#0x200000
000a8c  e5030ff0          STR      r0,[r3,#-0xff0]
;;;826    
;;;827    pSFR = (unsigned int *) &C1IER + offset; // Select Interrupt register
;;;828    *pSFR = 128+3; // Enable Receive & Transmit Interrupt
000a90  e3a00083          MOV      r0,#0x83
;;;829    
;;;830    // Enter Normal Operating Mode
;;;831    pSFR = (unsigned int *) &C1MOD + offset; // Select Mode register
;;;832    *pSFR = 0; // Operating Mode 
000a94  e58e0000          STR      r0,[lr,#0]
;;;833    
;;;834    return 1;
000a98  e58c3000          STR      r3,[r12,#0]
000a9c  e8bd40f0          POP      {r4-r7,lr}
000aa0  e3a00001          MOV      r0,#1
;;;835    }
000aa4  e12fff1e          BX       lr
;;;836    
                          ENDP

                  FullCAN_SetFilter PROC
;;;840    ***************************************************************************/ 
;;;841    short FullCAN_SetFilter (
000aa8  e92d4030          PUSH     {r4,r5,lr}
;;;842      unsigned short can_port, // CAN interface number
;;;843      unsigned int CANID // 11-bit CAN ID
;;;844      )
;;;845    {
;;;846    unsigned int p, n;
;;;847    unsigned int buf0, buf1;
;;;848    unsigned int ID_lower, ID_upper;
;;;849    unsigned int candata;
;;;850    unsigned int *pAddr;
;;;851    
;;;852      // Double check can_port value
;;;853      if ((can_port < 1) || (can_port > MAX_CANPORTS))
000aac  e2402001          SUB      r2,r0,#1
000ab0  e3520002          CMP      r2,#2
000ab4  2a00000f          BCS      |L1.2808|
;;;854      { // Illegal value for can_port
;;;855        return 0;
;;;856      }
;;;857    
;;;858      // Acceptance Filter Mode Register = off !
;;;859      AFMR = 0x00000001L;
000ab8  e59fe150          LDR      lr,|L1.3088|
000abc  e3a02001          MOV      r2,#1
000ac0  e58e2000          STR      r2,[lr,#0]
;;;860    
;;;861      if (gCANFilter == 0)
000ac4  e59f4110          LDR      r4,|L1.3036|
000ac8  e1d420ba          LDRH     r2,[r4,#0xa]  ; gCANFilter
;;;862      { // First call, init entry zero
;;;863        gFullCANList[0].Dat1 = 0x000037FFL; // CAN 1, disabled and unused
000acc  e59fc134          LDR      r12,|L1.3080|
000ad0  e3520000          CMP      r2,#0                 ;861
000ad4  059f2140          LDREQ    r2,|L1.3100|
000ad8  058c2000          STREQ    r2,[r12,#0]  ; gFullCANList
;;;864      }
;;;865      if (gCANFilter >= MAX_FILTERS)
000adc  e1d420fa          LDRSH    r2,[r4,#0xa]  ; gCANFilter
000ae0  e3520002          CMP      r2,#2
;;;866      {
;;;867        return 0;
;;;868      }
;;;869    
;;;870      CANID &= 0x000007FFL; // Mask out 11-bit ID
000ae4  b1a01a81          LSLLT    r1,r1,#21
000ae8  b1a01aa1          LSRLT    r1,r1,#21
;;;871      CANID |= (can_port << 13); // Put can_port info in bits 13-15
000aec  b1811680          ORRLT    r1,r1,r0,LSL #13
;;;872    
;;;873      // Filters must be sorted by interface, then by priority
;;;874      // new filter is sorted into array
;;;875      p = 0;
000af0  b3a00000          MOVLT    r0,#0
;;;876      while (p < gCANFilter) // loop through all existing filters 
000af4  ba000009          BLT      |L1.2848|
                  |L1.2808|
000af8  e3a00000          MOV      r0,#0                 ;867
                  |L1.2812|
000afc  e8bd4030          POP      {r4,r5,lr}            ;867
;;;877      {
;;;878        if ((gFullCANList[p].Dat1 & 0x0000FFFFL) > CANID)
;;;879        {
;;;880          break;
;;;881        }
;;;882        p++;
;;;883      }
;;;884    
;;;885      // insert new filter here
;;;886      buf0 = gFullCANList[p].Dat1; // save current entry
;;;887      gFullCANList[p].Dat1 = CANID; // insert the new entry
;;;888    
;;;889      // move all remaining entries one row up
;;;890      gCANFilter++;
;;;891      while (p < gCANFilter)
;;;892      {
;;;893        p++;
;;;894        buf1 = gFullCANList[p].Dat1;
;;;895        gFullCANList[p].Dat1 = buf0;
;;;896        buf0 = buf1;
;;;897      }
;;;898    
;;;899      // Now work on Acceptance Filter Configuration     
;;;900      // Set CAN filter for 11-bit standard identifiers
;;;901      p = 0;
;;;902    
;;;903      // Set pointer for Standard Frame Individual
;;;904      // Standard Frame Explicit
;;;905      SFF_sa = p;
;;;906    
;;;907      pAddr = (unsigned int *) ACCEPTANCE_FILTER_RAM_BASE;
;;;908      for (n = 0; n < ((gCANFilter+1)/2); n++)
;;;909      {
;;;910        ID_lower = gFullCANList[n * 2].Dat1 & 0x0000FFFFL;
;;;911        ID_upper = gFullCANList[n * 2 + 1].Dat1 & 0x0000FFFFL;
;;;912        candata = (ID_lower << 16) + ID_upper;
;;;913        *pAddr = candata;
;;;914        p += 4;
;;;915        pAddr++;
;;;916      }
;;;917    
;;;918      // p is still pointing to ENDofTable;
;;;919      
;;;920      // Set pointer for Standard Frame Groups
;;;921      // Standard Frame Group Start Address Register
;;;922      SFF_GRP_sa = p;
;;;923    
;;;924      // Set pointer for Extended Frame Individual
;;;925      // Extended Frame Start Address Register
;;;926      EFF_sa = p;
;;;927    
;;;928      // Set pointer for Extended Frame Groups
;;;929      // Extended Frame Group Start Address Register
;;;930      EFF_GRP_sa = p;
;;;931    
;;;932      // Set ENDofTable 
;;;933      // End of AF Tables Register
;;;934      ENDofTable = p;
;;;935    
;;;936      // Acceptance Filter Mode Register, start using filter
;;;937      AFMR = 0;
;;;938      
;;;939      return 1;
;;;940    }
000b00  e12fff1e          BX       lr
                  |L1.2820|
000b04  e0802080          ADD      r2,r0,r0,LSL #1       ;876
000b08  e79c2102          LDR      r2,[r12,r2,LSL #2]    ;878
000b0c  e1a02802          LSL      r2,r2,#16             ;878
000b10  e1a02822          LSR      r2,r2,#16             ;878
000b14  e1520001          CMP      r2,r1                 ;878
000b18  8a000003          BHI      |L1.2860|
000b1c  e2800001          ADD      r0,r0,#1              ;882
                  |L1.2848|
000b20  e1d420fa          LDRSH    r2,[r4,#0xa]          ;876  ; gCANFilter
000b24  e1500002          CMP      r0,r2                 ;876
000b28  3afffff5          BCC      |L1.2820|
                  |L1.2860|
000b2c  e0803080          ADD      r3,r0,r0,LSL #1       ;880
000b30  e79c2103          LDR      r2,[r12,r3,LSL #2]    ;886
000b34  e78c1103          STR      r1,[r12,r3,LSL #2]    ;887
000b38  e1d410ba          LDRH     r1,[r4,#0xa]          ;890  ; gCANFilter
000b3c  e2811001          ADD      r1,r1,#1              ;890
000b40  e1c410ba          STRH     r1,[r4,#0xa]          ;890  ; gCANFilter
                  |L1.2884|
000b44  e1d410fa          LDRSH    r1,[r4,#0xa]          ;891  ; gCANFilter
000b48  e1500001          CMP      r0,r1                 ;891
000b4c  32800001          ADDCC    r0,r0,#1              ;893
000b50  30801080          ADDCC    r1,r0,r0,LSL #1       ;893
000b54  379c3101          LDRCC    r3,[r12,r1,LSL #2]    ;894
000b58  378c2101          STRCC    r2,[r12,r1,LSL #2]    ;895
000b5c  31a02003          MOVCC    r2,r3                 ;896
000b60  3afffff7          BCC      |L1.2884|
000b64  e3a00000          MOV      r0,#0                 ;901
000b68  e58e0004          STR      r0,[lr,#4]            ;905
000b6c  e59f20ac          LDR      r2,|L1.3104|
000b70  e1a01000          MOV      r1,r0                 ;908
                  |L1.2932|
000b74  e1d430fa          LDRSH    r3,[r4,#0xa]          ;908  ; gCANFilter
000b78  e2833001          ADD      r3,r3,#1              ;908
000b7c  e0833fa3          ADD      r3,r3,r3,LSR #31      ;908
000b80  e15100c3          CMP      r1,r3,ASR #1          ;908
000b84  30813081          ADDCC    r3,r1,r1,LSL #1       ;908
000b88  379c5183          LDRCC    r5,[r12,r3,LSL #3]    ;910
000b8c  308c3183          ADDCC    r3,r12,r3,LSL #3      ;911
000b90  3593300c          LDRCC    r3,[r3,#0xc]          ;911
000b94  32800004          ADDCC    r0,r0,#4              ;914
000b98  31a03803          LSLCC    r3,r3,#16             ;911
000b9c  31a03823          LSRCC    r3,r3,#16             ;911
000ba0  30833805          ADDCC    r3,r3,r5,LSL #16      ;912
000ba4  32811001          ADDCC    r1,r1,#1              ;908
000ba8  34823004          STRCC    r3,[r2],#4            ;908
000bac  3afffff0          BCC      |L1.2932|
000bb0  e58e0008          STR      r0,[lr,#8]            ;922
000bb4  e58e000c          STR      r0,[lr,#0xc]          ;926
000bb8  e58e0010          STR      r0,[lr,#0x10]         ;930
000bbc  e58e0014          STR      r0,[lr,#0x14]         ;934
000bc0  e3a00000          MOV      r0,#0                 ;937
000bc4  e58e0000          STR      r0,[lr,#0]            ;937
000bc8  e3a00001          MOV      r0,#1                 ;939
000bcc  eaffffca          B        |L1.2812|
;;;941    
                          ENDP

                  |L1.3024|
                          DCD      ||.bss||+0x124
                  |L1.3028|
                          DCD      ||.constdata||
                  |L1.3032|
                          DCD      ||.constdata||+0x100
                  |L1.3036|
                          DCD      ||.data||
                  |L1.3040|
                          DCD      ||.bss||
                  |L1.3044|
                          DCD      0xe0044000
                  |L1.3048|
                          DCD      ||.bss||+0x80
                  |L1.3052|
                          DCD      0xe0048000
                  |L1.3056|
                          DCD      ||.bss||+0x174
                  |L1.3060|
                          DCD      ||aa||
                  |L1.3064|
                          DCD      bps
                  |L1.3068|
                          DCD      ||.bss||+0x100
                  |L1.3072|
                          DCD      0xc0000400
                  |L1.3076|
                          DCD      0xc00f0000
                  |L1.3080|
                          DCD      ||.bss||+0x10c
                  |L1.3084|
                          DCD      0xe002c000
                  |L1.3088|
                          DCD      0xe003c000
                  |L1.3092|
                          DCD      can_isr_err
                  |L1.3096|
                          DCD      can_isr_tx
                  |L1.3100|
                          DCD      0x000037ff
                  |L1.3104|
                          DCD      0xe0038000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  CRC1_out PROC
;;;138    //-----------------------------------------------
;;;139    char CRC1_in(void)
000000  e59f2048          LDR      r2,|L2.80|
;;;140    {
000004  e52de004          PUSH     {lr}
;;;141    char r,j,lb;
;;;142    lb=(RXBUFF[1]&0x1f)+0x04;
000008  e5d21001          LDRB     r1,[r2,#1]  ; TXBUFF
;;;143    r=RXBUFF[0];
00000c  e5d20000          LDRB     r0,[r2,#0]  ; TXBUFF
;;;144    for(j=1;j<(lb+1);j++)
;;;145    	{
;;;146    	r=(RXBUFF[j]^Table87[r]);
000010  e59f303c          LDR      r3,|L2.84|
000014  e201101f          AND      r1,r1,#0x1f           ;142
000018  e281c004          ADD      r12,r1,#4             ;142
00001c  e3a01001          MOV      r1,#1                 ;144
000020  e28cc001          ADD      r12,r12,#1            ;144
                  |L2.36|
000024  e151000c          CMP      r1,r12                ;144
000028  37d2e001          LDRBCC   lr,[r2,r1]
00002c  37d30000          LDRBCC   r0,[r3,r0]
000030  32811001          ADDCC    r1,r1,#1              ;144
000034  320110ff          ANDCC    r1,r1,#0xff           ;144
000038  3020000e          EORCC    r0,r0,lr
00003c  3afffff8          BCC      |L2.36|
;;;147    	}
;;;148    if(r==0)r=0xFF;
000040  e49de004          POP      {lr}
000044  e3500000          CMP      r0,#0
000048  03a000ff          MOVEQ    r0,#0xff
;;;149    return r;	
;;;150    } 
00004c  e12fff1e          BX       lr
;;;151    
                          ENDP

                  |L2.80|
                          DCD      ||.bss||+0x14c
                  |L2.84|
                          DCD      ||.constdata||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  CRC2_out PROC
;;;138    //-----------------------------------------------
;;;139    char CRC1_in(void)
000000  e59f2048          LDR      r2,|L3.80|
;;;140    {
000004  e52de004          PUSH     {lr}
;;;141    char r,j,lb;
;;;142    lb=(RXBUFF[1]&0x1f)+0x04;
000008  e5d21001          LDRB     r1,[r2,#1]  ; TXBUFF
;;;143    r=RXBUFF[0];
00000c  e5d20000          LDRB     r0,[r2,#0]  ; TXBUFF
;;;144    for(j=1;j<(lb+1);j++)
;;;145    	{
;;;146    	r=(RXBUFF[j]^Table87[r]);
000010  e59f303c          LDR      r3,|L3.84|
000014  e201101f          AND      r1,r1,#0x1f           ;142
000018  e281c004          ADD      r12,r1,#4             ;142
00001c  e3a01001          MOV      r1,#1                 ;144
000020  e28cc001          ADD      r12,r12,#1            ;144
                  |L3.36|
000024  e151000c          CMP      r1,r12                ;144
000028  37d2e001          LDRBCC   lr,[r2,r1]
00002c  37d30000          LDRBCC   r0,[r3,r0]
000030  32811001          ADDCC    r1,r1,#1              ;144
000034  320110ff          ANDCC    r1,r1,#0xff           ;144
000038  3020000e          EORCC    r0,r0,lr
00003c  3afffff8          BCC      |L3.36|
;;;147    	}
;;;148    if(r==0)r=0xFF;
000040  e49de004          POP      {lr}
000044  e3500000          CMP      r0,#0
000048  03a000ff          MOVEQ    r0,#0xff
;;;149    return r;	
;;;150    } 
00004c  e12fff1e          BX       lr
;;;151    
                          ENDP

                  |L3.80|
                          DCD      ||.bss||+0x14c
                  |L3.84|
                          DCD      ||.constdata||+0x100

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  can_adr_hndl PROC
;;;138    //-----------------------------------------------
;;;139    char CRC1_in(void)
000000  e59f203c          LDR      r2,|L4.68|
;;;140    {
000004  e5d20003          LDRB     r0,[r2,#3]  ; RXBUFF
;;;141    char r,j,lb;
;;;142    lb=(RXBUFF[1]&0x1f)+0x04;
000008  e2821028          ADD      r1,r2,#0x28
;;;143    r=RXBUFF[0];
00000c  e5c10002          STRB     r0,[r1,#2]  ; TXBUFF
;;;144    for(j=1;j<(lb+1);j++)
;;;145    	{
;;;146    	r=(RXBUFF[j]^Table87[r]);
000010  e5d20002          LDRB     r0,[r2,#2]  ; RXBUFF
000014  e5c10003          STRB     r0,[r1,#3]            ;142  ; TXBUFF
000018  e5d20004          LDRB     r0,[r2,#4]            ;142  ; RXBUFF
00001c  e20030f0          AND      r3,r0,#0xf0           ;144
000020  e1a03223          LSR      r3,r3,#4              ;144
000024  e1830200          ORR      r0,r3,r0,LSL #4       ;144
000028  e5c10004          STRB     r0,[r1,#4]  ; TXBUFF
00002c  e5d20005          LDRB     r0,[r2,#5]  ; RXBUFF
000030  e20020f0          AND      r2,r0,#0xf0           ;144
000034  e1a02222          LSR      r2,r2,#4              ;144
000038  e1820200          ORR      r0,r2,r0,LSL #4
00003c  e5c10005          STRB     r0,[r1,#5]            ;144  ; TXBUFF
;;;147    	}
;;;148    if(r==0)r=0xFF;
000040  e12fff1e          BX       lr
;;;149    return r;	
;;;150    } 
;;;151    
                          ENDP

                  |L4.68|
                          DCD      ||.bss||+0x124

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  can_isr_tx PROC
;;;138    //-----------------------------------------------
;;;139    char CRC1_in(void)
000000  e92d51ff          PUSH     {r0-r8,r12,lr}
;;;140    {
000004  e59f3100          LDR      r3,|L5.268|
;;;141    char r,j,lb;
;;;142    lb=(RXBUFF[1]&0x1f)+0x04;
000008  e59f1100          LDR      r1,|L5.272|
;;;143    r=RXBUFF[0];
00000c  e5d30009          LDRB     r0,[r3,#9]  ; can_tx_cnt
;;;144    for(j=1;j<(lb+1);j++)
;;;145    	{
;;;146    	r=(RXBUFF[j]^Table87[r]);
000010  e2800001          ADD      r0,r0,#1
000014  e5c30009          STRB     r0,[r3,#9]            ;142  ; can_tx_cnt
000018  e1d100b4          LDRH     r0,[r1,#4]            ;142  ; rotor_can
00001c  e2800001          ADD      r0,r0,#1              ;144
000020  e1c100b4          STRH     r0,[r1,#4]            ;144  ; rotor_can
000024  e59f10e8          LDR      r1,|L5.276|
000028  e591000c          LDR      r0,[r1,#0xc]
00002c  e59f60e4          LDR      r6,|L5.280|
000030  e3100002          TST      r0,#2                 ;144
000034  e286c020          ADD      r12,r6,#0x20          ;144
000038  e28ce020          ADD      lr,r12,#0x20
00003c  e28e4020          ADD      r4,lr,#0x20           ;144
;;;147    	}
;;;148    if(r==0)r=0xFF;
000040  e3a05021          MOV      r5,#0x21
000044  e3a07001          MOV      r7,#1
000048  e3a02000          MOV      r2,#0
;;;149    return r;	
;;;150    } 
00004c  0a000013          BEQ      |L5.160|
000050  e5d38002          LDRB     r8,[r3,#2]  ; ptr_can1_tx_wr
000054  e5d30003          LDRB     r0,[r3,#3]  ; ptr_can1_tx_rd
000058  e1580000          CMP      r8,r0
00005c  05c37000          STRBEQ   r7,[r3,#0]  ; bOUT_FREE
000060  0a000025          BEQ      |L5.252|
000064  e7966100          LDR      r6,[r6,r0,LSL #2]
000068  e5816030          STR      r6,[r1,#0x30]
00006c  e79cc100          LDR      r12,[r12,r0,LSL #2]
000070  e581c034          STR      r12,[r1,#0x34]
000074  e79ec100          LDR      r12,[lr,r0,LSL #2]
000078  e581c038          STR      r12,[r1,#0x38]
00007c  e794c100          LDR      r12,[r4,r0,LSL #2]
000080  e581c03c          STR      r12,[r1,#0x3c]
000084  e5815004          STR      r5,[r1,#4]
000088  e2800001          ADD      r0,r0,#1
00008c  e20000ff          AND      r0,r0,#0xff
000090  e3500008          CMP      r0,#8
000094  e5c30003          STRB     r0,[r3,#3]  ; ptr_can1_tx_rd
000098  25c32003          STRBCS   r2,[r3,#3]  ; ptr_can1_tx_rd
00009c  ea000016          B        |L5.252|
                  |L5.160|
0000a0  e59f1074          LDR      r1,|L5.284|
0000a4  e591000c          LDR      r0,[r1,#0xc]
0000a8  e3100002          TST      r0,#2
0000ac  0a000012          BEQ      |L5.252|
0000b0  e5d38004          LDRB     r8,[r3,#4]  ; ptr_can2_tx_wr
0000b4  e5d30005          LDRB     r0,[r3,#5]  ; ptr_can2_tx_rd
0000b8  e1580000          CMP      r8,r0
0000bc  05c37001          STRBEQ   r7,[r3,#1]  ; bOUT_FREE2
0000c0  0a00000d          BEQ      |L5.252|
0000c4  e7966100          LDR      r6,[r6,r0,LSL #2]
0000c8  e5816030          STR      r6,[r1,#0x30]
0000cc  e79cc100          LDR      r12,[r12,r0,LSL #2]
0000d0  e581c034          STR      r12,[r1,#0x34]
0000d4  e79ec100          LDR      r12,[lr,r0,LSL #2]
0000d8  e581c038          STR      r12,[r1,#0x38]
0000dc  e794c100          LDR      r12,[r4,r0,LSL #2]
0000e0  e581c03c          STR      r12,[r1,#0x3c]
0000e4  e5815004          STR      r5,[r1,#4]
0000e8  e2800001          ADD      r0,r0,#1
0000ec  e20000ff          AND      r0,r0,#0xff
0000f0  e3500008          CMP      r0,#8
0000f4  e5c30005          STRB     r0,[r3,#5]  ; ptr_can2_tx_rd
0000f8  25c32005          STRBCS   r2,[r3,#5]  ; ptr_can2_tx_rd
                  |L5.252|
0000fc  e3e00000          MVN      r0,#0
000100  e5020fd0          STR      r0,[r2,#-0xfd0]
000104  e8bd51ff          POP      {r0-r8,r12,lr}
000108  e25ef004          SUBS     pc,lr,#4
;;;151    
                          ENDP

                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      ||.bss||+0x100
                  |L5.276|
                          DCD      0xe0044000
                  |L5.280|
                          DCD      ||.bss||
                  |L5.284|
                          DCD      0xe0048000

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  can_isr_err PROC
;;;138    //-----------------------------------------------
;;;139    char CRC1_in(void)
000000  e92d0007          PUSH     {r0-r2}
;;;140    {
000004  e59f003c          LDR      r0,|L6.72|
;;;141    char r,j,lb;
;;;142    lb=(RXBUFF[1]&0x1f)+0x04;
000008  e590200c          LDR      r2,[r0,#0xc]
;;;143    r=RXBUFF[0];
00000c  e3a01000          MOV      r1,#0
;;;144    for(j=1;j<(lb+1);j++)
;;;145    	{
;;;146    	r=(RXBUFF[j]^Table87[r]);
000010  e3120080          TST      r2,#0x80
000014  0a000007          BEQ      |L6.56|
000018  e5902008          LDR      r2,[r0,#8]            ;142
00001c  e3c224ff          BIC      r2,r2,#0xff000000     ;144
000020  e3822403          ORR      r2,r2,#0x3000000      ;144
000024  e5802008          STR      r2,[r0,#8]            ;144
000028  e5801000          STR      r1,[r0,#0]
00002c  e59f2018          LDR      r2,|L6.76|
000030  e3a00001          MOV      r0,#1                 ;144
000034  e5c20001          STRB     r0,[r2,#1]            ;144  ; bOUT_FREE2
                  |L6.56|
000038  e3e00000          MVN      r0,#0
00003c  e5010fd0          STR      r0,[r1,#-0xfd0]       ;144
;;;147    	}
;;;148    if(r==0)r=0xFF;
000040  e8bd0007          POP      {r0-r2}
000044  e25ef004          SUBS     pc,lr,#4
;;;149    return r;	
;;;150    } 
;;;151    
                          ENDP

                  |L6.72|
                          DCD      0xe0048000
                  |L6.76|
                          DCD      ||.data||

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  can1_init PROC
;;;138    //-----------------------------------------------
;;;139    char CRC1_in(void)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;140    {
000004  e59f3098          LDR      r3,|L7.164|
;;;141    char r,j,lb;
;;;142    lb=(RXBUFF[1]&0x1f)+0x04;
000008  e593c004          LDR      r12,[r3,#4]
;;;143    r=RXBUFF[0];
00000c  e38cc701          ORR      r12,r12,#0x40000
;;;144    for(j=1;j<(lb+1);j++)
;;;145    	{
;;;146    	r=(RXBUFF[j]^Table87[r]);
000010  e583c004          STR      r12,[r3,#4]
000014  e59fc08c          LDR      r12,|L7.168|
000018  e3a03000          MOV      r3,#0                 ;142
00001c  e1cc30ba          STRH     r3,[r12,#0xa]         ;144  ; gCANFilter
000020  e59fc084          LDR      r12,|L7.172|
000024  e3a0e001          MOV      lr,#1                 ;144
000028  e58ce000          STR      lr,[r12,#0]
00002c  e28cc902          ADD      r12,r12,#0x8000
000030  e58ce000          STR      lr,[r12,#0]           ;144
000034  e28ce010          ADD      lr,r12,#0x10          ;144
000038  e28c4008          ADD      r4,r12,#8
00003c  e58e3000          STR      r3,[lr,#0]            ;144
;;;147    	}
;;;148    if(r==0)r=0xFF;
000040  e5843000          STR      r3,[r4,#0]
000044  e284400c          ADD      r4,r4,#0xc
000048  e5842000          STR      r2,[r4,#0]
;;;149    return r;	
;;;150    } 
00004c  e59f605c          LDR      r6,|L7.176|
000050  e2435c0f          SUB      r5,r3,#0xf00
000054  e0852100          ADD      r2,r5,r0,LSL #2
000058  e5826000          STR      r6,[r2,#0]
00005c  e2434c0e          SUB      r4,r3,#0xe00
000060  e3a0203a          MOV      r2,#0x3a
000064  e7842100          STR      r2,[r4,r0,LSL #2]
000068  e3a00301          MOV      r0,#0x4000000
00006c  e5030ff0          STR      r0,[r3,#-0xff0]
000070  e59f203c          LDR      r2,|L7.180|
000074  e0850101          ADD      r0,r5,r1,LSL #2
000078  e5802000          STR      r2,[r0,#0]
00007c  e3a00034          MOV      r0,#0x34
000080  e7840101          STR      r0,[r4,r1,LSL #2]
000084  e3a00601          MOV      r0,#0x100000
000088  e5030ff0          STR      r0,[r3,#-0xff0]
00008c  e3a00003          MOV      r0,#3
000090  e58e0000          STR      r0,[lr,#0]
000094  e58c3000          STR      r3,[r12,#0]
000098  e8bd4070          POP      {r4-r6,lr}
00009c  e3a00001          MOV      r0,#1
0000a0  e12fff1e          BX       lr
;;;151    
                          ENDP

                  |L7.164|
                          DCD      0xe002c000
                  |L7.168|
                          DCD      ||.data||
                  |L7.172|
                          DCD      0xe003c000
                  |L7.176|
                          DCD      can_isr_rx
                  |L7.180|
                          DCD      can_isr_tx

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  can1_info
                          %        32
                  can1_id
                          %        32
                  can1_data
                          %        32
                  can1_datb
                          %        32
                  can2_info
                          %        32
                  can2_id
                          %        32
                  can2_data
                          %        32
                  can2_datb
                          %        32
                  rotor_can
                          %        12
                  gFullCANList
                          %        24
                  RXBUFF
                          %        40
                  TXBUFF
                          %        40
                  RXBUFF2
                          %        40

                          AREA ||area_number.10||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.bss||
                  bd_dumm
                          %        25

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.bss||
                  ||bd||
                          %        25

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.bss||
                  TXBUFF2
                          %        40

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Table87
000000  000e1c12          DCB      0x00,0x0e,0x1c,0x12
000004  3836242a          DCB      0x38,0x36,0x24,0x2a
000008  707e6c62          DCB      0x70,0x7e,0x6c,0x62
00000c  4846545a          DCB      0x48,0x46,0x54,0x5a
000010  e0eefcf2          DCB      0xe0,0xee,0xfc,0xf2
000014  d8d6c4ca          DCB      0xd8,0xd6,0xc4,0xca
000018  909e8c82          DCB      0x90,0x9e,0x8c,0x82
00001c  a8a6b4ba          DCB      0xa8,0xa6,0xb4,0xba
000020  cec0d2dc          DCB      0xce,0xc0,0xd2,0xdc
000024  f6f8eae4          DCB      0xf6,0xf8,0xea,0xe4
000028  beb0a2ac          DCB      0xbe,0xb0,0xa2,0xac
00002c  86889a94          DCB      0x86,0x88,0x9a,0x94
000030  2e20323c          DCB      0x2e,0x20,0x32,0x3c
000034  16180a04          DCB      0x16,0x18,0x0a,0x04
000038  5e50424c          DCB      0x5e,0x50,0x42,0x4c
00003c  66687a74          DCB      0x66,0x68,0x7a,0x74
000040  929c8e80          DCB      0x92,0x9c,0x8e,0x80
000044  aaa4b6b8          DCB      0xaa,0xa4,0xb6,0xb8
000048  e2ecfef0          DCB      0xe2,0xec,0xfe,0xf0
00004c  dad4c6c8          DCB      0xda,0xd4,0xc6,0xc8
000050  727c6e60          DCB      0x72,0x7c,0x6e,0x60
000054  4a445658          DCB      0x4a,0x44,0x56,0x58
000058  020c1e10          DCB      0x02,0x0c,0x1e,0x10
00005c  3a342628          DCB      0x3a,0x34,0x26,0x28
000060  5c52404e          DCB      0x5c,0x52,0x40,0x4e
000064  646a7876          DCB      0x64,0x6a,0x78,0x76
000068  2c22303e          DCB      0x2c,0x22,0x30,0x3e
00006c  141a0806          DCB      0x14,0x1a,0x08,0x06
000070  bcb2a0ae          DCB      0xbc,0xb2,0xa0,0xae
000074  848a9896          DCB      0x84,0x8a,0x98,0x96
000078  ccc2d0de          DCB      0xcc,0xc2,0xd0,0xde
00007c  f4fae8e6          DCB      0xf4,0xfa,0xe8,0xe6
000080  2a243638          DCB      0x2a,0x24,0x36,0x38
000084  121c0e00          DCB      0x12,0x1c,0x0e,0x00
000088  5a544648          DCB      0x5a,0x54,0x46,0x48
00008c  626c7e70          DCB      0x62,0x6c,0x7e,0x70
000090  cac4d6d8          DCB      0xca,0xc4,0xd6,0xd8
000094  f2fceee0          DCB      0xf2,0xfc,0xee,0xe0
000098  bab4a6a8          DCB      0xba,0xb4,0xa6,0xa8
00009c  828c9e90          DCB      0x82,0x8c,0x9e,0x90
0000a0  e4eaf8f6          DCB      0xe4,0xea,0xf8,0xf6
0000a4  dcd2c0ce          DCB      0xdc,0xd2,0xc0,0xce
0000a8  949a8886          DCB      0x94,0x9a,0x88,0x86
0000ac  aca2b0be          DCB      0xac,0xa2,0xb0,0xbe
0000b0  040a1816          DCB      0x04,0x0a,0x18,0x16
0000b4  3c32202e          DCB      0x3c,0x32,0x20,0x2e
0000b8  747a6866          DCB      0x74,0x7a,0x68,0x66
0000bc  4c42505e          DCB      0x4c,0x42,0x50,0x5e
0000c0  b8b6a4aa          DCB      0xb8,0xb6,0xa4,0xaa
0000c4  808e9c92          DCB      0x80,0x8e,0x9c,0x92
0000c8  c8c6d4da          DCB      0xc8,0xc6,0xd4,0xda
0000cc  f0feece2          DCB      0xf0,0xfe,0xec,0xe2
0000d0  5856444a          DCB      0x58,0x56,0x44,0x4a
0000d4  606e7c72          DCB      0x60,0x6e,0x7c,0x72
0000d8  2826343a          DCB      0x28,0x26,0x34,0x3a
0000dc  101e0c02          DCB      0x10,0x1e,0x0c,0x02
0000e0  76786a64          DCB      0x76,0x78,0x6a,0x64
0000e4  4e40525c          DCB      0x4e,0x40,0x52,0x5c
0000e8  06081a14          DCB      0x06,0x08,0x1a,0x14
0000ec  3e30222c          DCB      0x3e,0x30,0x22,0x2c
0000f0  96988a84          DCB      0x96,0x98,0x8a,0x84
0000f4  aea0b2bc          DCB      0xae,0xa0,0xb2,0xbc
0000f8  e6e8faf4          DCB      0xe6,0xe8,0xfa,0xf4
0000fc  ded0c2cc          DCB      0xde,0xd0,0xc2,0xcc
                  Table95
000100  002a547e          DCB      0x00,0x2a,0x54,0x7e
000104  a882fcd6          DCB      0xa8,0x82,0xfc,0xd6
000108  7a502e04          DCB      0x7a,0x50,0x2e,0x04
00010c  d2f886ac          DCB      0xd2,0xf8,0x86,0xac
000110  f4dea08a          DCB      0xf4,0xde,0xa0,0x8a
000114  5c760822          DCB      0x5c,0x76,0x08,0x22
000118  8ea4daf0          DCB      0x8e,0xa4,0xda,0xf0
00011c  260c7258          DCB      0x26,0x0c,0x72,0x58
000120  c2e896bc          DCB      0xc2,0xe8,0x96,0xbc
000124  6a403e14          DCB      0x6a,0x40,0x3e,0x14
000128  b892ecc6          DCB      0xb8,0x92,0xec,0xc6
00012c  103a446e          DCB      0x10,0x3a,0x44,0x6e
000130  361c6248          DCB      0x36,0x1c,0x62,0x48
000134  9eb4cae0          DCB      0x9e,0xb4,0xca,0xe0
000138  4c661832          DCB      0x4c,0x66,0x18,0x32
00013c  e4ceb09a          DCB      0xe4,0xce,0xb0,0x9a
000140  ae84fad0          DCB      0xae,0x84,0xfa,0xd0
000144  062c5278          DCB      0x06,0x2c,0x52,0x78
000148  d4fe80aa          DCB      0xd4,0xfe,0x80,0xaa
00014c  7c562802          DCB      0x7c,0x56,0x28,0x02
000150  5a700e24          DCB      0x5a,0x70,0x0e,0x24
000154  f2d8a68c          DCB      0xf2,0xd8,0xa6,0x8c
000158  200a745e          DCB      0x20,0x0a,0x74,0x5e
00015c  88a2dcf6          DCB      0x88,0xa2,0xdc,0xf6
000160  6c463812          DCB      0x6c,0x46,0x38,0x12
000164  c4ee90ba          DCB      0xc4,0xee,0x90,0xba
000168  163c4268          DCB      0x16,0x3c,0x42,0x68
00016c  be94eac0          DCB      0xbe,0x94,0xea,0xc0
000170  98b2cce6          DCB      0x98,0xb2,0xcc,0xe6
000174  301a644e          DCB      0x30,0x1a,0x64,0x4e
000178  e2c8b69c          DCB      0xe2,0xc8,0xb6,0x9c
00017c  4a601e34          DCB      0x4a,0x60,0x1e,0x34
000180  765c2208          DCB      0x76,0x5c,0x22,0x08
000184  def48aa0          DCB      0xde,0xf4,0x8a,0xa0
000188  0c265872          DCB      0x0c,0x26,0x58,0x72
00018c  a48ef0da          DCB      0xa4,0x8e,0xf0,0xda
000190  82a8d6fc          DCB      0x82,0xa8,0xd6,0xfc
000194  2a007e54          DCB      0x2a,0x00,0x7e,0x54
000198  f8d2ac86          DCB      0xf8,0xd2,0xac,0x86
00019c  507a042e          DCB      0x50,0x7a,0x04,0x2e
0001a0  b49ee0ca          DCB      0xb4,0x9e,0xe0,0xca
0001a4  1c364862          DCB      0x1c,0x36,0x48,0x62
0001a8  cee49ab0          DCB      0xce,0xe4,0x9a,0xb0
0001ac  664c3218          DCB      0x66,0x4c,0x32,0x18
0001b0  406a143e          DCB      0x40,0x6a,0x14,0x3e
0001b4  e8c2bc96          DCB      0xe8,0xc2,0xbc,0x96
0001b8  3a106e44          DCB      0x3a,0x10,0x6e,0x44
0001bc  92b8c6ec          DCB      0x92,0xb8,0xc6,0xec
0001c0  d8f28ca6          DCB      0xd8,0xf2,0x8c,0xa6
0001c4  705a240e          DCB      0x70,0x5a,0x24,0x0e
0001c8  a288f6dc          DCB      0xa2,0x88,0xf6,0xdc
0001cc  0a205e74          DCB      0x0a,0x20,0x5e,0x74
0001d0  2c067852          DCB      0x2c,0x06,0x78,0x52
0001d4  84aed0fa          DCB      0x84,0xae,0xd0,0xfa
0001d8  567c0228          DCB      0x56,0x7c,0x02,0x28
0001dc  fed4aa80          DCB      0xfe,0xd4,0xaa,0x80
0001e0  1a304e64          DCB      0x1a,0x30,0x4e,0x64
0001e4  b298e6cc          DCB      0xb2,0x98,0xe6,0xcc
0001e8  604a341e          DCB      0x60,0x4a,0x34,0x1e
0001ec  c8e29cb6          DCB      0xc8,0xe2,0x9c,0xb6
0001f0  eec4ba90          DCB      0xee,0xc4,0xba,0x90
0001f4  466c1238          DCB      0x46,0x6c,0x12,0x38
0001f8  94bec0ea          DCB      0x94,0xbe,0xc0,0xea
0001fc  3c166842          DCB      0x3c,0x16,0x68,0x42

                          AREA ||.data||, DATA, ALIGN=1

                  bOUT_FREE
000000  01                DCB      0x01
                  bOUT_FREE2
000001  01                DCB      0x01
                  ptr_can1_tx_wr
000002  00                DCB      0x00
                  ptr_can1_tx_rd
000003  00                DCB      0x00
                  ptr_can2_tx_wr
000004  00                DCB      0x00
                  ptr_can2_tx_rd
000005  00                DCB      0x00
                  ||bR||
000006  00                DCB      0x00
                  bIN
000007  00                DCB      0x00
                  bIN2
000008  00                DCB      0x00
                  can_tx_cnt
000009  00                DCB      0x00
                  gCANFilter
00000a  0000              DCW      0x0000

                          AREA ||area_number.16||, DATA, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.data||
                  TX_len
000000  00                DCB      0x00

                          AREA ||area_number.17||, DATA, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.data||
                  bOUT
000000  00                DCB      0x00

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  rotor_rotor_rotor
000000  0000              DCB      0x00,0x00
